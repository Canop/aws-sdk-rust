// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_resiliency_policy_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_resiliency_policy::CreateResiliencyPolicyInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_location_constraint {
        object.key("dataLocationConstraint").string(var_2.as_str());
    }
    {
        #[allow(unused_mut)]
        let mut object_3 = object.key("policy").start_object();
        for (key_4, value_5) in &input.policy {
            {
                #[allow(unused_mut)]
                let mut object_6 = object_3.key(key_4.as_str()).start_object();
                crate::protocol_serde::shape_failure_policy::ser_failure_policy(&mut object_6, value_5)?;
                object_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_7) = &input.policy_description {
        object.key("policyDescription").string(var_7.as_str());
    }
    {
        object.key("policyName").string(input.policy_name.as_str());
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    {
        object.key("tier").string(input.tier.as_str());
    }
    Ok(())
}
