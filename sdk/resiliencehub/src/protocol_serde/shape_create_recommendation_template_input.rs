// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_recommendation_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_recommendation_template::CreateRecommendationTemplateInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("assessmentArn").string(input.assessment_arn.as_str());
    }
    if let Some(var_1) = &input.bucket_name {
        object.key("bucketName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.format {
        object.key("format").string(var_3.as_str());
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_4) = &input.recommendation_ids {
        let mut array_5 = object.key("recommendationIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.recommendation_types {
        let mut array_8 = object.key("recommendationTypes").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
