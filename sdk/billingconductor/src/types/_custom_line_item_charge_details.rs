// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The charge details of a custom line item. It should contain only one of <code>Flat</code> or <code>Percentage</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomLineItemChargeDetails {
    /// <p>A <code>CustomLineItemFlatChargeDetails</code> that describes the charge details of a flat custom line item.</p>
    pub flat: ::std::option::Option<crate::types::CustomLineItemFlatChargeDetails>,
    /// <p>A <code>CustomLineItemPercentageChargeDetails</code> that describes the charge details of a percentage custom line item.</p>
    pub percentage: ::std::option::Option<crate::types::CustomLineItemPercentageChargeDetails>,
    /// <p>The type of the custom line item that indicates whether the charge is a fee or credit.</p>
    pub r#type: ::std::option::Option<crate::types::CustomLineItemType>,
    /// <p>A representation of the line item filter.</p>
    pub line_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::LineItemFilter>>,
}
impl CustomLineItemChargeDetails {
    /// <p>A <code>CustomLineItemFlatChargeDetails</code> that describes the charge details of a flat custom line item.</p>
    pub fn flat(&self) -> ::std::option::Option<&crate::types::CustomLineItemFlatChargeDetails> {
        self.flat.as_ref()
    }
    /// <p>A <code>CustomLineItemPercentageChargeDetails</code> that describes the charge details of a percentage custom line item.</p>
    pub fn percentage(&self) -> ::std::option::Option<&crate::types::CustomLineItemPercentageChargeDetails> {
        self.percentage.as_ref()
    }
    /// <p>The type of the custom line item that indicates whether the charge is a fee or credit.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::CustomLineItemType> {
        self.r#type.as_ref()
    }
    /// <p>A representation of the line item filter.</p>
    pub fn line_item_filters(&self) -> ::std::option::Option<&[crate::types::LineItemFilter]> {
        self.line_item_filters.as_deref()
    }
}
impl CustomLineItemChargeDetails {
    /// Creates a new builder-style object to manufacture [`CustomLineItemChargeDetails`](crate::types::CustomLineItemChargeDetails).
    pub fn builder() -> crate::types::builders::CustomLineItemChargeDetailsBuilder {
        crate::types::builders::CustomLineItemChargeDetailsBuilder::default()
    }
}

/// A builder for [`CustomLineItemChargeDetails`](crate::types::CustomLineItemChargeDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomLineItemChargeDetailsBuilder {
    pub(crate) flat: ::std::option::Option<crate::types::CustomLineItemFlatChargeDetails>,
    pub(crate) percentage: ::std::option::Option<crate::types::CustomLineItemPercentageChargeDetails>,
    pub(crate) r#type: ::std::option::Option<crate::types::CustomLineItemType>,
    pub(crate) line_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::LineItemFilter>>,
}
impl CustomLineItemChargeDetailsBuilder {
    /// <p>A <code>CustomLineItemFlatChargeDetails</code> that describes the charge details of a flat custom line item.</p>
    pub fn flat(mut self, input: crate::types::CustomLineItemFlatChargeDetails) -> Self {
        self.flat = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>CustomLineItemFlatChargeDetails</code> that describes the charge details of a flat custom line item.</p>
    pub fn set_flat(mut self, input: ::std::option::Option<crate::types::CustomLineItemFlatChargeDetails>) -> Self {
        self.flat = input;
        self
    }
    /// <p>A <code>CustomLineItemFlatChargeDetails</code> that describes the charge details of a flat custom line item.</p>
    pub fn get_flat(&self) -> &::std::option::Option<crate::types::CustomLineItemFlatChargeDetails> {
        &self.flat
    }
    /// <p>A <code>CustomLineItemPercentageChargeDetails</code> that describes the charge details of a percentage custom line item.</p>
    pub fn percentage(mut self, input: crate::types::CustomLineItemPercentageChargeDetails) -> Self {
        self.percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>CustomLineItemPercentageChargeDetails</code> that describes the charge details of a percentage custom line item.</p>
    pub fn set_percentage(mut self, input: ::std::option::Option<crate::types::CustomLineItemPercentageChargeDetails>) -> Self {
        self.percentage = input;
        self
    }
    /// <p>A <code>CustomLineItemPercentageChargeDetails</code> that describes the charge details of a percentage custom line item.</p>
    pub fn get_percentage(&self) -> &::std::option::Option<crate::types::CustomLineItemPercentageChargeDetails> {
        &self.percentage
    }
    /// <p>The type of the custom line item that indicates whether the charge is a fee or credit.</p>
    pub fn r#type(mut self, input: crate::types::CustomLineItemType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the custom line item that indicates whether the charge is a fee or credit.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CustomLineItemType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the custom line item that indicates whether the charge is a fee or credit.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CustomLineItemType> {
        &self.r#type
    }
    /// Appends an item to `line_item_filters`.
    ///
    /// To override the contents of this collection use [`set_line_item_filters`](Self::set_line_item_filters).
    ///
    /// <p>A representation of the line item filter.</p>
    pub fn line_item_filters(mut self, input: crate::types::LineItemFilter) -> Self {
        let mut v = self.line_item_filters.unwrap_or_default();
        v.push(input);
        self.line_item_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A representation of the line item filter.</p>
    pub fn set_line_item_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LineItemFilter>>) -> Self {
        self.line_item_filters = input;
        self
    }
    /// <p>A representation of the line item filter.</p>
    pub fn get_line_item_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LineItemFilter>> {
        &self.line_item_filters
    }
    /// Consumes the builder and constructs a [`CustomLineItemChargeDetails`](crate::types::CustomLineItemChargeDetails).
    pub fn build(self) -> crate::types::CustomLineItemChargeDetails {
        crate::types::CustomLineItemChargeDetails {
            flat: self.flat,
            percentage: self.percentage,
            r#type: self.r#type,
            line_item_filters: self.line_item_filters,
        }
    }
}
