// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_custom_line_item_charge_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CustomLineItemChargeDetails,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.flat {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Flat").start_object();
        crate::protocol_serde::shape_custom_line_item_flat_charge_details::ser_custom_line_item_flat_charge_details(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.percentage {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Percentage").start_object();
        crate::protocol_serde::shape_custom_line_item_percentage_charge_details::ser_custom_line_item_percentage_charge_details(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.r#type {
        object.key("Type").string(var_5.as_str());
    }
    if let Some(var_6) = &input.line_item_filters {
        let mut array_7 = object.key("LineItemFilters").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_line_item_filter::ser_line_item_filter(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}
