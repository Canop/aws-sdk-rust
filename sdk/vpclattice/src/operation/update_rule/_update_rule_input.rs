// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRuleInput {
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub service_identifier: ::std::string::String,
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub listener_identifier: ::std::string::String,
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub rule_identifier: ::std::string::String,
    /// <p>The rule match.</p>
    pub r#match: ::std::option::Option<crate::types::RuleMatch>,
    /// <p>The rule priority. A listener can't have multiple rules with the same priority.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>Information about the action for the specified listener rule.</p>
    pub action: ::std::option::Option<crate::types::RuleAction>,
}
impl UpdateRuleInput {
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn service_identifier(&self) -> &str {
        use std::ops::Deref;
        self.service_identifier.deref()
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub fn listener_identifier(&self) -> &str {
        use std::ops::Deref;
        self.listener_identifier.deref()
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_identifier(&self) -> &str {
        use std::ops::Deref;
        self.rule_identifier.deref()
    }
    /// <p>The rule match.</p>
    pub fn r#match(&self) -> ::std::option::Option<&crate::types::RuleMatch> {
        self.r#match.as_ref()
    }
    /// <p>The rule priority. A listener can't have multiple rules with the same priority.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::RuleAction> {
        self.action.as_ref()
    }
}
impl UpdateRuleInput {
    /// Creates a new builder-style object to manufacture [`UpdateRuleInput`](crate::operation::update_rule::UpdateRuleInput).
    pub fn builder() -> crate::operation::update_rule::builders::UpdateRuleInputBuilder {
        crate::operation::update_rule::builders::UpdateRuleInputBuilder::default()
    }
}

/// A builder for [`UpdateRuleInput`](crate::operation::update_rule::UpdateRuleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRuleInputBuilder {
    pub(crate) service_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) listener_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) rule_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) r#match: ::std::option::Option<crate::types::RuleMatch>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) action: ::std::option::Option<crate::types::RuleAction>,
}
impl UpdateRuleInputBuilder {
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    /// This field is required.
    pub fn service_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn set_service_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_identifier = input;
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn get_service_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_identifier
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    /// This field is required.
    pub fn listener_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listener_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub fn set_listener_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listener_identifier = input;
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub fn get_listener_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.listener_identifier
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    /// This field is required.
    pub fn rule_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub fn set_rule_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_identifier = input;
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub fn get_rule_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_identifier
    }
    /// <p>The rule match.</p>
    pub fn r#match(mut self, input: crate::types::RuleMatch) -> Self {
        self.r#match = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule match.</p>
    pub fn set_match(mut self, input: ::std::option::Option<crate::types::RuleMatch>) -> Self {
        self.r#match = input;
        self
    }
    /// <p>The rule match.</p>
    pub fn get_match(&self) -> &::std::option::Option<crate::types::RuleMatch> {
        &self.r#match
    }
    /// <p>The rule priority. A listener can't have multiple rules with the same priority.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule priority. A listener can't have multiple rules with the same priority.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The rule priority. A listener can't have multiple rules with the same priority.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn action(mut self, input: crate::types::RuleAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RuleAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`UpdateRuleInput`](crate::operation::update_rule::UpdateRuleInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_identifier`](crate::operation::update_rule::builders::UpdateRuleInputBuilder::service_identifier)
    /// - [`listener_identifier`](crate::operation::update_rule::builders::UpdateRuleInputBuilder::listener_identifier)
    /// - [`rule_identifier`](crate::operation::update_rule::builders::UpdateRuleInputBuilder::rule_identifier)
    pub fn build(self) -> ::std::result::Result<crate::operation::update_rule::UpdateRuleInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_rule::UpdateRuleInput {
            service_identifier: self.service_identifier.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "service_identifier",
                    "service_identifier was not specified but it is required when building UpdateRuleInput",
                )
            })?,
            listener_identifier: self.listener_identifier.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "listener_identifier",
                    "listener_identifier was not specified but it is required when building UpdateRuleInput",
                )
            })?,
            rule_identifier: self.rule_identifier.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "rule_identifier",
                    "rule_identifier was not specified but it is required when building UpdateRuleInput",
                )
            })?,
            r#match: self.r#match,
            priority: self.priority,
            action: self.action,
        })
    }
}
