// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_service_network_service_association::_create_service_network_service_association_output::CreateServiceNetworkServiceAssociationOutputBuilder;

pub use crate::operation::create_service_network_service_association::_create_service_network_service_association_input::CreateServiceNetworkServiceAssociationInputBuilder;

/// Fluent builder constructing a request to `CreateServiceNetworkServiceAssociation`.
/// 
/// <p>Associates a service with a service network.</p> 
/// <p>You can't use this operation if the service and service network are already associated or if there is a disassociation or deletion in progress. If the association fails, you can retry the operation by deleting the association and recreating it.</p> 
/// <p>You cannot associate a service and service network that are shared with a caller. The caller must own either the service or the service network.</p> 
/// <p>As a result of this operation, the association is created in the service network account and the association owner account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateServiceNetworkServiceAssociationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_service_network_service_association::builders::CreateServiceNetworkServiceAssociationInputBuilder
            }
impl CreateServiceNetworkServiceAssociationFluentBuilder  {
    /// Creates a new `CreateServiceNetworkServiceAssociation`.
                    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
                        Self { handle, inner: Default::default() }
                    }
    
                    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociation, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationOutput, aws_smithy_http::result::SdkError<crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn service_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_identifier(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn set_service_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_service_identifier(input);
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.</p>
    pub fn service_network_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_network_identifier(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.</p>
    pub fn set_service_network_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_service_network_identifier(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the association.</p>
    pub fn tags(mut self, k: impl Into<std::string::String>, v: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags for the association.</p>
    pub fn set_tags(mut self, input: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

