// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_targets::_list_targets_output::ListTargetsOutputBuilder;

pub use crate::operation::list_targets::_list_targets_input::ListTargetsInputBuilder;

/// Fluent builder constructing a request to `ListTargets`.
/// 
/// <p>Lists the targets for the target group. By default, all targets are included. You can use this API to check the health status of targets. You can also Ô¨Ålter the results by target. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTargetsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::list_targets::builders::ListTargetsInputBuilder,
}
impl ListTargetsFluentBuilder  {
    /// Creates a new `ListTargets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: Default::default(),
        }
    }
    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::list_targets::ListTargets, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::list_targets::ListTargetsError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::list_targets::ListTargetsOutput, aws_smithy_http::result::SdkError<crate::operation::list_targets::ListTargetsError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// Create a paginator for this request
                            ///
                            /// Paginators are used by calling [`send().await`](crate::operation::list_targets::paginator::ListTargetsPaginator::send) which returns a `Stream`.
                            pub fn into_paginator(self) -> crate::operation::list_targets::paginator::ListTargetsPaginator {
                                crate::operation::list_targets::paginator::ListTargetsPaginator::new(self.handle, self.inner)
                            }
    /// <p>The ID or Amazon Resource Name (ARN) of the target group.</p>
    pub fn target_group_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_group_identifier(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the target group.</p>
    pub fn set_target_group_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_group_identifier(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A pagination token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets to list.</p>
    pub fn targets(mut self, input: crate::types::Target) -> Self {
        self.inner = self.inner.targets(input);
        self
    }
    /// <p>The targets to list.</p>
    pub fn set_targets(mut self, input: std::option::Option<std::vec::Vec<crate::types::Target>>) -> Self {
        self.inner = self.inner.set_targets(input);
        self
    }
}

