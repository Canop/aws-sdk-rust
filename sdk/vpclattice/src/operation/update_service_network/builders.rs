// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_service_network::_update_service_network_output::UpdateServiceNetworkOutputBuilder;

pub use crate::operation::update_service_network::_update_service_network_input::UpdateServiceNetworkInputBuilder;

/// Fluent builder constructing a request to `UpdateServiceNetwork`.
/// 
/// <p>Updates the specified service network.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceNetworkFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_service_network::builders::UpdateServiceNetworkInputBuilder
            }
impl UpdateServiceNetworkFluentBuilder  {
    /// Creates a new `UpdateServiceNetwork`.
                    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
                        Self { handle, inner: Default::default() }
                    }
    
                    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_service_network::UpdateServiceNetwork, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_service_network::UpdateServiceNetworkError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_service_network::UpdateServiceNetworkOutput, aws_smithy_http::result::SdkError<crate::operation::update_service_network::UpdateServiceNetworkError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_network_identifier(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service network.</p>
    pub fn set_service_network_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_service_network_identifier(input);
        self
    }
    /// <p>The type of IAM policy.</p> 
    /// <ul> 
    /// <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> 
    /// <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> 
    /// </ul>
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.inner = self.inner.auth_type(input);
        self
    }
    /// <p>The type of IAM policy.</p> 
    /// <ul> 
    /// <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> 
    /// <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> 
    /// </ul>
    pub fn set_auth_type(mut self, input: std::option::Option<crate::types::AuthType>) -> Self {
        self.inner = self.inner.set_auth_type(input);
        self
    }
}

