// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about tasks and jobs queued on a device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceQueueInfo {
    /// <p>The name of the queue. </p>
    pub queue: ::std::option::Option<crate::types::QueueName>,
    /// <p>The number of jobs or tasks in the queue for a given device. </p>
    pub queue_size: ::std::option::Option<::std::string::String>,
    /// <p>Optional. Specifies the priority of the queue. Tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub queue_priority: ::std::option::Option<crate::types::QueuePriority>,
}
impl DeviceQueueInfo {
    /// <p>The name of the queue. </p>
    pub fn queue(&self) -> ::std::option::Option<&crate::types::QueueName> {
        self.queue.as_ref()
    }
    /// <p>The number of jobs or tasks in the queue for a given device. </p>
    pub fn queue_size(&self) -> ::std::option::Option<&str> {
        self.queue_size.as_deref()
    }
    /// <p>Optional. Specifies the priority of the queue. Tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn queue_priority(&self) -> ::std::option::Option<&crate::types::QueuePriority> {
        self.queue_priority.as_ref()
    }
}
impl DeviceQueueInfo {
    /// Creates a new builder-style object to manufacture [`DeviceQueueInfo`](crate::types::DeviceQueueInfo).
    pub fn builder() -> crate::types::builders::DeviceQueueInfoBuilder {
        crate::types::builders::DeviceQueueInfoBuilder::default()
    }
}

/// A builder for [`DeviceQueueInfo`](crate::types::DeviceQueueInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeviceQueueInfoBuilder {
    pub(crate) queue: ::std::option::Option<crate::types::QueueName>,
    pub(crate) queue_size: ::std::option::Option<::std::string::String>,
    pub(crate) queue_priority: ::std::option::Option<crate::types::QueuePriority>,
}
impl DeviceQueueInfoBuilder {
    /// <p>The name of the queue. </p>
    pub fn queue(mut self, input: crate::types::QueueName) -> Self {
        self.queue = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the queue. </p>
    pub fn set_queue(mut self, input: ::std::option::Option<crate::types::QueueName>) -> Self {
        self.queue = input;
        self
    }
    /// <p>The name of the queue. </p>
    pub fn get_queue(&self) -> &::std::option::Option<crate::types::QueueName> {
        &self.queue
    }
    /// <p>The number of jobs or tasks in the queue for a given device. </p>
    pub fn queue_size(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_size = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of jobs or tasks in the queue for a given device. </p>
    pub fn set_queue_size(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_size = input;
        self
    }
    /// <p>The number of jobs or tasks in the queue for a given device. </p>
    pub fn get_queue_size(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_size
    }
    /// <p>Optional. Specifies the priority of the queue. Tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn queue_priority(mut self, input: crate::types::QueuePriority) -> Self {
        self.queue_priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional. Specifies the priority of the queue. Tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn set_queue_priority(mut self, input: ::std::option::Option<crate::types::QueuePriority>) -> Self {
        self.queue_priority = input;
        self
    }
    /// <p>Optional. Specifies the priority of the queue. Tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn get_queue_priority(&self) -> &::std::option::Option<crate::types::QueuePriority> {
        &self.queue_priority
    }
    /// Consumes the builder and constructs a [`DeviceQueueInfo`](crate::types::DeviceQueueInfo).
    pub fn build(self) -> crate::types::DeviceQueueInfo {
        crate::types::DeviceQueueInfo {
            queue: self.queue,
            queue_size: self.queue_size,
            queue_priority: self.queue_priority,
        }
    }
}
