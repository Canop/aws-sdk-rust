// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_quantum_task_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_quantum_task::CreateQuantumTaskInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("action").string(input.action.as_str());
    }
    {
        object.key("clientToken").string(input.client_token.as_str());
    }
    {
        object.key("deviceArn").string(input.device_arn.as_str());
    }
    if let Some(var_1) = &input.device_parameters {
        object.key("deviceParameters").string(var_1.as_str());
    }
    if let Some(var_2) = &input.job_token {
        object.key("jobToken").string(var_2.as_str());
    }
    {
        object.key("outputS3Bucket").string(input.output_s3_bucket.as_str());
    }
    {
        object.key("outputS3KeyPrefix").string(input.output_s3_key_prefix.as_str());
    }
    {
        object.key("shots").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.shots).into()),
        );
    }
    if let Some(var_3) = &input.tags {
        #[allow(unused_mut)]
        let mut object_4 = object.key("tags").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    Ok(())
}
