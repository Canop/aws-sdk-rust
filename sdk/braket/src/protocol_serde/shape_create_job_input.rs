// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job::CreateJobInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.algorithm_specification {
        #[allow(unused_mut)]
        let mut object_2 = object.key("algorithmSpecification").start_object();
        crate::protocol_serde::shape_algorithm_specification::ser_algorithm_specification(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.checkpoint_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("checkpointConfig").start_object();
        crate::protocol_serde::shape_job_checkpoint_config::ser_job_checkpoint_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    {
        object.key("clientToken").string(input.client_token.as_str());
    }
    if let Some(var_5) = &input.device_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("deviceConfig").start_object();
        crate::protocol_serde::shape_device_config::ser_device_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_8 = object.key("hyperParameters").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.input_data_config {
        let mut array_12 = object.key("inputDataConfig").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_input_file_config::ser_input_file_config(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.instance_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("instanceConfig").start_object();
        crate::protocol_serde::shape_instance_config::ser_instance_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    {
        object.key("jobName").string(input.job_name.as_str());
    }
    if let Some(var_17) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_18 = object.key("outputDataConfig").start_object();
        crate::protocol_serde::shape_job_output_data_config::ser_job_output_data_config(&mut object_18, var_17)?;
        object_18.finish();
    }
    {
        object.key("roleArn").string(input.role_arn.as_str());
    }
    if let Some(var_19) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_20 = object.key("stoppingCondition").start_object();
        crate::protocol_serde::shape_job_stopping_condition::ser_job_stopping_condition(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.tags {
        #[allow(unused_mut)]
        let mut object_22 = object.key("tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    Ok(())
}
