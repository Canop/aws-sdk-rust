// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_accelerator_types::_describe_accelerator_types_output::DescribeAcceleratorTypesOutputBuilder;

pub use crate::operation::describe_accelerator_types::_describe_accelerator_types_input::DescribeAcceleratorTypesInputBuilder;

/// Fluent builder constructing a request to `DescribeAcceleratorTypes`.
///
/// <p> Describes the accelerator types available in a given region, as well as their characteristics, such as memory and throughput. </p>
/// <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAcceleratorTypesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::describe_accelerator_types::builders::DescribeAcceleratorTypesInputBuilder,
}
impl DescribeAcceleratorTypesFluentBuilder {
    /// Creates a new `DescribeAcceleratorTypes`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }
    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_accelerator_types::DescribeAcceleratorTypes,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_accelerator_types::DescribeAcceleratorTypesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_accelerator_types::DescribeAcceleratorTypesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_accelerator_types::DescribeAcceleratorTypesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
}
