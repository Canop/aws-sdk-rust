// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure of search criteria to be used to return contacts</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchCriteria {
    /// <p>The array of agent ids</p>
    pub agent_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The agent hierarchy groups</p>
    pub agent_hierarchy_groups: ::std::option::Option<crate::types::AgentHierarchyGroups>,
    /// <p>The array of channels</p>
    pub channels: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>,
    /// <p>The ContactAnalysis object used in search criteria</p>
    pub contact_analysis: ::std::option::Option<crate::types::ContactAnalysis>,
    /// <p>The array of initiaton methods</p>
    pub initiation_methods: ::std::option::Option<::std::vec::Vec<crate::types::ContactInitiationMethod>>,
    /// <p>The array of queue ids.</p>
    pub queue_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The SearchableContactAttributes object used in search criteria</p>
    pub searchable_contact_attributes: ::std::option::Option<crate::types::SearchableContactAttributes>,
}
impl SearchCriteria {
    /// <p>The array of agent ids</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_ids.is_none()`.
    pub fn agent_ids(&self) -> &[::std::string::String] {
        self.agent_ids.as_deref().unwrap_or_default()
    }
    /// <p>The agent hierarchy groups</p>
    pub fn agent_hierarchy_groups(&self) -> ::std::option::Option<&crate::types::AgentHierarchyGroups> {
        self.agent_hierarchy_groups.as_ref()
    }
    /// <p>The array of channels</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channels.is_none()`.
    pub fn channels(&self) -> &[crate::types::Channel] {
        self.channels.as_deref().unwrap_or_default()
    }
    /// <p>The ContactAnalysis object used in search criteria</p>
    pub fn contact_analysis(&self) -> ::std::option::Option<&crate::types::ContactAnalysis> {
        self.contact_analysis.as_ref()
    }
    /// <p>The array of initiaton methods</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.initiation_methods.is_none()`.
    pub fn initiation_methods(&self) -> &[crate::types::ContactInitiationMethod] {
        self.initiation_methods.as_deref().unwrap_or_default()
    }
    /// <p>The array of queue ids.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.queue_ids.is_none()`.
    pub fn queue_ids(&self) -> &[::std::string::String] {
        self.queue_ids.as_deref().unwrap_or_default()
    }
    /// <p>The SearchableContactAttributes object used in search criteria</p>
    pub fn searchable_contact_attributes(&self) -> ::std::option::Option<&crate::types::SearchableContactAttributes> {
        self.searchable_contact_attributes.as_ref()
    }
}
impl SearchCriteria {
    /// Creates a new builder-style object to manufacture [`SearchCriteria`](crate::types::SearchCriteria).
    pub fn builder() -> crate::types::builders::SearchCriteriaBuilder {
        crate::types::builders::SearchCriteriaBuilder::default()
    }
}

/// A builder for [`SearchCriteria`](crate::types::SearchCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchCriteriaBuilder {
    pub(crate) agent_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) agent_hierarchy_groups: ::std::option::Option<crate::types::AgentHierarchyGroups>,
    pub(crate) channels: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>,
    pub(crate) contact_analysis: ::std::option::Option<crate::types::ContactAnalysis>,
    pub(crate) initiation_methods: ::std::option::Option<::std::vec::Vec<crate::types::ContactInitiationMethod>>,
    pub(crate) queue_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) searchable_contact_attributes: ::std::option::Option<crate::types::SearchableContactAttributes>,
}
impl SearchCriteriaBuilder {
    /// Appends an item to `agent_ids`.
    ///
    /// To override the contents of this collection use [`set_agent_ids`](Self::set_agent_ids).
    ///
    /// <p>The array of agent ids</p>
    pub fn agent_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.agent_ids.unwrap_or_default();
        v.push(input.into());
        self.agent_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of agent ids</p>
    pub fn set_agent_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.agent_ids = input;
        self
    }
    /// <p>The array of agent ids</p>
    pub fn get_agent_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.agent_ids
    }
    /// <p>The agent hierarchy groups</p>
    pub fn agent_hierarchy_groups(mut self, input: crate::types::AgentHierarchyGroups) -> Self {
        self.agent_hierarchy_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>The agent hierarchy groups</p>
    pub fn set_agent_hierarchy_groups(mut self, input: ::std::option::Option<crate::types::AgentHierarchyGroups>) -> Self {
        self.agent_hierarchy_groups = input;
        self
    }
    /// <p>The agent hierarchy groups</p>
    pub fn get_agent_hierarchy_groups(&self) -> &::std::option::Option<crate::types::AgentHierarchyGroups> {
        &self.agent_hierarchy_groups
    }
    /// Appends an item to `channels`.
    ///
    /// To override the contents of this collection use [`set_channels`](Self::set_channels).
    ///
    /// <p>The array of channels</p>
    pub fn channels(mut self, input: crate::types::Channel) -> Self {
        let mut v = self.channels.unwrap_or_default();
        v.push(input);
        self.channels = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of channels</p>
    pub fn set_channels(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>) -> Self {
        self.channels = input;
        self
    }
    /// <p>The array of channels</p>
    pub fn get_channels(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Channel>> {
        &self.channels
    }
    /// <p>The ContactAnalysis object used in search criteria</p>
    pub fn contact_analysis(mut self, input: crate::types::ContactAnalysis) -> Self {
        self.contact_analysis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ContactAnalysis object used in search criteria</p>
    pub fn set_contact_analysis(mut self, input: ::std::option::Option<crate::types::ContactAnalysis>) -> Self {
        self.contact_analysis = input;
        self
    }
    /// <p>The ContactAnalysis object used in search criteria</p>
    pub fn get_contact_analysis(&self) -> &::std::option::Option<crate::types::ContactAnalysis> {
        &self.contact_analysis
    }
    /// Appends an item to `initiation_methods`.
    ///
    /// To override the contents of this collection use [`set_initiation_methods`](Self::set_initiation_methods).
    ///
    /// <p>The array of initiaton methods</p>
    pub fn initiation_methods(mut self, input: crate::types::ContactInitiationMethod) -> Self {
        let mut v = self.initiation_methods.unwrap_or_default();
        v.push(input);
        self.initiation_methods = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of initiaton methods</p>
    pub fn set_initiation_methods(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactInitiationMethod>>) -> Self {
        self.initiation_methods = input;
        self
    }
    /// <p>The array of initiaton methods</p>
    pub fn get_initiation_methods(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactInitiationMethod>> {
        &self.initiation_methods
    }
    /// Appends an item to `queue_ids`.
    ///
    /// To override the contents of this collection use [`set_queue_ids`](Self::set_queue_ids).
    ///
    /// <p>The array of queue ids.</p>
    pub fn queue_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.queue_ids.unwrap_or_default();
        v.push(input.into());
        self.queue_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of queue ids.</p>
    pub fn set_queue_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.queue_ids = input;
        self
    }
    /// <p>The array of queue ids.</p>
    pub fn get_queue_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.queue_ids
    }
    /// <p>The SearchableContactAttributes object used in search criteria</p>
    pub fn searchable_contact_attributes(mut self, input: crate::types::SearchableContactAttributes) -> Self {
        self.searchable_contact_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SearchableContactAttributes object used in search criteria</p>
    pub fn set_searchable_contact_attributes(mut self, input: ::std::option::Option<crate::types::SearchableContactAttributes>) -> Self {
        self.searchable_contact_attributes = input;
        self
    }
    /// <p>The SearchableContactAttributes object used in search criteria</p>
    pub fn get_searchable_contact_attributes(&self) -> &::std::option::Option<crate::types::SearchableContactAttributes> {
        &self.searchable_contact_attributes
    }
    /// Consumes the builder and constructs a [`SearchCriteria`](crate::types::SearchCriteria).
    pub fn build(self) -> crate::types::SearchCriteria {
        crate::types::SearchCriteria {
            agent_ids: self.agent_ids,
            agent_hierarchy_groups: self.agent_hierarchy_groups,
            channels: self.channels,
            contact_analysis: self.contact_analysis,
            initiation_methods: self.initiation_methods,
            queue_ids: self.queue_ids,
            searchable_contact_attributes: self.searchable_contact_attributes,
        }
    }
}
