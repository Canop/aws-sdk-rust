// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateView`](crate::operation::create_view::builders::CreateViewFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_id(impl Into<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::set_instance_id): <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::set_client_token): <p>A unique Id for each create view request to avoid duplicate view creation. For example, the view is idempotent ClientToken is provided.</p>
    ///   - [`status(ViewStatus)`](crate::operation::create_view::builders::CreateViewFluentBuilder::status) / [`set_status(Option<ViewStatus>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::set_status): <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    ///   - [`content(ViewInputContent)`](crate::operation::create_view::builders::CreateViewFluentBuilder::content) / [`set_content(Option<ViewInputContent>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::set_content): <p>View content containing all content necessary to render a view except for runtime input data.</p>  <p>The total uncompressed content has a maximum file size of 400kB.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::set_description): <p>The description of the view.</p>
    ///   - [`name(impl Into<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::set_name): <p>The name of the view.</p>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_view::builders::CreateViewFluentBuilder::set_tags): <p>The tags associated with the view resource (not specific to view version).These tags can be used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    /// - On success, responds with [`CreateViewOutput`](crate::operation::create_view::CreateViewOutput) with field(s):
    ///   - [`view(Option<View>)`](crate::operation::create_view::CreateViewOutput::view): <p>A view resource object. Contains metadata and content necessary to render the view.</p>
    /// - On failure, responds with [`SdkError<CreateViewError>`](crate::operation::create_view::CreateViewError)
    pub fn create_view(&self) -> crate::operation::create_view::builders::CreateViewFluentBuilder {
        crate::operation::create_view::builders::CreateViewFluentBuilder::new(self.handle.clone())
    }
}
