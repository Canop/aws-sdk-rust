// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSecurityProfileApplicationsOutput {
    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    /// <p>A list of the third party application's metadata.</p>
    pub applications: ::std::option::Option<::std::vec::Vec<crate::types::Application>>,
    /// <p>The token for the next set of results. The next set of results can be retrieved by using the token value returned in the previous response when making the next request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSecurityProfileApplicationsOutput {
    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    /// <p>A list of the third party application's metadata.</p>
    pub fn applications(&self) -> ::std::option::Option<&[crate::types::Application]> {
        self.applications.as_deref()
    }
    /// <p>The token for the next set of results. The next set of results can be retrieved by using the token value returned in the previous response when making the next request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListSecurityProfileApplicationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSecurityProfileApplicationsOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityProfileApplicationsOutput`](crate::operation::list_security_profile_applications::ListSecurityProfileApplicationsOutput).
    pub fn builder() -> crate::operation::list_security_profile_applications::builders::ListSecurityProfileApplicationsOutputBuilder {
        crate::operation::list_security_profile_applications::builders::ListSecurityProfileApplicationsOutputBuilder::default()
    }
}

/// A builder for [`ListSecurityProfileApplicationsOutput`](crate::operation::list_security_profile_applications::ListSecurityProfileApplicationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSecurityProfileApplicationsOutputBuilder {
    pub(crate) applications: ::std::option::Option<::std::vec::Vec<crate::types::Application>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSecurityProfileApplicationsOutputBuilder {
    /// Appends an item to `applications`.
    ///
    /// To override the contents of this collection use [`set_applications`](Self::set_applications).
    ///
    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    /// <p>A list of the third party application's metadata.</p>
    pub fn applications(mut self, input: crate::types::Application) -> Self {
        let mut v = self.applications.unwrap_or_default();
        v.push(input);
        self.applications = ::std::option::Option::Some(v);
        self
    }
    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    /// <p>A list of the third party application's metadata.</p>
    pub fn set_applications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Application>>) -> Self {
        self.applications = input;
        self
    }
    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    /// <p>A list of the third party application's metadata.</p>
    pub fn get_applications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Application>> {
        &self.applications
    }
    /// <p>The token for the next set of results. The next set of results can be retrieved by using the token value returned in the previous response when making the next request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. The next set of results can be retrieved by using the token value returned in the previous response when making the next request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. The next set of results can be retrieved by using the token value returned in the previous response when making the next request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSecurityProfileApplicationsOutput`](crate::operation::list_security_profile_applications::ListSecurityProfileApplicationsOutput).
    pub fn build(self) -> crate::operation::list_security_profile_applications::ListSecurityProfileApplicationsOutput {
        crate::operation::list_security_profile_applications::ListSecurityProfileApplicationsOutput {
            applications: self.applications,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
