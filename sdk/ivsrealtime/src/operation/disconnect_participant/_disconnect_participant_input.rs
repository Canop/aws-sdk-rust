// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisconnectParticipantInput  {
    /// <p>ARN of the stage to which the participant is attached.</p>
    #[doc(hidden)]
    pub stage_arn: std::option::Option<std::string::String>,
    /// <p>Identifier of the participant to be disconnected. This is returned by <code>CreateParticipantToken</code>.</p>
    #[doc(hidden)]
    pub participant_id: std::option::Option<std::string::String>,
    /// <p>Description of why this participant is being disconnected.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
}
impl DisconnectParticipantInput {
    /// <p>ARN of the stage to which the participant is attached.</p>
    pub fn stage_arn(&self) -> std::option::Option<& str> {
        self.stage_arn.as_deref()
    }
    /// <p>Identifier of the participant to be disconnected. This is returned by <code>CreateParticipantToken</code>.</p>
    pub fn participant_id(&self) -> std::option::Option<& str> {
        self.participant_id.as_deref()
    }
    /// <p>Description of why this participant is being disconnected.</p>
    pub fn reason(&self) -> std::option::Option<& str> {
        self.reason.as_deref()
    }
}
impl DisconnectParticipantInput {
    /// Creates a new builder-style object to manufacture [`DisconnectParticipantInput`](crate::operation::disconnect_participant::DisconnectParticipantInput).
    pub fn builder() -> crate::operation::disconnect_participant::builders::DisconnectParticipantInputBuilder {
        crate::operation::disconnect_participant::builders::DisconnectParticipantInputBuilder::default()
    }
}

/// A builder for [`DisconnectParticipantInput`](crate::operation::disconnect_participant::DisconnectParticipantInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisconnectParticipantInputBuilder {
    pub(crate) stage_arn: std::option::Option<std::string::String>,
    pub(crate) participant_id: std::option::Option<std::string::String>,
    pub(crate) reason: std::option::Option<std::string::String>,
}
impl DisconnectParticipantInputBuilder {
    /// <p>ARN of the stage to which the participant is attached.</p>
    pub fn stage_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_arn = Some(input.into());
        self
    }
    /// <p>ARN of the stage to which the participant is attached.</p>
    pub fn set_stage_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage_arn = input; self
    }
    /// <p>Identifier of the participant to be disconnected. This is returned by <code>CreateParticipantToken</code>.</p>
    pub fn participant_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.participant_id = Some(input.into());
        self
    }
    /// <p>Identifier of the participant to be disconnected. This is returned by <code>CreateParticipantToken</code>.</p>
    pub fn set_participant_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.participant_id = input; self
    }
    /// <p>Description of why this participant is being disconnected.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>Description of why this participant is being disconnected.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input; self
    }
    /// Consumes the builder and constructs a [`DisconnectParticipantInput`](crate::operation::disconnect_participant::DisconnectParticipantInput).
    pub fn build(self) -> Result<crate::operation::disconnect_participant::DisconnectParticipantInput, aws_smithy_http::operation::error::BuildError> {
        Ok(
            crate::operation::disconnect_participant::DisconnectParticipantInput {
                stage_arn: self.stage_arn
                ,
                participant_id: self.participant_id
                ,
                reason: self.reason
                ,
            }
        )
    }
}

