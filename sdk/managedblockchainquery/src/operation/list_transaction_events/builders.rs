// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_transaction_events::_list_transaction_events_output::ListTransactionEventsOutputBuilder;

pub use crate::operation::list_transaction_events::_list_transaction_events_input::ListTransactionEventsInputBuilder;

impl ListTransactionEventsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_transaction_events::ListTransactionEventsOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_transaction_events::ListTransactionEventsError,
            ::aws_smithy_http::operation::Response,
        >,
    > {
        let mut fluent_builder = client.list_transaction_events();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListTransactionEvents`.
///
/// <p>An array of <code>TransactionEvent</code> objects. Each object contains details about the transaction event.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListTransactionEventsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_transaction_events::builders::ListTransactionEventsInputBuilder,
}
impl ListTransactionEventsFluentBuilder {
    /// Creates a new `ListTransactionEvents`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn customize_middleware(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_transaction_events::ListTransactionEvents,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_transaction_events::ListTransactionEventsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn send_middleware(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_transaction_events::ListTransactionEventsOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_transaction_events::ListTransactionEventsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_transaction_events::ListTransactionEventsOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_transaction_events::ListTransactionEventsError,
        >,
    > {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_transaction_events::ListTransactionEvents,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_transaction_events::ListTransactionEventsError,
        >,
    > {
        self.customize_middleware().await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_transaction_events::paginator::ListTransactionEventsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_transaction_events::paginator::ListTransactionEventsPaginator {
        crate::operation::list_transaction_events::paginator::ListTransactionEventsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn transaction_hash(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.transaction_hash(input.into());
        self
    }
    /// <p>The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn set_transaction_hash(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_transaction_hash(input);
        self
    }
    /// <p>The blockchain network where the transaction events occurred.</p>
    pub fn network(mut self, input: crate::types::QueryNetwork) -> Self {
        self.inner = self.inner.network(input);
        self
    }
    /// <p>The blockchain network where the transaction events occurred.</p>
    pub fn set_network(mut self, input: ::std::option::Option<crate::types::QueryNetwork>) -> Self {
        self.inner = self.inner.set_network(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of transaction events to list.</p> <note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of transaction events to list.</p> <note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
