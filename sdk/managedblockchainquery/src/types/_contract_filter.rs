// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The contract or wallet address by which to filter the request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContractFilter {
    /// <p>The blockchain network of the contract.</p>
    pub network: ::std::option::Option<crate::types::QueryNetwork>,
    /// <p>The container for the token standard.</p>
    pub token_standard: ::std::option::Option<crate::types::QueryTokenStandard>,
    /// <p>The network address of the deployer.</p>
    pub deployer_address: ::std::option::Option<::std::string::String>,
}
impl ContractFilter {
    /// <p>The blockchain network of the contract.</p>
    pub fn network(&self) -> ::std::option::Option<&crate::types::QueryNetwork> {
        self.network.as_ref()
    }
    /// <p>The container for the token standard.</p>
    pub fn token_standard(&self) -> ::std::option::Option<&crate::types::QueryTokenStandard> {
        self.token_standard.as_ref()
    }
    /// <p>The network address of the deployer.</p>
    pub fn deployer_address(&self) -> ::std::option::Option<&str> {
        self.deployer_address.as_deref()
    }
}
impl ContractFilter {
    /// Creates a new builder-style object to manufacture [`ContractFilter`](crate::types::ContractFilter).
    pub fn builder() -> crate::types::builders::ContractFilterBuilder {
        crate::types::builders::ContractFilterBuilder::default()
    }
}

/// A builder for [`ContractFilter`](crate::types::ContractFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContractFilterBuilder {
    pub(crate) network: ::std::option::Option<crate::types::QueryNetwork>,
    pub(crate) token_standard: ::std::option::Option<crate::types::QueryTokenStandard>,
    pub(crate) deployer_address: ::std::option::Option<::std::string::String>,
}
impl ContractFilterBuilder {
    /// <p>The blockchain network of the contract.</p>
    pub fn network(mut self, input: crate::types::QueryNetwork) -> Self {
        self.network = ::std::option::Option::Some(input);
        self
    }
    /// <p>The blockchain network of the contract.</p>
    pub fn set_network(mut self, input: ::std::option::Option<crate::types::QueryNetwork>) -> Self {
        self.network = input;
        self
    }
    /// <p>The blockchain network of the contract.</p>
    pub fn get_network(&self) -> &::std::option::Option<crate::types::QueryNetwork> {
        &self.network
    }
    /// <p>The container for the token standard.</p>
    pub fn token_standard(mut self, input: crate::types::QueryTokenStandard) -> Self {
        self.token_standard = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the token standard.</p>
    pub fn set_token_standard(mut self, input: ::std::option::Option<crate::types::QueryTokenStandard>) -> Self {
        self.token_standard = input;
        self
    }
    /// <p>The container for the token standard.</p>
    pub fn get_token_standard(&self) -> &::std::option::Option<crate::types::QueryTokenStandard> {
        &self.token_standard
    }
    /// <p>The network address of the deployer.</p>
    pub fn deployer_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployer_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network address of the deployer.</p>
    pub fn set_deployer_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployer_address = input;
        self
    }
    /// <p>The network address of the deployer.</p>
    pub fn get_deployer_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployer_address
    }
    /// Consumes the builder and constructs a [`ContractFilter`](crate::types::ContractFilter).
    pub fn build(self) -> crate::types::ContractFilter {
        crate::types::ContractFilter {
            network: self.network,
            token_standard: self.token_standard,
            deployer_address: self.deployer_address,
        }
    }
}
