// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_by_attribute_value(
    object_4: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SearchByAttributeValue,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::types::SearchByAttributeValue::DicomPatientId(inner) => {
            object_4.key("DICOMPatientId").string(inner.as_str());
        }
        crate::types::SearchByAttributeValue::DicomAccessionNumber(inner) => {
            object_4.key("DICOMAccessionNumber").string(inner.as_str());
        }
        crate::types::SearchByAttributeValue::DicomStudyId(inner) => {
            object_4.key("DICOMStudyId").string(inner.as_str());
        }
        crate::types::SearchByAttributeValue::DicomStudyInstanceUid(inner) => {
            object_4.key("DICOMStudyInstanceUID").string(inner.as_str());
        }
        crate::types::SearchByAttributeValue::CreatedAt(inner) => {
            object_4
                .key("createdAt")
                .date_time(inner, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
        }
        crate::types::SearchByAttributeValue::DicomStudyDateAndTime(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_4.key("DICOMStudyDateAndTime").start_object();
            crate::protocol_serde::shape_dicom_study_date_and_time::ser_dicom_study_date_and_time(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::SearchByAttributeValue::Unknown => {
            return Err(::aws_smithy_http::operation::error::SerializationError::unknown_variant(
                "SearchByAttributeValue",
            ))
        }
    }
    Ok(())
}
