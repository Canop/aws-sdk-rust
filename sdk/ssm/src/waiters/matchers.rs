// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"Status","expected":"Pending","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_6f9158f9231e5d6f7(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Pending";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"InProgress","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_00bb09b3077ef8fe3(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "InProgress";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"Delayed","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_af4f0e62bb4e2df8e(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Delayed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"Success","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_1cbdfd792e1f604ca(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Success";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"Cancelled","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_c1220f1751678bdb8(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Cancelled";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"TimedOut","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_6566d5bc527202e21(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "TimedOut";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"Failed","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_74e589a66394e154b(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Failed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"Cancelling","comparator":"stringEquals"}}
pub(crate) fn match_get_command_invocation_f9ea517237b0ffd40(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_command_invocation::GetCommandInvocationOutput,
    ) -> ::std::option::Option<&'a crate::types::CommandInvocationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Cancelling";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"InvocationDoesNotExist"}
pub(crate) fn match_get_command_invocation_bbe7351a13d015aba(
    _result: ::std::result::Result<
        &crate::operation::get_command_invocation::GetCommandInvocationOutput,
        &crate::operation::get_command_invocation::GetCommandInvocationError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "InvocationDoesNotExist";
        }
    }
    false
}
