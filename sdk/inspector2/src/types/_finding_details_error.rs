// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an error encountered when trying to return vulnerability data for a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FindingDetailsError {
    /// <p>The finding ARN that returned an error.</p>
    pub finding_arn: ::std::option::Option<::std::string::String>,
    /// <p>The error code.</p>
    pub error_code: ::std::option::Option<crate::types::FindingDetailsErrorCode>,
    /// <p>The error message.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl FindingDetailsError {
    /// <p>The finding ARN that returned an error.</p>
    pub fn finding_arn(&self) -> ::std::option::Option<&str> {
        self.finding_arn.as_deref()
    }
    /// <p>The error code.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::FindingDetailsErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>The error message.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl FindingDetailsError {
    /// Creates a new builder-style object to manufacture [`FindingDetailsError`](crate::types::FindingDetailsError).
    pub fn builder() -> crate::types::builders::FindingDetailsErrorBuilder {
        crate::types::builders::FindingDetailsErrorBuilder::default()
    }
}

/// A builder for [`FindingDetailsError`](crate::types::FindingDetailsError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FindingDetailsErrorBuilder {
    pub(crate) finding_arn: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::FindingDetailsErrorCode>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl FindingDetailsErrorBuilder {
    /// <p>The finding ARN that returned an error.</p>
    pub fn finding_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The finding ARN that returned an error.</p>
    pub fn set_finding_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_arn = input;
        self
    }
    /// <p>The finding ARN that returned an error.</p>
    pub fn get_finding_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_arn
    }
    /// <p>The error code.</p>
    pub fn error_code(mut self, input: crate::types::FindingDetailsErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::FindingDetailsErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::FindingDetailsErrorCode> {
        &self.error_code
    }
    /// <p>The error message.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`FindingDetailsError`](crate::types::FindingDetailsError).
    pub fn build(self) -> crate::types::FindingDetailsError {
        crate::types::FindingDetailsError {
            finding_arn: self.finding_arn,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
