// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource map filter for a software bill of material report.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceMapFilter {
    /// <p>The filter's comparison.</p>
    #[doc(hidden)]
    pub comparison: ::std::option::Option<crate::types::ResourceMapComparison>,
    /// <p>The filter's key.</p>
    #[doc(hidden)]
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The filter's value.</p>
    #[doc(hidden)]
    pub value: ::std::option::Option<::std::string::String>,
}
impl ResourceMapFilter {
    /// <p>The filter's comparison.</p>
    pub fn comparison(&self) -> ::std::option::Option<&crate::types::ResourceMapComparison> {
        self.comparison.as_ref()
    }
    /// <p>The filter's key.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The filter's value.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ResourceMapFilter {
    /// Creates a new builder-style object to manufacture [`ResourceMapFilter`](crate::types::ResourceMapFilter).
    pub fn builder() -> crate::types::builders::ResourceMapFilterBuilder {
        crate::types::builders::ResourceMapFilterBuilder::default()
    }
}

/// A builder for [`ResourceMapFilter`](crate::types::ResourceMapFilter).
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
)]
pub struct ResourceMapFilterBuilder {
    pub(crate) comparison: ::std::option::Option<crate::types::ResourceMapComparison>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ResourceMapFilterBuilder {
    /// <p>The filter's comparison.</p>
    pub fn comparison(mut self, input: crate::types::ResourceMapComparison) -> Self {
        self.comparison = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter's comparison.</p>
    pub fn set_comparison(
        mut self,
        input: ::std::option::Option<crate::types::ResourceMapComparison>,
    ) -> Self {
        self.comparison = input;
        self
    }
    /// <p>The filter's key.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filter's key.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The filter's value.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filter's value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceMapFilter`](crate::types::ResourceMapFilter).
    pub fn build(self) -> crate::types::ResourceMapFilter {
        crate::types::ResourceMapFilter {
            comparison: self.comparison,
            key: self.key,
            value: self.value,
        }
    }
}
