// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_channel_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_channel::CreateChannelInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.filler_slate {
        #[allow(unused_mut)]
        let mut object_2 = object.key("FillerSlate").start_object();
        crate::protocol_serde::shape_slate_source::ser_slate_source(&mut object_2, var_1)?;
        object_2.finish();
    }
    {
        let mut array_3 = object.key("Outputs").start_array();
        for item_4 in &input.outputs {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_request_output_item::ser_request_output_item(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    {
        object.key("PlaybackMode").string(input.playback_mode.as_str());
    }
    if let Some(var_6) = &input.tags {
        #[allow(unused_mut)]
        let mut object_7 = object.key("tags").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.tier {
        object.key("Tier").string(var_10.as_str());
    }
    Ok(())
}
