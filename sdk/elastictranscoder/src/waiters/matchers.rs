// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"Job.Status","expected":"Complete","comparator":"stringEquals"}}
pub(crate) fn match_read_job_e9ad157648f804454(
    _result: ::std::result::Result<&crate::operation::read_job::ReadJobOutput, &crate::operation::read_job::ReadJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::read_job::ReadJobOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = _output.job.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Complete";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Job.Status","expected":"Canceled","comparator":"stringEquals"}}
pub(crate) fn match_read_job_777d5cd68417b7f62(
    _result: ::std::result::Result<&crate::operation::read_job::ReadJobOutput, &crate::operation::read_job::ReadJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::read_job::ReadJobOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = _output.job.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Canceled";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Job.Status","expected":"Error","comparator":"stringEquals"}}
pub(crate) fn match_read_job_aaf4764932a1f5572(
    _result: ::std::result::Result<&crate::operation::read_job::ReadJobOutput, &crate::operation::read_job::ReadJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::read_job::ReadJobOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = _output.job.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Error";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
