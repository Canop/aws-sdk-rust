// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job_template::CreateJobTemplateInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.abort_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("abortConfig").start_object();
        crate::protocol_serde::shape_abort_config::ser_abort_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.document {
        object.key("document").string(var_4.as_str());
    }
    if let Some(var_5) = &input.document_source {
        object.key("documentSource").string(var_5.as_str());
    }
    if let Some(var_6) = &input.job_arn {
        object.key("jobArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.job_executions_retry_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("jobExecutionsRetryConfig").start_object();
        crate::protocol_serde::shape_job_executions_retry_config::ser_job_executions_retry_config(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.job_executions_rollout_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::protocol_serde::shape_job_executions_rollout_config::ser_job_executions_rollout_config(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.maintenance_windows {
        let mut array_12 = object.key("maintenanceWindows").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_maintenance_window::ser_maintenance_window(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.presigned_url_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("presignedUrlConfig").start_object();
        crate::protocol_serde::shape_presigned_url_config::ser_presigned_url_config(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.tags {
        let mut array_18 = object.key("tags").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.timeout_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("timeoutConfig").start_object();
        crate::protocol_serde::shape_timeout_config::ser_timeout_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}
