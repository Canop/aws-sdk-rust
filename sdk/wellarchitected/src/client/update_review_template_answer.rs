// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateReviewTemplateAnswer`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`template_arn(impl Into<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::template_arn) / [`set_template_arn(Option<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_template_arn): <p>The review template ARN.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::lens_alias) / [`set_lens_alias(Option<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`question_id(impl Into<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::question_id) / [`set_question_id(Option<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_question_id): <p>The ID of the question.</p>
    ///   - [`selected_choices(impl Into<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::selected_choices) / [`set_selected_choices(Option<Vec<String>>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_selected_choices): <p>List of selected choice IDs in a question answer.</p>  <p>The values entered replace the previously selected choices.</p>
    ///   - [`choice_updates(impl Into<String>, ChoiceUpdate)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::choice_updates) / [`set_choice_updates(Option<HashMap<String, ChoiceUpdate>>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_choice_updates): <p>A list of choices to be updated.</p>
    ///   - [`notes(impl Into<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::notes) / [`set_notes(Option<String>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_notes): <p>The notes associated with the workload.</p>  <p>For a review template, these are the notes that will be associated with the workload when the template is applied.</p>
    ///   - [`is_applicable(bool)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::is_applicable) / [`set_is_applicable(Option<bool>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_is_applicable): <p>Defines whether this question is applicable to a lens review.</p>
    ///   - [`reason(AnswerReason)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::reason) / [`set_reason(Option<AnswerReason>)`](crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::set_reason): <p>The update reason.</p>
    /// - On success, responds with [`UpdateReviewTemplateAnswerOutput`](crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerOutput) with field(s):
    ///   - [`template_arn(Option<String>)`](crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerOutput::template_arn): <p>The review template ARN.</p>
    ///   - [`lens_alias(Option<String>)`](crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerOutput::lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`answer(Option<ReviewTemplateAnswer>)`](crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerOutput::answer): <p>An answer of the question.</p>
    /// - On failure, responds with [`SdkError<UpdateReviewTemplateAnswerError>`](crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError)
    pub fn update_review_template_answer(
        &self,
    ) -> crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder {
        crate::operation::update_review_template_answer::builders::UpdateReviewTemplateAnswerFluentBuilder::new(self.handle.clone())
    }
}
