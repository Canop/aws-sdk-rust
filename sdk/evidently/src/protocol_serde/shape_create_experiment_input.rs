// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_experiment_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_experiment::CreateExperimentInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    {
        let mut array_2 = object.key("metricGoals").start_array();
        for item_3 in &input.metric_goals {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_metric_goal_config::ser_metric_goal_config(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_5) = &input.online_ab_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("onlineAbConfig").start_object();
        crate::protocol_serde::shape_online_ab_config::ser_online_ab_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.randomization_salt {
        object.key("randomizationSalt").string(var_7.as_str());
    }
    if let Some(var_8) = &input.sampling_rate {
        object.key("samplingRate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.segment {
        object.key("segment").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    {
        let mut array_14 = object.key("treatments").start_array();
        for item_15 in &input.treatments {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_treatment_config::ser_treatment_config(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}
