// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutProjectEventsInput {
    /// <p>The name or ARN of the project to write the events to.</p>
    pub project: ::std::string::String,
    /// <p>An array of event structures that contain the performance data that is being sent to Evidently.</p>
    pub events: ::std::vec::Vec<crate::types::Event>,
}
impl PutProjectEventsInput {
    /// <p>The name or ARN of the project to write the events to.</p>
    pub fn project(&self) -> &str {
        use std::ops::Deref;
        self.project.deref()
    }
    /// <p>An array of event structures that contain the performance data that is being sent to Evidently.</p>
    pub fn events(&self) -> &[crate::types::Event] {
        use std::ops::Deref;
        self.events.deref()
    }
}
impl PutProjectEventsInput {
    /// Creates a new builder-style object to manufacture [`PutProjectEventsInput`](crate::operation::put_project_events::PutProjectEventsInput).
    pub fn builder() -> crate::operation::put_project_events::builders::PutProjectEventsInputBuilder {
        crate::operation::put_project_events::builders::PutProjectEventsInputBuilder::default()
    }
}

/// A builder for [`PutProjectEventsInput`](crate::operation::put_project_events::PutProjectEventsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutProjectEventsInputBuilder {
    pub(crate) project: ::std::option::Option<::std::string::String>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::Event>>,
}
impl PutProjectEventsInputBuilder {
    /// <p>The name or ARN of the project to write the events to.</p>
    /// This field is required.
    pub fn project(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the project to write the events to.</p>
    pub fn set_project(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The name or ARN of the project to write the events to.</p>
    pub fn get_project(&self) -> &::std::option::Option<::std::string::String> {
        &self.project
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>An array of event structures that contain the performance data that is being sent to Evidently.</p>
    pub fn events(mut self, input: crate::types::Event) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of event structures that contain the performance data that is being sent to Evidently.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Event>>) -> Self {
        self.events = input;
        self
    }
    /// <p>An array of event structures that contain the performance data that is being sent to Evidently.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Event>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`PutProjectEventsInput`](crate::operation::put_project_events::PutProjectEventsInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`project`](crate::operation::put_project_events::builders::PutProjectEventsInputBuilder::project)
    /// - [`events`](crate::operation::put_project_events::builders::PutProjectEventsInputBuilder::events)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_project_events::PutProjectEventsInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_project_events::PutProjectEventsInput {
            project: self.project.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "project",
                    "project was not specified but it is required when building PutProjectEventsInput",
                )
            })?,
            events: self.events.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "events",
                    "events was not specified but it is required when building PutProjectEventsInput",
                )
            })?,
        })
    }
}
