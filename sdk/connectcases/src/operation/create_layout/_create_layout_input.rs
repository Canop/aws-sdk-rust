// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateLayoutInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub domain_id: ::std::string::String,
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    pub name: ::std::string::String,
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    pub content: ::std::option::Option<crate::types::LayoutContent>,
}
impl CreateLayoutInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::LayoutContent> {
        self.content.as_ref()
    }
}
impl CreateLayoutInput {
    /// Creates a new builder-style object to manufacture [`CreateLayoutInput`](crate::operation::create_layout::CreateLayoutInput).
    pub fn builder() -> crate::operation::create_layout::builders::CreateLayoutInputBuilder {
        crate::operation::create_layout::builders::CreateLayoutInputBuilder::default()
    }
}

/// A builder for [`CreateLayoutInput`](crate::operation::create_layout::CreateLayoutInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateLayoutInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<crate::types::LayoutContent>,
}
impl CreateLayoutInputBuilder {
    /// <p>The unique identifier of the Cases domain. </p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the layout. It must be unique for the Cases domain.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::LayoutContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::LayoutContent>) -> Self {
        self.content = input;
        self
    }
    /// <p>Information about which fields will be present in the layout, and information about the order of the fields.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::LayoutContent> {
        &self.content
    }
    /// Consumes the builder and constructs a [`CreateLayoutInput`](crate::operation::create_layout::CreateLayoutInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::operation::create_layout::builders::CreateLayoutInputBuilder::domain_id)
    /// - [`name`](crate::operation::create_layout::builders::CreateLayoutInputBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::operation::create_layout::CreateLayoutInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_layout::CreateLayoutInput {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building CreateLayoutInput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CreateLayoutInput",
                )
            })?,
            content: self.content,
        })
    }
}
