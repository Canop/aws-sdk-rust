// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCaseInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub domain_id: ::std::string::String,
    /// <p>A unique identifier of the case.</p>
    pub case_id: ::std::string::String,
    /// <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
    pub fields: ::std::vec::Vec<crate::types::FieldValue>,
}
impl UpdateCaseInput {
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>A unique identifier of the case.</p>
    pub fn case_id(&self) -> &str {
        use std::ops::Deref;
        self.case_id.deref()
    }
    /// <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
    pub fn fields(&self) -> &[crate::types::FieldValue] {
        use std::ops::Deref;
        self.fields.deref()
    }
}
impl UpdateCaseInput {
    /// Creates a new builder-style object to manufacture [`UpdateCaseInput`](crate::operation::update_case::UpdateCaseInput).
    pub fn builder() -> crate::operation::update_case::builders::UpdateCaseInputBuilder {
        crate::operation::update_case::builders::UpdateCaseInputBuilder::default()
    }
}

/// A builder for [`UpdateCaseInput`](crate::operation::update_case::UpdateCaseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateCaseInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::FieldValue>>,
}
impl UpdateCaseInputBuilder {
    /// <p>The unique identifier of the Cases domain. </p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The unique identifier of the Cases domain. </p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>A unique identifier of the case.</p>
    /// This field is required.
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier of the case.</p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p>A unique identifier of the case.</p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
    pub fn fields(mut self, input: crate::types::FieldValue) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FieldValue>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FieldValue>> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`UpdateCaseInput`](crate::operation::update_case::UpdateCaseInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::operation::update_case::builders::UpdateCaseInputBuilder::domain_id)
    /// - [`case_id`](crate::operation::update_case::builders::UpdateCaseInputBuilder::case_id)
    /// - [`fields`](crate::operation::update_case::builders::UpdateCaseInputBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::operation::update_case::UpdateCaseInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_case::UpdateCaseInput {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building UpdateCaseInput",
                )
            })?,
            case_id: self.case_id.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "case_id",
                    "case_id was not specified but it is required when building UpdateCaseInput",
                )
            })?,
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building UpdateCaseInput",
                )
            })?,
        })
    }
}
