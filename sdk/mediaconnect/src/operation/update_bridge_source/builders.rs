// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_bridge_source::_update_bridge_source_output::UpdateBridgeSourceOutputBuilder;

pub use crate::operation::update_bridge_source::_update_bridge_source_input::UpdateBridgeSourceInputBuilder;

/// Fluent builder constructing a request to `UpdateBridgeSource`.
/// 
/// Updates an existing bridge source.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBridgeSourceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::update_bridge_source::builders::UpdateBridgeSourceInputBuilder,
}
impl UpdateBridgeSourceFluentBuilder  {
    /// Creates a new `UpdateBridgeSource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: Default::default(),
        }
    }
    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_bridge_source::UpdateBridgeSource, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_bridge_source::UpdateBridgeSourceError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_bridge_source::UpdateBridgeSourceOutput, aws_smithy_http::result::SdkError<crate::operation::update_bridge_source::UpdateBridgeSourceError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// The ARN of the bridge that you want to update.
    pub fn bridge_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bridge_arn(input.into());
        self
    }
    /// The ARN of the bridge that you want to update.
    pub fn set_bridge_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bridge_arn(input);
        self
    }
    /// Update the flow source of the bridge.
    pub fn flow_source(mut self, input: crate::types::UpdateBridgeFlowSourceRequest) -> Self {
        self.inner = self.inner.flow_source(input);
        self
    }
    /// Update the flow source of the bridge.
    pub fn set_flow_source(mut self, input: std::option::Option<crate::types::UpdateBridgeFlowSourceRequest>) -> Self {
        self.inner = self.inner.set_flow_source(input);
        self
    }
    /// Update the network source of the bridge.
    pub fn network_source(mut self, input: crate::types::UpdateBridgeNetworkSourceRequest) -> Self {
        self.inner = self.inner.network_source(input);
        self
    }
    /// Update the network source of the bridge.
    pub fn set_network_source(mut self, input: std::option::Option<crate::types::UpdateBridgeNetworkSourceRequest>) -> Self {
        self.inner = self.inner.set_network_source(input);
        self
    }
    /// The name of the source that you want to update.
    pub fn source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_name(input.into());
        self
    }
    /// The name of the source that you want to update.
    pub fn set_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_name(input);
        self
    }
}

