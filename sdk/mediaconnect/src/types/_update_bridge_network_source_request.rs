// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Update the network source of the bridge.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBridgeNetworkSourceRequest  {
    /// The network source multicast IP.
    #[doc(hidden)]
    pub multicast_ip: std::option::Option<std::string::String>,
    /// The network source's gateway network name.
    #[doc(hidden)]
    pub network_name: std::option::Option<std::string::String>,
    /// The network source port.
    #[doc(hidden)]
    pub port: i32,
    /// The network source protocol.
    #[doc(hidden)]
    pub protocol: std::option::Option<crate::types::Protocol>,
}
impl UpdateBridgeNetworkSourceRequest {
    /// The network source multicast IP.
    pub fn multicast_ip(&self) -> std::option::Option<& str> {
        self.multicast_ip.as_deref()
    }
    /// The network source's gateway network name.
    pub fn network_name(&self) -> std::option::Option<& str> {
        self.network_name.as_deref()
    }
    /// The network source port.
    pub fn port(&self) -> i32 {
        self.port
    }
    /// The network source protocol.
    pub fn protocol(&self) -> std::option::Option<& crate::types::Protocol> {
        self.protocol.as_ref()
    }
}
impl UpdateBridgeNetworkSourceRequest {
    /// Creates a new builder-style object to manufacture [`UpdateBridgeNetworkSourceRequest`](crate::types::UpdateBridgeNetworkSourceRequest).
    pub fn builder() -> crate::types::builders::UpdateBridgeNetworkSourceRequestBuilder {
        crate::types::builders::UpdateBridgeNetworkSourceRequestBuilder::default()
    }
}

/// A builder for [`UpdateBridgeNetworkSourceRequest`](crate::types::UpdateBridgeNetworkSourceRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBridgeNetworkSourceRequestBuilder {
    pub(crate) multicast_ip: std::option::Option<std::string::String>,
    pub(crate) network_name: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) protocol: std::option::Option<crate::types::Protocol>,
}
impl UpdateBridgeNetworkSourceRequestBuilder {
    /// The network source multicast IP.
    pub fn multicast_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.multicast_ip = Some(input.into());
        self
    }
    /// The network source multicast IP.
    pub fn set_multicast_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.multicast_ip = input; self
    }
    /// The network source's gateway network name.
    pub fn network_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_name = Some(input.into());
        self
    }
    /// The network source's gateway network name.
    pub fn set_network_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_name = input; self
    }
    /// The network source port.
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// The network source port.
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input; self
    }
    /// The network source protocol.
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.protocol = Some(input);
        self
    }
    /// The network source protocol.
    pub fn set_protocol(mut self, input: std::option::Option<crate::types::Protocol>) -> Self {
        self.protocol = input; self
    }
    /// Consumes the builder and constructs a [`UpdateBridgeNetworkSourceRequest`](crate::types::UpdateBridgeNetworkSourceRequest).
    pub fn build(self) -> crate::types::UpdateBridgeNetworkSourceRequest {
        crate::types::UpdateBridgeNetworkSourceRequest {
            multicast_ip: self.multicast_ip
            ,
            network_name: self.network_name
            ,
            port: self.port
                .unwrap_or_default()
            ,
            protocol: self.protocol
            ,
        }
    }
}

