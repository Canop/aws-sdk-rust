// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"launchProfile.state","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_launch_profile_387e0e8f7a620d8cd(
    _result: ::std::result::Result<
        &crate::operation::get_launch_profile::GetLaunchProfileOutput,
        &crate::operation::get_launch_profile::GetLaunchProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_launch_profile::GetLaunchProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::LaunchProfileState> {
        let _fld_1 = _output.launch_profile.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"launchProfile.state","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_launch_profile_fb81e9a4d36ff5d6d(
    _result: ::std::result::Result<
        &crate::operation::get_launch_profile::GetLaunchProfileOutput,
        &crate::operation::get_launch_profile::GetLaunchProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_launch_profile::GetLaunchProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::LaunchProfileState> {
        let _fld_1 = _output.launch_profile.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"launchProfile.state","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_launch_profile_f6afcfb2fd1b2cad8(
    _result: ::std::result::Result<
        &crate::operation::get_launch_profile::GetLaunchProfileOutput,
        &crate::operation::get_launch_profile::GetLaunchProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_launch_profile::GetLaunchProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::LaunchProfileState> {
        let _fld_1 = _output.launch_profile.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"launchProfile.state","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_launch_profile_04baa1a2414e3aff8(
    _result: ::std::result::Result<
        &crate::operation::get_launch_profile::GetLaunchProfileOutput,
        &crate::operation::get_launch_profile::GetLaunchProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_launch_profile::GetLaunchProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::LaunchProfileState> {
        let _fld_1 = _output.launch_profile.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"launchProfile.state","expected":"UPDATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_launch_profile_33bf75240fbf84d59(
    _result: ::std::result::Result<
        &crate::operation::get_launch_profile::GetLaunchProfileOutput,
        &crate::operation::get_launch_profile::GetLaunchProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_launch_profile::GetLaunchProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::LaunchProfileState> {
        let _fld_1 = _output.launch_profile.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"streamingImage.state","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_image_314576483f1e0a23c(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_image::GetStreamingImageOutput,
        &crate::operation::get_streaming_image::GetStreamingImageError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_image::GetStreamingImageOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingImageState> {
        let _fld_1 = _output.streaming_image.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"streamingImage.state","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_image_9d02866b7ff4d683c(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_image::GetStreamingImageOutput,
        &crate::operation::get_streaming_image::GetStreamingImageError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_image::GetStreamingImageOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingImageState> {
        let _fld_1 = _output.streaming_image.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"streamingImage.state","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_image_de1c8e1c3fac3c55c(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_image::GetStreamingImageOutput,
        &crate::operation::get_streaming_image::GetStreamingImageError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_image::GetStreamingImageOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingImageState> {
        let _fld_1 = _output.streaming_image.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"streamingImage.state","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_image_58b93d69a1b261842(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_image::GetStreamingImageOutput,
        &crate::operation::get_streaming_image::GetStreamingImageError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_image::GetStreamingImageOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingImageState> {
        let _fld_1 = _output.streaming_image.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"streamingImage.state","expected":"UPDATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_image_a7120a2451d302407(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_image::GetStreamingImageOutput,
        &crate::operation::get_streaming_image::GetStreamingImageError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_image::GetStreamingImageOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingImageState> {
        let _fld_1 = _output.streaming_image.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"session.state","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_4d7649586e18e2bed(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session::GetStreamingSessionOutput,
        &crate::operation::get_streaming_session::GetStreamingSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session::GetStreamingSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionState> {
        let _fld_1 = _output.session.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"session.state","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_21aa00835ec4f2feb(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session::GetStreamingSessionOutput,
        &crate::operation::get_streaming_session::GetStreamingSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session::GetStreamingSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionState> {
        let _fld_1 = _output.session.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"session.state","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_ab9ebdbcadc92e91f(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session::GetStreamingSessionOutput,
        &crate::operation::get_streaming_session::GetStreamingSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session::GetStreamingSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionState> {
        let _fld_1 = _output.session.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"session.state","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_687a296a4a0cb0b4a(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session::GetStreamingSessionOutput,
        &crate::operation::get_streaming_session::GetStreamingSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session::GetStreamingSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionState> {
        let _fld_1 = _output.session.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"session.state","expected":"START_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_248a3ed1f95e971e6(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session::GetStreamingSessionOutput,
        &crate::operation::get_streaming_session::GetStreamingSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session::GetStreamingSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionState> {
        let _fld_1 = _output.session.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "START_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"session.state","expected":"STOPPED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_c38ab707109e06d78(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session::GetStreamingSessionOutput,
        &crate::operation::get_streaming_session::GetStreamingSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session::GetStreamingSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionState> {
        let _fld_1 = _output.session.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STOPPED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"session.state","expected":"STOP_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_4f86ead2c8e1bf274(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session::GetStreamingSessionOutput,
        &crate::operation::get_streaming_session::GetStreamingSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session::GetStreamingSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionState> {
        let _fld_1 = _output.session.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STOP_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"stream.state","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_stream_3fdd4afb5cc3a064e(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session_stream::GetStreamingSessionStreamOutput,
        &crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session_stream::GetStreamingSessionStreamOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionStreamState> {
        let _fld_1 = _output.stream.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"stream.state","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_streaming_session_stream_b8daba560f384e46f(
    _result: ::std::result::Result<
        &crate::operation::get_streaming_session_stream::GetStreamingSessionStreamOutput,
        &crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_streaming_session_stream::GetStreamingSessionStreamOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamingSessionStreamState> {
        let _fld_1 = _output.stream.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studioComponent.state","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_component_afd164738e7259d3b(
    _result: ::std::result::Result<
        &crate::operation::get_studio_component::GetStudioComponentOutput,
        &crate::operation::get_studio_component::GetStudioComponentError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_studio_component::GetStudioComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::StudioComponentState> {
        let _fld_1 = _output.studio_component.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studioComponent.state","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_component_f1147a6428ea64247(
    _result: ::std::result::Result<
        &crate::operation::get_studio_component::GetStudioComponentOutput,
        &crate::operation::get_studio_component::GetStudioComponentError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_studio_component::GetStudioComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::StudioComponentState> {
        let _fld_1 = _output.studio_component.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studioComponent.state","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_component_bfac6f0a77b756f14(
    _result: ::std::result::Result<
        &crate::operation::get_studio_component::GetStudioComponentOutput,
        &crate::operation::get_studio_component::GetStudioComponentError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_studio_component::GetStudioComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::StudioComponentState> {
        let _fld_1 = _output.studio_component.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studioComponent.state","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_component_6c2afff1c4c66c9ba(
    _result: ::std::result::Result<
        &crate::operation::get_studio_component::GetStudioComponentOutput,
        &crate::operation::get_studio_component::GetStudioComponentError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_studio_component::GetStudioComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::StudioComponentState> {
        let _fld_1 = _output.studio_component.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studioComponent.state","expected":"UPDATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_component_d9266f2b82a19f1e1(
    _result: ::std::result::Result<
        &crate::operation::get_studio_component::GetStudioComponentOutput,
        &crate::operation::get_studio_component::GetStudioComponentError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_studio_component::GetStudioComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::StudioComponentState> {
        let _fld_1 = _output.studio_component.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studio.state","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_e9e8cb730200e1021(
    _result: ::std::result::Result<&crate::operation::get_studio::GetStudioOutput, &crate::operation::get_studio::GetStudioError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_studio::GetStudioOutput) -> ::std::option::Option<&'a crate::types::StudioState> {
        let _fld_1 = _output.studio.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studio.state","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_d2475a3d5adebde95(
    _result: ::std::result::Result<&crate::operation::get_studio::GetStudioOutput, &crate::operation::get_studio::GetStudioError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_studio::GetStudioOutput) -> ::std::option::Option<&'a crate::types::StudioState> {
        let _fld_1 = _output.studio.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studio.state","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_75651031d39892c76(
    _result: ::std::result::Result<&crate::operation::get_studio::GetStudioOutput, &crate::operation::get_studio::GetStudioError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_studio::GetStudioOutput) -> ::std::option::Option<&'a crate::types::StudioState> {
        let _fld_1 = _output.studio.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studio.state","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_bbc14946e8f7fb363(
    _result: ::std::result::Result<&crate::operation::get_studio::GetStudioOutput, &crate::operation::get_studio::GetStudioError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_studio::GetStudioOutput) -> ::std::option::Option<&'a crate::types::StudioState> {
        let _fld_1 = _output.studio.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"studio.state","expected":"UPDATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_studio_4ba80a2ebf4df9a15(
    _result: ::std::result::Result<&crate::operation::get_studio::GetStudioOutput, &crate::operation::get_studio::GetStudioError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_studio::GetStudioOutput) -> ::std::option::Option<&'a crate::types::StudioState> {
        let _fld_1 = _output.studio.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
