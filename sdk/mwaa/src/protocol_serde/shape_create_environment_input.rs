// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_environment_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_environment::CreateEnvironmentInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.airflow_configuration_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AirflowConfigurationOptions").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.airflow_version {
        object.key("AirflowVersion").string(var_5.as_str());
    }
    {
        object.key("DagS3Path").string(input.dag_s3_path.as_str());
    }
    if let Some(var_6) = &input.environment_class {
        object.key("EnvironmentClass").string(var_6.as_str());
    }
    {
        object.key("ExecutionRoleArn").string(input.execution_role_arn.as_str());
    }
    if let Some(var_7) = &input.kms_key {
        object.key("KmsKey").string(var_7.as_str());
    }
    if let Some(var_8) = &input.logging_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("LoggingConfiguration").start_object();
        crate::protocol_serde::shape_logging_configuration_input::ser_logging_configuration_input(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.max_workers {
        object.key("MaxWorkers").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.min_workers {
        object.key("MinWorkers").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("NetworkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.plugins_s3_object_version {
        object.key("PluginsS3ObjectVersion").string(var_14.as_str());
    }
    if let Some(var_15) = &input.plugins_s3_path {
        object.key("PluginsS3Path").string(var_15.as_str());
    }
    if let Some(var_16) = &input.requirements_s3_object_version {
        object.key("RequirementsS3ObjectVersion").string(var_16.as_str());
    }
    if let Some(var_17) = &input.requirements_s3_path {
        object.key("RequirementsS3Path").string(var_17.as_str());
    }
    if let Some(var_18) = &input.schedulers {
        object.key("Schedulers").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    {
        object.key("SourceBucketArn").string(input.source_bucket_arn.as_str());
    }
    if let Some(var_19) = &input.startup_script_s3_object_version {
        object.key("StartupScriptS3ObjectVersion").string(var_19.as_str());
    }
    if let Some(var_20) = &input.startup_script_s3_path {
        object.key("StartupScriptS3Path").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tags {
        #[allow(unused_mut)]
        let mut object_22 = object.key("Tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    if let Some(var_25) = &input.webserver_access_mode {
        object.key("WebserverAccessMode").string(var_25.as_str());
    }
    if let Some(var_26) = &input.weekly_maintenance_window_start {
        object.key("WeeklyMaintenanceWindowStart").string(var_26.as_str());
    }
    Ok(())
}
