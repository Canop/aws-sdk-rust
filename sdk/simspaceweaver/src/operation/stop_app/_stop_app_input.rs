// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopAppInput {
    /// <p>The name of the simulation of the app.</p>
    pub simulation: ::std::string::String,
    /// <p>The name of the domain of the app.</p>
    pub domain: ::std::string::String,
    /// <p>The name of the app.</p>
    pub app: ::std::string::String,
}
impl StopAppInput {
    /// <p>The name of the simulation of the app.</p>
    pub fn simulation(&self) -> &str {
        use std::ops::Deref;
        self.simulation.deref()
    }
    /// <p>The name of the domain of the app.</p>
    pub fn domain(&self) -> &str {
        use std::ops::Deref;
        self.domain.deref()
    }
    /// <p>The name of the app.</p>
    pub fn app(&self) -> &str {
        use std::ops::Deref;
        self.app.deref()
    }
}
impl StopAppInput {
    /// Creates a new builder-style object to manufacture [`StopAppInput`](crate::operation::stop_app::StopAppInput).
    pub fn builder() -> crate::operation::stop_app::builders::StopAppInputBuilder {
        crate::operation::stop_app::builders::StopAppInputBuilder::default()
    }
}

/// A builder for [`StopAppInput`](crate::operation::stop_app::StopAppInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StopAppInputBuilder {
    pub(crate) simulation: ::std::option::Option<::std::string::String>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) app: ::std::option::Option<::std::string::String>,
}
impl StopAppInputBuilder {
    /// <p>The name of the simulation of the app.</p>
    /// This field is required.
    pub fn simulation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.simulation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn set_simulation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.simulation = input;
        self
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn get_simulation(&self) -> &::std::option::Option<::std::string::String> {
        &self.simulation
    }
    /// <p>The name of the domain of the app.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain of the app.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain of the app.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The name of the app.</p>
    /// This field is required.
    pub fn app(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app = input;
        self
    }
    /// <p>The name of the app.</p>
    pub fn get_app(&self) -> &::std::option::Option<::std::string::String> {
        &self.app
    }
    /// Consumes the builder and constructs a [`StopAppInput`](crate::operation::stop_app::StopAppInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`simulation`](crate::operation::stop_app::builders::StopAppInputBuilder::simulation)
    /// - [`domain`](crate::operation::stop_app::builders::StopAppInputBuilder::domain)
    /// - [`app`](crate::operation::stop_app::builders::StopAppInputBuilder::app)
    pub fn build(self) -> ::std::result::Result<crate::operation::stop_app::StopAppInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::stop_app::StopAppInput {
            simulation: self.simulation.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "simulation",
                    "simulation was not specified but it is required when building StopAppInput",
                )
            })?,
            domain: self.domain.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "domain",
                    "domain was not specified but it is required when building StopAppInput",
                )
            })?,
            app: self.app.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "app",
                    "app was not specified but it is required when building StopAppInput",
                )
            })?,
        })
    }
}
