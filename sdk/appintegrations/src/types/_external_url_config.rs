// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The external URL source for the application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalUrlConfig {
    /// <p>The URL to access the application.</p>
    pub access_url: ::std::option::Option<::std::string::String>,
    /// <p>Additional URLs to allow list if different than the access URL.</p>
    pub approved_origins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ExternalUrlConfig {
    /// <p>The URL to access the application.</p>
    pub fn access_url(&self) -> ::std::option::Option<&str> {
        self.access_url.as_deref()
    }
    /// <p>Additional URLs to allow list if different than the access URL.</p>
    pub fn approved_origins(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.approved_origins.as_deref()
    }
}
impl ExternalUrlConfig {
    /// Creates a new builder-style object to manufacture [`ExternalUrlConfig`](crate::types::ExternalUrlConfig).
    pub fn builder() -> crate::types::builders::ExternalUrlConfigBuilder {
        crate::types::builders::ExternalUrlConfigBuilder::default()
    }
}

/// A builder for [`ExternalUrlConfig`](crate::types::ExternalUrlConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExternalUrlConfigBuilder {
    pub(crate) access_url: ::std::option::Option<::std::string::String>,
    pub(crate) approved_origins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ExternalUrlConfigBuilder {
    /// <p>The URL to access the application.</p>
    pub fn access_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to access the application.</p>
    pub fn set_access_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_url = input;
        self
    }
    /// <p>The URL to access the application.</p>
    pub fn get_access_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_url
    }
    /// Appends an item to `approved_origins`.
    ///
    /// To override the contents of this collection use [`set_approved_origins`](Self::set_approved_origins).
    ///
    /// <p>Additional URLs to allow list if different than the access URL.</p>
    pub fn approved_origins(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.approved_origins.unwrap_or_default();
        v.push(input.into());
        self.approved_origins = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional URLs to allow list if different than the access URL.</p>
    pub fn set_approved_origins(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.approved_origins = input;
        self
    }
    /// <p>Additional URLs to allow list if different than the access URL.</p>
    pub fn get_approved_origins(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.approved_origins
    }
    /// Consumes the builder and constructs a [`ExternalUrlConfig`](crate::types::ExternalUrlConfig).
    pub fn build(self) -> crate::types::ExternalUrlConfig {
        crate::types::ExternalUrlConfig {
            access_url: self.access_url,
            approved_origins: self.approved_origins,
        }
    }
}
