// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of an event that the application subscribes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Subscription {
    /// <p>The name of the subscription.</p>
    pub event: ::std::option::Option<::std::string::String>,
    /// <p>The description of the subscription.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl Subscription {
    /// <p>The name of the subscription.</p>
    pub fn event(&self) -> ::std::option::Option<&str> {
        self.event.as_deref()
    }
    /// <p>The description of the subscription.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl Subscription {
    /// Creates a new builder-style object to manufacture [`Subscription`](crate::types::Subscription).
    pub fn builder() -> crate::types::builders::SubscriptionBuilder {
        crate::types::builders::SubscriptionBuilder::default()
    }
}

/// A builder for [`Subscription`](crate::types::Subscription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubscriptionBuilder {
    pub(crate) event: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl SubscriptionBuilder {
    /// <p>The name of the subscription.</p>
    pub fn event(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the subscription.</p>
    pub fn set_event(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event = input;
        self
    }
    /// <p>The name of the subscription.</p>
    pub fn get_event(&self) -> &::std::option::Option<::std::string::String> {
        &self.event
    }
    /// <p>The description of the subscription.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the subscription.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the subscription.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`Subscription`](crate::types::Subscription).
    pub fn build(self) -> crate::types::Subscription {
        crate::types::Subscription {
            event: self.event,
            description: self.description,
        }
    }
}
