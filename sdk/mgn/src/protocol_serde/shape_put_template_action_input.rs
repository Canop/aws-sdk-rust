// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_template_action_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_template_action::PutTemplateActionInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("actionID").string(input.action_id.as_str());
    }
    {
        object.key("actionName").string(input.action_name.as_str());
    }
    if let Some(var_1) = &input.active {
        object.key("active").boolean(*var_1);
    }
    if let Some(var_2) = &input.category {
        object.key("category").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    {
        object.key("documentIdentifier").string(input.document_identifier.as_str());
    }
    if let Some(var_4) = &input.document_version {
        object.key("documentVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.external_parameters {
        #[allow(unused_mut)]
        let mut object_6 = object.key("externalParameters").start_object();
        for (key_7, value_8) in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_9 = object_6.key(key_7.as_str()).start_object();
                crate::protocol_serde::shape_ssm_external_parameter::ser_ssm_external_parameter(&mut object_9, value_8)?;
                object_9.finish();
            }
        }
        object_6.finish();
    }
    {
        object
            .key("launchConfigurationTemplateID")
            .string(input.launch_configuration_template_id.as_str());
    }
    if let Some(var_10) = &input.must_succeed_for_cutover {
        object.key("mustSucceedForCutover").boolean(*var_10);
    }
    if let Some(var_11) = &input.operating_system {
        object.key("operatingSystem").string(var_11.as_str());
    }
    {
        object.key("order").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.order).into()),
        );
    }
    if let Some(var_12) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_13 = object.key("parameters").start_object();
        for (key_14, value_15) in var_12 {
            {
                let mut array_16 = object_13.key(key_14.as_str()).start_array();
                for item_17 in value_15 {
                    {
                        #[allow(unused_mut)]
                        let mut object_18 = array_16.value().start_object();
                        crate::protocol_serde::shape_ssm_parameter_store_parameter::ser_ssm_parameter_store_parameter(&mut object_18, item_17)?;
                        object_18.finish();
                    }
                }
                array_16.finish();
            }
        }
        object_13.finish();
    }
    if input.timeout_seconds != 0 {
        object.key("timeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.timeout_seconds).into()),
        );
    }
    Ok(())
}
