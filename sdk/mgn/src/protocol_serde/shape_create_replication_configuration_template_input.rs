// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_replication_configuration_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object
            .key("associateDefaultSecurityGroup")
            .boolean(input.associate_default_security_group);
    }
    {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    {
        object.key("createPublicIP").boolean(input.create_public_ip);
    }
    {
        object.key("dataPlaneRouting").string(input.data_plane_routing.as_str());
    }
    {
        object
            .key("defaultLargeStagingDiskType")
            .string(input.default_large_staging_disk_type.as_str());
    }
    {
        object.key("ebsEncryption").string(input.ebs_encryption.as_str());
    }
    if let Some(var_1) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_1.as_str());
    }
    {
        object
            .key("replicationServerInstanceType")
            .string(input.replication_server_instance_type.as_str());
    }
    {
        let mut array_2 = object.key("replicationServersSecurityGroupsIDs").start_array();
        for item_3 in &input.replication_servers_security_groups_i_ds {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    {
        object.key("stagingAreaSubnetId").string(input.staging_area_subnet_id.as_str());
    }
    {
        #[allow(unused_mut)]
        let mut object_4 = object.key("stagingAreaTags").start_object();
        for (key_5, value_6) in &input.staging_area_tags {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    {
        object
            .key("useDedicatedReplicationServer")
            .boolean(input.use_dedicated_replication_server);
    }
    if let Some(var_11) = &input.use_fips_endpoint {
        object.key("useFipsEndpoint").boolean(*var_11);
    }
    Ok(())
}
