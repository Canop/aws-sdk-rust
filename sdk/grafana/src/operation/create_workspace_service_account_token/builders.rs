// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_workspace_service_account_token::_create_workspace_service_account_token_output::CreateWorkspaceServiceAccountTokenOutputBuilder;

pub use crate::operation::create_workspace_service_account_token::_create_workspace_service_account_token_input::CreateWorkspaceServiceAccountTokenInputBuilder;

impl crate::operation::create_workspace_service_account_token::builders::CreateWorkspaceServiceAccountTokenInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_workspace_service_account_token();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateWorkspaceServiceAccountToken`.
///
/// <p>Creates a token that can be used to authenticate and authorize Grafana HTTP API operations for the given <a href="https://docs.aws.amazon.com/grafana/latest/userguide/service-accounts.html">workspace service account</a>. The service account acts as a user for the API operations, and defines the permissions that are used by the API.</p><important>
/// <p>When you create the service account token, you will receive a key that is used when calling Grafana APIs. Do not lose this key, as it will not be retrievable again.</p>
/// <p>If you do lose the key, you can delete the token and recreate it to receive a new key. This will disable the initial key.</p>
/// </important>
/// <p>Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateWorkspaceServiceAccountTokenFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_workspace_service_account_token::builders::CreateWorkspaceServiceAccountTokenInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenOutput,
        crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenError,
    > for CreateWorkspaceServiceAccountTokenFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenOutput,
            crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateWorkspaceServiceAccountTokenFluentBuilder {
    /// Creates a new `CreateWorkspaceServiceAccountTokenFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateWorkspaceServiceAccountToken as a reference.
    pub fn as_input(&self) -> &crate::operation::create_workspace_service_account_token::builders::CreateWorkspaceServiceAccountTokenInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountToken::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountToken::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenOutput,
        crate::operation::create_workspace_service_account_token::CreateWorkspaceServiceAccountTokenError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A name for the token to create.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the token to create.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A name for the token to create.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.</p>
    pub fn seconds_to_live(mut self, input: i32) -> Self {
        self.inner = self.inner.seconds_to_live(input);
        self
    }
    /// <p>Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.</p>
    pub fn set_seconds_to_live(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_seconds_to_live(input);
        self
    }
    /// <p>Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.</p>
    pub fn get_seconds_to_live(&self) -> &::std::option::Option<i32> {
        self.inner.get_seconds_to_live()
    }
    /// <p>The ID of the service account for which to create a token.</p>
    pub fn service_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_account_id(input.into());
        self
    }
    /// <p>The ID of the service account for which to create a token.</p>
    pub fn set_service_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_account_id(input);
        self
    }
    /// <p>The ID of the service account for which to create a token.</p>
    pub fn get_service_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_account_id()
    }
    /// <p>The ID of the workspace the service account resides within.</p>
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace the service account resides within.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>The ID of the workspace the service account resides within.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workspace_id()
    }
}
