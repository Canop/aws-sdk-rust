// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_workspace_service_account_token::_delete_workspace_service_account_token_output::DeleteWorkspaceServiceAccountTokenOutputBuilder;

pub use crate::operation::delete_workspace_service_account_token::_delete_workspace_service_account_token_input::DeleteWorkspaceServiceAccountTokenInputBuilder;

impl crate::operation::delete_workspace_service_account_token::builders::DeleteWorkspaceServiceAccountTokenInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_workspace_service_account_token();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteWorkspaceServiceAccountToken`.
///
/// <p>Deletes a token for the workspace service account.</p>
/// <p>This will disable the key associated with the token. If any automation is currently using the key, it will no longer be authenticated or authorized to perform actions with the Grafana HTTP APIs.</p>
/// <p>Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteWorkspaceServiceAccountTokenFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_workspace_service_account_token::builders::DeleteWorkspaceServiceAccountTokenInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenOutput,
        crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenError,
    > for DeleteWorkspaceServiceAccountTokenFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenOutput,
            crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteWorkspaceServiceAccountTokenFluentBuilder {
    /// Creates a new `DeleteWorkspaceServiceAccountTokenFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteWorkspaceServiceAccountToken as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_workspace_service_account_token::builders::DeleteWorkspaceServiceAccountTokenInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountToken::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountToken::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenOutput,
        crate::operation::delete_workspace_service_account_token::DeleteWorkspaceServiceAccountTokenError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the token to delete.</p>
    pub fn token_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.token_id(input.into());
        self
    }
    /// <p>The ID of the token to delete.</p>
    pub fn set_token_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_token_id(input);
        self
    }
    /// <p>The ID of the token to delete.</p>
    pub fn get_token_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_token_id()
    }
    /// <p>The ID of the service account from which to delete the token.</p>
    pub fn service_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_account_id(input.into());
        self
    }
    /// <p>The ID of the service account from which to delete the token.</p>
    pub fn set_service_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_account_id(input);
        self
    }
    /// <p>The ID of the service account from which to delete the token.</p>
    pub fn get_service_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_account_id()
    }
    /// <p>The ID of the workspace from which to delete the token.</p>
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace from which to delete the token.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>The ID of the workspace from which to delete the token.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workspace_id()
    }
}
