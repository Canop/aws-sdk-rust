// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_workspace_input(
                     object: &mut aws_smithy_json::serialize::JsonObjectWriter,
                     input: &crate::operation::create_workspace::CreateWorkspaceInput,
                ) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.account_access_type {
        object.key("accountAccessType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.authentication_providers {
        let mut array_3 = object.key("authenticationProviders").start_array();
        for item_4 in var_2 {
             {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.configuration {
        object.key("configuration").string(var_6.as_str());
    }
    if let Some(var_7) = &input.network_access_control {
        #[allow(unused_mut)]
        let mut object_8 = object.key("networkAccessControl").start_object();
        crate::protocol_serde::shape_network_access_configuration::ser_network_access_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.organization_role_name {
        object.key("organizationRoleName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.permission_type {
        object.key("permissionType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.stack_set_name {
        object.key("stackSetName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
             {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("vpcConfiguration").start_object();
        crate::protocol_serde::shape_vpc_configuration::ser_vpc_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.workspace_data_sources {
        let mut array_19 = object.key("workspaceDataSources").start_array();
        for item_20 in var_18 {
             {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.workspace_description {
        object.key("workspaceDescription").string(var_21.as_str());
    }
    if let Some(var_22) = &input.workspace_name {
        object.key("workspaceName").string(var_22.as_str());
    }
    if let Some(var_23) = &input.workspace_notification_destinations {
        let mut array_24 = object.key("workspaceNotificationDestinations").start_array();
        for item_25 in var_23 {
             {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.workspace_organizational_units {
        let mut array_27 = object.key("workspaceOrganizationalUnits").start_array();
        for item_28 in var_26 {
             {
                array_27.value().string(item_28.as_str());
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.workspace_role_arn {
        object.key("workspaceRoleArn").string(var_29.as_str());
    }
    Ok(())
}

