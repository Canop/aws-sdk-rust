// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_aws_dms_replication_instance_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AwsDmsReplicationInstanceDetails,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(input.auto_minor_version_upgrade);
    }
    if let Some(var_1) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1.as_str());
    }
    if let Some(var_2) = &input.engine_version {
        object.key("EngineVersion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_3.as_str());
    }
    if input.multi_az {
        object.key("MultiAZ").boolean(input.multi_az);
    }
    if let Some(var_4) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_4.as_str());
    }
    if input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(input.publicly_accessible);
    }
    if let Some(var_5) = &input.replication_instance_class {
        object.key("ReplicationInstanceClass").string(var_5.as_str());
    }
    if let Some(var_6) = &input.replication_instance_identifier {
        object.key("ReplicationInstanceIdentifier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.replication_subnet_group {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ReplicationSubnetGroup").start_object();
        crate::protocol_serde::shape_aws_dms_replication_instance_replication_subnet_group_details::ser_aws_dms_replication_instance_replication_subnet_group_details(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.vpc_security_groups {
        let mut array_10 = object.key("VpcSecurityGroups").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_aws_dms_replication_instance_vpc_security_groups_details::ser_aws_dms_replication_instance_vpc_security_groups_details(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub(crate) fn de_aws_dms_replication_instance_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AwsDmsReplicationInstanceDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AwsDmsReplicationInstanceDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AllocatedStorage" => {
                            builder = builder.set_allocated_storage(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "AutoMinorVersionUpgrade" => {
                            builder =
                                builder.set_auto_minor_version_upgrade(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "AvailabilityZone" => {
                            builder = builder.set_availability_zone(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EngineVersion" => {
                            builder = builder.set_engine_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "KmsKeyId" => {
                            builder = builder.set_kms_key_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MultiAZ" => {
                            builder = builder.set_multi_az(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "PreferredMaintenanceWindow" => {
                            builder = builder.set_preferred_maintenance_window(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PubliclyAccessible" => {
                            builder = builder.set_publicly_accessible(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ReplicationInstanceClass" => {
                            builder = builder.set_replication_instance_class(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ReplicationInstanceIdentifier" => {
                            builder = builder.set_replication_instance_identifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ReplicationSubnetGroup" => {
                            builder = builder.set_replication_subnet_group(
                                    crate::protocol_serde::shape_aws_dms_replication_instance_replication_subnet_group_details::de_aws_dms_replication_instance_replication_subnet_group_details(tokens)?
                                );
                        }
                        "VpcSecurityGroups" => {
                            builder = builder.set_vpc_security_groups(
                                    crate::protocol_serde::shape_aws_dms_replication_instance_vpc_security_groups_list::de_aws_dms_replication_instance_vpc_security_groups_list(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
