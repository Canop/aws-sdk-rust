// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_response_plan_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_response_plan::UpdateResponsePlanInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.actions {
        let mut array_2 = object.key("actions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_action::ser_action(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    {
        object.key("arn").string(input.arn.as_str());
    }
    if let Some(var_5) = &input.chat_channel {
        #[allow(unused_mut)]
        let mut object_6 = object.key("chatChannel").start_object();
        crate::protocol_serde::shape_chat_channel::ser_chat_channel(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.client_token {
        object.key("clientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.display_name {
        object.key("displayName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.engagements {
        let mut array_10 = object.key("engagements").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.incident_template_dedupe_string {
        object.key("incidentTemplateDedupeString").string(var_12.as_str());
    }
    if let Some(var_13) = &input.incident_template_impact {
        object.key("incidentTemplateImpact").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.incident_template_notification_targets {
        let mut array_15 = object.key("incidentTemplateNotificationTargets").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_notification_target_item::ser_notification_target_item(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.incident_template_summary {
        object.key("incidentTemplateSummary").string(var_18.as_str());
    }
    if let Some(var_19) = &input.incident_template_tags {
        #[allow(unused_mut)]
        let mut object_20 = object.key("incidentTemplateTags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.incident_template_title {
        object.key("incidentTemplateTitle").string(var_23.as_str());
    }
    if let Some(var_24) = &input.integrations {
        let mut array_25 = object.key("integrations").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_integration::ser_integration(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    Ok(())
}
