// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_application_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_application::UpdateApplicationInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.architecture {
        object.key("architecture").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auto_start_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("autoStartConfiguration").start_object();
        crate::protocol_serde::shape_auto_start_config::ser_auto_start_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.auto_stop_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("autoStopConfiguration").start_object();
        crate::protocol_serde::shape_auto_stop_config::ser_auto_stop_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    {
        object.key("clientToken").string(input.client_token.as_str());
    }
    if let Some(var_6) = &input.image_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("imageConfiguration").start_object();
        crate::protocol_serde::shape_image_configuration_input::ser_image_configuration_input(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.initial_capacity {
        #[allow(unused_mut)]
        let mut object_9 = object.key("initialCapacity").start_object();
        for (key_10, value_11) in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_12 = object_9.key(key_10.as_str()).start_object();
                crate::protocol_serde::shape_initial_capacity_config::ser_initial_capacity_config(&mut object_12, value_11)?;
                object_12.finish();
            }
        }
        object_9.finish();
    }
    if let Some(var_13) = &input.maximum_capacity {
        #[allow(unused_mut)]
        let mut object_14 = object.key("maximumCapacity").start_object();
        crate::protocol_serde::shape_maximum_allowed_resources::ser_maximum_allowed_resources(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.monitoring_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("monitoringConfiguration").start_object();
        crate::protocol_serde::shape_monitoring_configuration::ser_monitoring_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.release_label {
        object.key("releaseLabel").string(var_19.as_str());
    }
    if let Some(var_20) = &input.runtime_configuration {
        let mut array_21 = object.key("runtimeConfiguration").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_configuration::ser_configuration(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.worker_type_specifications {
        #[allow(unused_mut)]
        let mut object_25 = object.key("workerTypeSpecifications").start_object();
        for (key_26, value_27) in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_28 = object_25.key(key_26.as_str()).start_object();
                crate::protocol_serde::shape_worker_type_specification_input::ser_worker_type_specification_input(&mut object_28, value_27)?;
                object_28.finish();
            }
        }
        object_25.finish();
    }
    Ok(())
}
