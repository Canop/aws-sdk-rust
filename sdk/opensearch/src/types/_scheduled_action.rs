// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a scheduled configuration change for an OpenSearch Service domain. This actions can be a <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html">service software update</a> or a <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html#auto-tune-types">blue/green Auto-Tune enhancement</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduledAction {
    /// <p>The unique identifier of the scheduled action.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of action that will be taken on the domain.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ActionType>,
    /// <p>The severity of the action.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::ActionSeverity>,
    /// <p>The time when the change is scheduled to happen.</p>
    #[doc(hidden)]
    pub scheduled_time: std::option::Option<i64>,
    /// <p>A description of the action to be taken.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    #[doc(hidden)]
    pub scheduled_by: std::option::Option<crate::types::ScheduledBy>,
    /// <p>The current status of the scheduled action.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ActionStatus>,
    /// <p>Whether the action is required or optional.</p>
    #[doc(hidden)]
    pub mandatory: std::option::Option<bool>,
    /// <p>Whether or not the scheduled action is cancellable.</p>
    #[doc(hidden)]
    pub cancellable: std::option::Option<bool>,
}
impl ScheduledAction {
    /// <p>The unique identifier of the scheduled action.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of action that will be taken on the domain.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ActionType> {
        self.r#type.as_ref()
    }
    /// <p>The severity of the action.</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::ActionSeverity> {
        self.severity.as_ref()
    }
    /// <p>The time when the change is scheduled to happen.</p>
    pub fn scheduled_time(&self) -> std::option::Option<i64> {
        self.scheduled_time
    }
    /// <p>A description of the action to be taken.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub fn scheduled_by(&self) -> std::option::Option<&crate::types::ScheduledBy> {
        self.scheduled_by.as_ref()
    }
    /// <p>The current status of the scheduled action.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ActionStatus> {
        self.status.as_ref()
    }
    /// <p>Whether the action is required or optional.</p>
    pub fn mandatory(&self) -> std::option::Option<bool> {
        self.mandatory
    }
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub fn cancellable(&self) -> std::option::Option<bool> {
        self.cancellable
    }
}
impl ScheduledAction {
    /// Creates a new builder-style object to manufacture [`ScheduledAction`](crate::types::ScheduledAction).
    pub fn builder() -> crate::types::builders::ScheduledActionBuilder {
        crate::types::builders::ScheduledActionBuilder::default()
    }
}

/// A builder for [`ScheduledAction`](crate::types::ScheduledAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduledActionBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ActionType>,
    pub(crate) severity: std::option::Option<crate::types::ActionSeverity>,
    pub(crate) scheduled_time: std::option::Option<i64>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) scheduled_by: std::option::Option<crate::types::ScheduledBy>,
    pub(crate) status: std::option::Option<crate::types::ActionStatus>,
    pub(crate) mandatory: std::option::Option<bool>,
    pub(crate) cancellable: std::option::Option<bool>,
}
impl ScheduledActionBuilder {
    /// <p>The unique identifier of the scheduled action.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the scheduled action.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of action that will be taken on the domain.</p>
    pub fn r#type(mut self, input: crate::types::ActionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of action that will be taken on the domain.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ActionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The severity of the action.</p>
    pub fn severity(mut self, input: crate::types::ActionSeverity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>The severity of the action.</p>
    pub fn set_severity(
        mut self,
        input: std::option::Option<crate::types::ActionSeverity>,
    ) -> Self {
        self.severity = input;
        self
    }
    /// <p>The time when the change is scheduled to happen.</p>
    pub fn scheduled_time(mut self, input: i64) -> Self {
        self.scheduled_time = Some(input);
        self
    }
    /// <p>The time when the change is scheduled to happen.</p>
    pub fn set_scheduled_time(mut self, input: std::option::Option<i64>) -> Self {
        self.scheduled_time = input;
        self
    }
    /// <p>A description of the action to be taken.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the action to be taken.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub fn scheduled_by(mut self, input: crate::types::ScheduledBy) -> Self {
        self.scheduled_by = Some(input);
        self
    }
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub fn set_scheduled_by(
        mut self,
        input: std::option::Option<crate::types::ScheduledBy>,
    ) -> Self {
        self.scheduled_by = input;
        self
    }
    /// <p>The current status of the scheduled action.</p>
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the scheduled action.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Whether the action is required or optional.</p>
    pub fn mandatory(mut self, input: bool) -> Self {
        self.mandatory = Some(input);
        self
    }
    /// <p>Whether the action is required or optional.</p>
    pub fn set_mandatory(mut self, input: std::option::Option<bool>) -> Self {
        self.mandatory = input;
        self
    }
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub fn cancellable(mut self, input: bool) -> Self {
        self.cancellable = Some(input);
        self
    }
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub fn set_cancellable(mut self, input: std::option::Option<bool>) -> Self {
        self.cancellable = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduledAction`](crate::types::ScheduledAction).
    pub fn build(self) -> crate::types::ScheduledAction {
        crate::types::ScheduledAction {
            id: self.id,
            r#type: self.r#type,
            severity: self.severity,
            scheduled_time: self.scheduled_time,
            description: self.description,
            scheduled_by: self.scheduled_by,
            status: self.status,
            mandatory: self.mandatory,
            cancellable: self.cancellable,
        }
    }
}
