// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteConfigInput {
    /// <p>UUID of a <code>Config</code>.</p>
    pub config_id: ::std::string::String,
    /// <p>Type of a <code>Config</code>.</p>
    pub config_type: crate::types::ConfigCapabilityType,
}
impl DeleteConfigInput {
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn config_id(&self) -> &str {
        use std::ops::Deref;
        self.config_id.deref()
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn config_type(&self) -> &crate::types::ConfigCapabilityType {
        &self.config_type
    }
}
impl DeleteConfigInput {
    /// Creates a new builder-style object to manufacture [`DeleteConfigInput`](crate::operation::delete_config::DeleteConfigInput).
    pub fn builder() -> crate::operation::delete_config::builders::DeleteConfigInputBuilder {
        crate::operation::delete_config::builders::DeleteConfigInputBuilder::default()
    }
}

/// A builder for [`DeleteConfigInput`](crate::operation::delete_config::DeleteConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteConfigInputBuilder {
    pub(crate) config_id: ::std::option::Option<::std::string::String>,
    pub(crate) config_type: ::std::option::Option<crate::types::ConfigCapabilityType>,
}
impl DeleteConfigInputBuilder {
    /// <p>UUID of a <code>Config</code>.</p>
    /// This field is required.
    pub fn config_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.config_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn set_config_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.config_id = input;
        self
    }
    /// <p>UUID of a <code>Config</code>.</p>
    pub fn get_config_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.config_id
    }
    /// <p>Type of a <code>Config</code>.</p>
    /// This field is required.
    pub fn config_type(mut self, input: crate::types::ConfigCapabilityType) -> Self {
        self.config_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn set_config_type(mut self, input: ::std::option::Option<crate::types::ConfigCapabilityType>) -> Self {
        self.config_type = input;
        self
    }
    /// <p>Type of a <code>Config</code>.</p>
    pub fn get_config_type(&self) -> &::std::option::Option<crate::types::ConfigCapabilityType> {
        &self.config_type
    }
    /// Consumes the builder and constructs a [`DeleteConfigInput`](crate::operation::delete_config::DeleteConfigInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`config_id`](crate::operation::delete_config::builders::DeleteConfigInputBuilder::config_id)
    /// - [`config_type`](crate::operation::delete_config::builders::DeleteConfigInputBuilder::config_type)
    pub fn build(self) -> ::std::result::Result<crate::operation::delete_config::DeleteConfigInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_config::DeleteConfigInput {
            config_id: self.config_id.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "config_id",
                    "config_id was not specified but it is required when building DeleteConfigInput",
                )
            })?,
            config_type: self.config_type.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "config_type",
                    "config_type was not specified but it is required when building DeleteConfigInput",
                )
            })?,
        })
    }
}
