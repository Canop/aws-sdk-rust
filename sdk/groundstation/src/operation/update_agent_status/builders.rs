// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_agent_status::_update_agent_status_output::UpdateAgentStatusOutputBuilder;

pub use crate::operation::update_agent_status::_update_agent_status_input::UpdateAgentStatusInputBuilder;

/// Fluent builder constructing a request to `UpdateAgentStatus`.
/// 
/// <note> 
/// <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> 
/// </note> 
/// <p>Update the status of the agent.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAgentStatusFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_agent_status::builders::UpdateAgentStatusInputBuilder
            }
impl UpdateAgentStatusFluentBuilder  {
    /// Creates a new `UpdateAgentStatus`.
                    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
                        Self { handle, inner: Default::default() }
                    }
    
                    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_agent_status::UpdateAgentStatus, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_agent_status::UpdateAgentStatusError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_agent_status::UpdateAgentStatusOutput, aws_smithy_http::result::SdkError<crate::operation::update_agent_status::UpdateAgentStatusError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// <p>UUID of agent to update.</p>
    pub fn agent_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.agent_id(input.into());
        self
    }
    /// <p>UUID of agent to update.</p>
    pub fn set_agent_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_agent_id(input);
        self
    }
    /// <p>GUID of agent task.</p>
    pub fn task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task_id(input.into());
        self
    }
    /// <p>GUID of agent task.</p>
    pub fn set_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_task_id(input);
        self
    }
    /// <p>Aggregate status for agent.</p>
    pub fn aggregate_status(mut self, input: crate::types::AggregateStatus) -> Self {
        self.inner = self.inner.aggregate_status(input);
        self
    }
    /// <p>Aggregate status for agent.</p>
    pub fn set_aggregate_status(mut self, input: std::option::Option<crate::types::AggregateStatus>) -> Self {
        self.inner = self.inner.set_aggregate_status(input);
        self
    }
    /// Appends an item to `componentStatuses`.
    ///
    /// To override the contents of this collection use [`set_component_statuses`](Self::set_component_statuses).
    ///
    /// <p>List of component statuses for agent.</p>
    pub fn component_statuses(mut self, input: crate::types::ComponentStatusData) -> Self {
        self.inner = self.inner.component_statuses(input);
        self
    }
    /// <p>List of component statuses for agent.</p>
    pub fn set_component_statuses(mut self, input: std::option::Option<std::vec::Vec<crate::types::ComponentStatusData>>) -> Self {
        self.inner = self.inner.set_component_statuses(input);
        self
    }
}

