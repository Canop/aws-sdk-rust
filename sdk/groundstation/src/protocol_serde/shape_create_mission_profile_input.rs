// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_mission_profile_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_mission_profile::CreateMissionProfileInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.contact_post_pass_duration_seconds {
        object.key("contactPostPassDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.contact_pre_pass_duration_seconds {
        object.key("contactPrePassDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    {
        let mut array_3 = object.key("dataflowEdges").start_array();
        for item_4 in &input.dataflow_edges {
            {
                let mut array_5 = array_3.value().start_array();
                for item_6 in item_4 {
                    {
                        array_5.value().string(item_6.as_str());
                    }
                }
                array_5.finish();
            }
        }
        array_3.finish();
    }
    {
        object.key("minimumViableContactDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.minimum_viable_contact_duration_seconds).into()),
        );
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_7) = &input.streams_kms_key {
        #[allow(unused_mut)]
        let mut object_8 = object.key("streamsKmsKey").start_object();
        crate::protocol_serde::shape_kms_key::ser_kms_key(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.streams_kms_role {
        object.key("streamsKmsRole").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    {
        object.key("trackingConfigArn").string(input.tracking_config_arn.as_str());
    }
    Ok(())
}
