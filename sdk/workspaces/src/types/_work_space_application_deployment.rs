// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the WorkSpace application deployment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkSpaceApplicationDeployment {
    /// <p>The associations between the applications and the associated resources.</p>
    pub associations: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceResourceAssociation>>,
}
impl WorkSpaceApplicationDeployment {
    /// <p>The associations between the applications and the associated resources.</p>
    pub fn associations(&self) -> ::std::option::Option<&[crate::types::WorkspaceResourceAssociation]> {
        self.associations.as_deref()
    }
}
impl WorkSpaceApplicationDeployment {
    /// Creates a new builder-style object to manufacture [`WorkSpaceApplicationDeployment`](crate::types::WorkSpaceApplicationDeployment).
    pub fn builder() -> crate::types::builders::WorkSpaceApplicationDeploymentBuilder {
        crate::types::builders::WorkSpaceApplicationDeploymentBuilder::default()
    }
}

/// A builder for [`WorkSpaceApplicationDeployment`](crate::types::WorkSpaceApplicationDeployment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkSpaceApplicationDeploymentBuilder {
    pub(crate) associations: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceResourceAssociation>>,
}
impl WorkSpaceApplicationDeploymentBuilder {
    /// Appends an item to `associations`.
    ///
    /// To override the contents of this collection use [`set_associations`](Self::set_associations).
    ///
    /// <p>The associations between the applications and the associated resources.</p>
    pub fn associations(mut self, input: crate::types::WorkspaceResourceAssociation) -> Self {
        let mut v = self.associations.unwrap_or_default();
        v.push(input);
        self.associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The associations between the applications and the associated resources.</p>
    pub fn set_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceResourceAssociation>>) -> Self {
        self.associations = input;
        self
    }
    /// <p>The associations between the applications and the associated resources.</p>
    pub fn get_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkspaceResourceAssociation>> {
        &self.associations
    }
    /// Consumes the builder and constructs a [`WorkSpaceApplicationDeployment`](crate::types::WorkSpaceApplicationDeployment).
    pub fn build(self) -> crate::types::WorkSpaceApplicationDeployment {
        crate::types::WorkSpaceApplicationDeployment {
            associations: self.associations,
        }
    }
}
