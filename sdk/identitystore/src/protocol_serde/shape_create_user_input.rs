// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_user_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_user::CreateUserInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("IdentityStoreId").string(input.identity_store_id.as_str());
    }
    if let Some(var_1) = &input.user_name {
        object.key("UserName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Name").start_object();
        crate::protocol_serde::shape_name::ser_name(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.display_name {
        object.key("DisplayName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.nick_name {
        object.key("NickName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.profile_url {
        object.key("ProfileUrl").string(var_6.as_str());
    }
    if let Some(var_7) = &input.emails {
        let mut array_8 = object.key("Emails").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_email::ser_email(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.addresses {
        let mut array_12 = object.key("Addresses").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_address::ser_address(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.phone_numbers {
        let mut array_16 = object.key("PhoneNumbers").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_phone_number::ser_phone_number(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.user_type {
        object.key("UserType").string(var_19.as_str());
    }
    if let Some(var_20) = &input.title {
        object.key("Title").string(var_20.as_str());
    }
    if let Some(var_21) = &input.preferred_language {
        object.key("PreferredLanguage").string(var_21.as_str());
    }
    if let Some(var_22) = &input.locale {
        object.key("Locale").string(var_22.as_str());
    }
    if let Some(var_23) = &input.timezone {
        object.key("Timezone").string(var_23.as_str());
    }
    Ok(())
}
