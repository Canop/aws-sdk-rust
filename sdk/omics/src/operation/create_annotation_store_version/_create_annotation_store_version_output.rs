// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAnnotationStoreVersionOutput {
    /// <p> A generated ID for the annotation store </p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub version_name: ::std::option::Option<::std::string::String>,
    /// <p> The ID for the annotation store from which new versions are being created. </p>
    pub store_id: ::std::option::Option<::std::string::String>,
    /// <p> The options for an annotation store version. </p>
    pub version_options: ::std::option::Option<crate::types::VersionOptions>,
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The status of a annotation store version. </p>
    pub status: ::std::option::Option<crate::types::VersionStatus>,
    /// <p> The time stamp for the creation of an annotation store version. </p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateAnnotationStoreVersionOutput {
    /// <p> A generated ID for the annotation store </p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn version_name(&self) -> ::std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p> The ID for the annotation store from which new versions are being created. </p>
    pub fn store_id(&self) -> ::std::option::Option<&str> {
        self.store_id.as_deref()
    }
    /// <p> The options for an annotation store version. </p>
    pub fn version_options(&self) -> ::std::option::Option<&crate::types::VersionOptions> {
        self.version_options.as_ref()
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The status of a annotation store version. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VersionStatus> {
        self.status.as_ref()
    }
    /// <p> The time stamp for the creation of an annotation store version. </p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for CreateAnnotationStoreVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAnnotationStoreVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateAnnotationStoreVersionOutput`](crate::operation::create_annotation_store_version::CreateAnnotationStoreVersionOutput).
    pub fn builder() -> crate::operation::create_annotation_store_version::builders::CreateAnnotationStoreVersionOutputBuilder {
        crate::operation::create_annotation_store_version::builders::CreateAnnotationStoreVersionOutputBuilder::default()
    }
}

/// A builder for [`CreateAnnotationStoreVersionOutput`](crate::operation::create_annotation_store_version::CreateAnnotationStoreVersionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateAnnotationStoreVersionOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) store_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_options: ::std::option::Option<crate::types::VersionOptions>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::VersionStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateAnnotationStoreVersionOutputBuilder {
    /// <p> A generated ID for the annotation store </p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A generated ID for the annotation store </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> A generated ID for the annotation store </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p> The ID for the annotation store from which new versions are being created. </p>
    pub fn store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID for the annotation store from which new versions are being created. </p>
    pub fn set_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.store_id = input;
        self
    }
    /// <p> The ID for the annotation store from which new versions are being created. </p>
    pub fn get_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.store_id
    }
    /// <p> The options for an annotation store version. </p>
    pub fn version_options(mut self, input: crate::types::VersionOptions) -> Self {
        self.version_options = ::std::option::Option::Some(input);
        self
    }
    /// <p> The options for an annotation store version. </p>
    pub fn set_version_options(mut self, input: ::std::option::Option<crate::types::VersionOptions>) -> Self {
        self.version_options = input;
        self
    }
    /// <p> The options for an annotation store version. </p>
    pub fn get_version_options(&self) -> &::std::option::Option<crate::types::VersionOptions> {
        &self.version_options
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name given to an annotation store version to distinguish it from other versions. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The status of a annotation store version. </p>
    pub fn status(mut self, input: crate::types::VersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The status of a annotation store version. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The status of a annotation store version. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VersionStatus> {
        &self.status
    }
    /// <p> The time stamp for the creation of an annotation store version. </p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The time stamp for the creation of an annotation store version. </p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p> The time stamp for the creation of an annotation store version. </p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAnnotationStoreVersionOutput`](crate::operation::create_annotation_store_version::CreateAnnotationStoreVersionOutput).
    pub fn build(self) -> crate::operation::create_annotation_store_version::CreateAnnotationStoreVersionOutput {
        crate::operation::create_annotation_store_version::CreateAnnotationStoreVersionOutput {
            id: self.id,
            version_name: self.version_name,
            store_id: self.store_id,
            version_options: self.version_options,
            name: self.name,
            status: self.status,
            creation_time: self.creation_time,
            _request_id: self._request_id,
        }
    }
}
