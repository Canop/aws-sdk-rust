// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_multipart_read_set_upload::_create_multipart_read_set_upload_output::CreateMultipartReadSetUploadOutputBuilder;

pub use crate::operation::create_multipart_read_set_upload::_create_multipart_read_set_upload_input::CreateMultipartReadSetUploadInputBuilder;

/// Fluent builder constructing a request to `CreateMultipartReadSetUpload`.
///
/// <p> Begins a multipart read set upload. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateMultipartReadSetUploadFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::create_multipart_read_set_upload::builders::CreateMultipartReadSetUploadInputBuilder,
}
impl CreateMultipartReadSetUploadFluentBuilder {
    /// Creates a new `CreateMultipartReadSetUpload`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }
    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_multipart_read_set_upload::CreateMultipartReadSetUpload,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_multipart_read_set_upload::CreateMultipartReadSetUploadError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_multipart_read_set_upload::CreateMultipartReadSetUploadOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_multipart_read_set_upload::CreateMultipartReadSetUploadError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The sequence store ID for the store that is the destination of the multipart uploads. </p>
    pub fn sequence_store_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sequence_store_id(input.into());
        self
    }
    /// <p> The sequence store ID for the store that is the destination of the multipart uploads. </p>
    pub fn set_sequence_store_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sequence_store_id(input);
        self
    }
    /// <p> An idempotency token that can be used to avoid triggering multiple multipart uploads. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p> An idempotency token that can be used to avoid triggering multiple multipart uploads. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p> The type of file being uploaded. </p>
    pub fn source_file_type(mut self, input: crate::types::FileType) -> Self {
        self.inner = self.inner.source_file_type(input);
        self
    }
    /// <p> The type of file being uploaded. </p>
    pub fn set_source_file_type(
        mut self,
        input: std::option::Option<crate::types::FileType>,
    ) -> Self {
        self.inner = self.inner.set_source_file_type(input);
        self
    }
    /// <p> The source's subject ID. </p>
    pub fn subject_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subject_id(input.into());
        self
    }
    /// <p> The source's subject ID. </p>
    pub fn set_subject_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subject_id(input);
        self
    }
    /// <p> The source's sample ID. </p>
    pub fn sample_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sample_id(input.into());
        self
    }
    /// <p> The source's sample ID. </p>
    pub fn set_sample_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sample_id(input);
        self
    }
    /// <p> Where the source originated. </p>
    pub fn generated_from(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.generated_from(input.into());
        self
    }
    /// <p> Where the source originated. </p>
    pub fn set_generated_from(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_generated_from(input);
        self
    }
    /// <p> The ARN of the reference. </p>
    pub fn reference_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reference_arn(input.into());
        self
    }
    /// <p> The ARN of the reference. </p>
    pub fn set_reference_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reference_arn(input);
        self
    }
    /// <p> The name of the read set. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name of the read set. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The description of the read set. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p> The description of the read set. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> Any tags to add to the read set. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p> Any tags to add to the read set. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
