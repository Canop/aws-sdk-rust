// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_state_machine_alias::_create_state_machine_alias_output::CreateStateMachineAliasOutputBuilder;

pub use crate::operation::create_state_machine_alias::_create_state_machine_alias_input::CreateStateMachineAliasInputBuilder;

/// Fluent builder constructing a request to `CreateStateMachineAlias`.
///
/// <p>Creates an <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html">alias</a> for a state machine that points to one or two <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html">versions</a> of the same state machine. You can set your application to call <code>StartExecution</code> with an alias and update the version the alias uses without changing the client's code.</p>
/// <p>You can also map an alias to split <code>StartExecution</code> requests between two versions of a state machine. To do this, add a second <code>RoutingConfig</code> object in the <code>routingConfiguration</code> parameter. You must also specify the percentage of execution run requests each version should receive in both <code>RoutingConfig</code> objects. Step Functions randomly chooses which version runs a given execution based on the percentage you specify.</p>
/// <p>To create an alias that points to a single version, specify a single <code>RoutingConfig</code> object with a <code>weight</code> set to 100.</p>
/// <p>You can create up to 100 aliases for each state machine. You must delete unused aliases using the <code>DeleteStateMachineAlias</code> API action.</p>
/// <p> <code>CreateStateMachineAlias</code> is an idempotent API. Step Functions bases the idempotency check on the <code>stateMachineArn</code>, <code>description</code>, <code>name</code>, and <code>routingConfiguration</code> parameters. Requests that contain the same values for these parameters return a successful idempotent response without creating a duplicate resource.</p>
/// <p> <b>Related operations:</b> </p>
/// <ul>
/// <li> <p> <code>DescribeStateMachineAlias</code> </p> </li>
/// <li> <p> <code>ListStateMachineAliases</code> </p> </li>
/// <li> <p> <code>UpdateStateMachineAlias</code> </p> </li>
/// <li> <p> <code>DeleteStateMachineAlias</code> </p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateStateMachineAliasFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::create_state_machine_alias::builders::CreateStateMachineAliasInputBuilder,
}
impl CreateStateMachineAliasFluentBuilder {
    /// Creates a new `CreateStateMachineAlias`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn customize_middleware(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_state_machine_alias::CreateStateMachineAlias,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_state_machine_alias::CreateStateMachineAliasError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn send_middleware(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_state_machine_alias::CreateStateMachineAliasOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_state_machine_alias::CreateStateMachineAliasError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_state_machine_alias::CreateStateMachineAliasOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_state_machine_alias::CreateStateMachineAliasError,
        >,
    > {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_state_machine_alias::CreateStateMachineAlias,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_state_machine_alias::CreateStateMachineAliasError,
        >,
    > {
        self.customize_middleware().await
    }
    /// <p>A description for the state machine alias.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the state machine alias.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The name of the state machine alias.</p>
    /// <p>To avoid conflict with version ARNs, don't use an integer in the name of the alias.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the state machine alias.</p>
    /// <p>To avoid conflict with version ARNs, don't use an integer in the name of the alias.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `routingConfiguration`.
    ///
    /// To override the contents of this collection use [`set_routing_configuration`](Self::set_routing_configuration).
    ///
    /// <p>The routing configuration of a state machine alias. The routing configuration shifts execution traffic between two state machine versions. <code>routingConfiguration</code> contains an array of <code>RoutingConfig</code> objects that specify up to two state machine versions. Step Functions then randomly choses which version to run an execution with based on the weight assigned to each <code>RoutingConfig</code>.</p>
    pub fn routing_configuration(
        mut self,
        input: crate::types::RoutingConfigurationListItem,
    ) -> Self {
        self.inner = self.inner.routing_configuration(input);
        self
    }
    /// <p>The routing configuration of a state machine alias. The routing configuration shifts execution traffic between two state machine versions. <code>routingConfiguration</code> contains an array of <code>RoutingConfig</code> objects that specify up to two state machine versions. Step Functions then randomly choses which version to run an execution with based on the weight assigned to each <code>RoutingConfig</code>.</p>
    pub fn set_routing_configuration(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingConfigurationListItem>>,
    ) -> Self {
        self.inner = self.inner.set_routing_configuration(input);
        self
    }
}
