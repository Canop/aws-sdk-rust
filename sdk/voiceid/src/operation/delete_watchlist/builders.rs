// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_watchlist::_delete_watchlist_output::DeleteWatchlistOutputBuilder;

pub use crate::operation::delete_watchlist::_delete_watchlist_input::DeleteWatchlistInputBuilder;

/// Fluent builder constructing a request to `DeleteWatchlist`.
/// 
/// <p>Deletes the specified watchlist from Voice ID. This API throws an exception when there are fraudsters in the watchlist that you are trying to delete. You must delete the fraudsters, and then delete the watchlist. Every domain has a default watchlist which cannot be deleted. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWatchlistFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_watchlist::builders::DeleteWatchlistInputBuilder,
}
impl DeleteWatchlistFluentBuilder  {
    /// Creates a new `DeleteWatchlist`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: Default::default(),
        }
    }
    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::delete_watchlist::DeleteWatchlist, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::delete_watchlist::DeleteWatchlistError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::delete_watchlist::DeleteWatchlistOutput, aws_smithy_http::result::SdkError<crate::operation::delete_watchlist::DeleteWatchlistError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The identifier of the watchlist to be deleted.</p>
    pub fn watchlist_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.watchlist_id(input.into());
        self
    }
    /// <p>The identifier of the watchlist to be deleted.</p>
    pub fn set_watchlist_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_watchlist_id(input);
        self
    }
}

