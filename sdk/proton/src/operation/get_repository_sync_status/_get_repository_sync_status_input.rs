// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRepositorySyncStatusInput {
    /// <p>The repository name.</p>
    pub repository_name: ::std::string::String,
    /// <p>The repository provider.</p>
    pub repository_provider: crate::types::RepositoryProvider,
    /// <p>The repository branch.</p>
    pub branch: ::std::string::String,
    /// <p>The repository sync type.</p>
    pub sync_type: crate::types::SyncType,
}
impl GetRepositorySyncStatusInput {
    /// <p>The repository name.</p>
    pub fn repository_name(&self) -> &str {
        use std::ops::Deref;
        self.repository_name.deref()
    }
    /// <p>The repository provider.</p>
    pub fn repository_provider(&self) -> &crate::types::RepositoryProvider {
        &self.repository_provider
    }
    /// <p>The repository branch.</p>
    pub fn branch(&self) -> &str {
        use std::ops::Deref;
        self.branch.deref()
    }
    /// <p>The repository sync type.</p>
    pub fn sync_type(&self) -> &crate::types::SyncType {
        &self.sync_type
    }
}
impl GetRepositorySyncStatusInput {
    /// Creates a new builder-style object to manufacture [`GetRepositorySyncStatusInput`](crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput).
    pub fn builder() -> crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder {
        crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder::default()
    }
}

/// A builder for [`GetRepositorySyncStatusInput`](crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetRepositorySyncStatusInputBuilder {
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) repository_provider: ::std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) branch: ::std::option::Option<::std::string::String>,
    pub(crate) sync_type: ::std::option::Option<crate::types::SyncType>,
}
impl GetRepositorySyncStatusInputBuilder {
    /// <p>The repository name.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository name.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The repository name.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The repository provider.</p>
    /// This field is required.
    pub fn repository_provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.repository_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_repository_provider(mut self, input: ::std::option::Option<crate::types::RepositoryProvider>) -> Self {
        self.repository_provider = input;
        self
    }
    /// <p>The repository provider.</p>
    pub fn get_repository_provider(&self) -> &::std::option::Option<crate::types::RepositoryProvider> {
        &self.repository_provider
    }
    /// <p>The repository branch.</p>
    /// This field is required.
    pub fn branch(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository branch.</p>
    pub fn set_branch(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The repository branch.</p>
    pub fn get_branch(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch
    }
    /// <p>The repository sync type.</p>
    /// This field is required.
    pub fn sync_type(mut self, input: crate::types::SyncType) -> Self {
        self.sync_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The repository sync type.</p>
    pub fn set_sync_type(mut self, input: ::std::option::Option<crate::types::SyncType>) -> Self {
        self.sync_type = input;
        self
    }
    /// <p>The repository sync type.</p>
    pub fn get_sync_type(&self) -> &::std::option::Option<crate::types::SyncType> {
        &self.sync_type
    }
    /// Consumes the builder and constructs a [`GetRepositorySyncStatusInput`](crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`repository_name`](crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder::repository_name)
    /// - [`repository_provider`](crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder::repository_provider)
    /// - [`branch`](crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder::branch)
    /// - [`sync_type`](crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder::sync_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput,
        ::aws_smithy_http::operation::error::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput {
            repository_name: self.repository_name.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "repository_name",
                    "repository_name was not specified but it is required when building GetRepositorySyncStatusInput",
                )
            })?,
            repository_provider: self.repository_provider.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "repository_provider",
                    "repository_provider was not specified but it is required when building GetRepositorySyncStatusInput",
                )
            })?,
            branch: self.branch.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "branch",
                    "branch was not specified but it is required when building GetRepositorySyncStatusInput",
                )
            })?,
            sync_type: self.sync_type.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "sync_type",
                    "sync_type was not specified but it is required when building GetRepositorySyncStatusInput",
                )
            })?,
        })
    }
}
