// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteServiceTemplateVersionInput {
    /// <p>The name of the service template.</p>
    pub template_name: ::std::string::String,
    /// <p>The service template major version to delete.</p>
    pub major_version: ::std::string::String,
    /// <p>The service template minor version to delete.</p>
    pub minor_version: ::std::string::String,
}
impl DeleteServiceTemplateVersionInput {
    /// <p>The name of the service template.</p>
    pub fn template_name(&self) -> &str {
        use std::ops::Deref;
        self.template_name.deref()
    }
    /// <p>The service template major version to delete.</p>
    pub fn major_version(&self) -> &str {
        use std::ops::Deref;
        self.major_version.deref()
    }
    /// <p>The service template minor version to delete.</p>
    pub fn minor_version(&self) -> &str {
        use std::ops::Deref;
        self.minor_version.deref()
    }
}
impl DeleteServiceTemplateVersionInput {
    /// Creates a new builder-style object to manufacture [`DeleteServiceTemplateVersionInput`](crate::operation::delete_service_template_version::DeleteServiceTemplateVersionInput).
    pub fn builder() -> crate::operation::delete_service_template_version::builders::DeleteServiceTemplateVersionInputBuilder {
        crate::operation::delete_service_template_version::builders::DeleteServiceTemplateVersionInputBuilder::default()
    }
}

/// A builder for [`DeleteServiceTemplateVersionInput`](crate::operation::delete_service_template_version::DeleteServiceTemplateVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteServiceTemplateVersionInputBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) major_version: ::std::option::Option<::std::string::String>,
    pub(crate) minor_version: ::std::option::Option<::std::string::String>,
}
impl DeleteServiceTemplateVersionInputBuilder {
    /// <p>The name of the service template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the service template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The service template major version to delete.</p>
    /// This field is required.
    pub fn major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service template major version to delete.</p>
    pub fn set_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// <p>The service template major version to delete.</p>
    pub fn get_major_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_version
    }
    /// <p>The service template minor version to delete.</p>
    /// This field is required.
    pub fn minor_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.minor_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service template minor version to delete.</p>
    pub fn set_minor_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.minor_version = input;
        self
    }
    /// <p>The service template minor version to delete.</p>
    pub fn get_minor_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.minor_version
    }
    /// Consumes the builder and constructs a [`DeleteServiceTemplateVersionInput`](crate::operation::delete_service_template_version::DeleteServiceTemplateVersionInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_name`](crate::operation::delete_service_template_version::builders::DeleteServiceTemplateVersionInputBuilder::template_name)
    /// - [`major_version`](crate::operation::delete_service_template_version::builders::DeleteServiceTemplateVersionInputBuilder::major_version)
    /// - [`minor_version`](crate::operation::delete_service_template_version::builders::DeleteServiceTemplateVersionInputBuilder::minor_version)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_service_template_version::DeleteServiceTemplateVersionInput,
        ::aws_smithy_http::operation::error::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_service_template_version::DeleteServiceTemplateVersionInput {
            template_name: self.template_name.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "template_name",
                    "template_name was not specified but it is required when building DeleteServiceTemplateVersionInput",
                )
            })?,
            major_version: self.major_version.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "major_version",
                    "major_version was not specified but it is required when building DeleteServiceTemplateVersionInput",
                )
            })?,
            minor_version: self.minor_version.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "minor_version",
                    "minor_version was not specified but it is required when building DeleteServiceTemplateVersionInput",
                )
            })?,
        })
    }
}
