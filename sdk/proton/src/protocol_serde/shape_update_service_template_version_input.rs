// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_service_template_version_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_service_template_version::UpdateServiceTemplateVersionInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("templateName").string(input.template_name.as_str());
    }
    {
        object.key("majorVersion").string(input.major_version.as_str());
    }
    {
        object.key("minorVersion").string(input.minor_version.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.status {
        object.key("status").string(var_2.as_str());
    }
    if let Some(var_3) = &input.compatible_environment_templates {
        let mut array_4 = object.key("compatibleEnvironmentTemplates").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_compatible_environment_template_input::ser_compatible_environment_template_input(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.supported_component_sources {
        let mut array_8 = object.key("supportedComponentSources").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    Ok(())
}
