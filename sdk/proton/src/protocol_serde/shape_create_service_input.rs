// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_service_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_service::CreateServiceInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    {
        object.key("templateName").string(input.template_name.as_str());
    }
    {
        object.key("templateMajorVersion").string(input.template_major_version.as_str());
    }
    if let Some(var_2) = &input.template_minor_version {
        object.key("templateMinorVersion").string(var_2.as_str());
    }
    {
        object.key("spec").string(input.spec.as_str());
    }
    if let Some(var_3) = &input.repository_connection_arn {
        object.key("repositoryConnectionArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.repository_id {
        object.key("repositoryId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.branch_name {
        object.key("branchName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        let mut array_7 = object.key("tags").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}
