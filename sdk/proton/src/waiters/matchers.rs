// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_component_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::get_component::GetComponentOutput, &crate::operation::get_component::GetComponentError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"component.deploymentStatus","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_component_873ada2b976bd45be(
    _result: ::std::result::Result<&crate::operation::get_component::GetComponentOutput, &crate::operation::get_component::GetComponentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_component::GetComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.component.as_ref()?;
        let _fld_2 = &_fld_1.deployment_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"component.deploymentStatus","expected":"SUCCEEDED","comparator":"stringEquals"}}
pub(crate) fn match_get_component_ff0ba96385c650bff(
    _result: ::std::result::Result<&crate::operation::get_component::GetComponentOutput, &crate::operation::get_component::GetComponentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_component::GetComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.component.as_ref()?;
        let _fld_2 = &_fld_1.deployment_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUCCEEDED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"component.deploymentStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_component_7ec2852c4c9309c0a(
    _result: ::std::result::Result<&crate::operation::get_component::GetComponentOutput, &crate::operation::get_component::GetComponentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_component::GetComponentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.component.as_ref()?;
        let _fld_2 = &_fld_1.deployment_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"environment.deploymentStatus","expected":"SUCCEEDED","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_3d3356d2c794d423b(
    _result: ::std::result::Result<&crate::operation::get_environment::GetEnvironmentOutput, &crate::operation::get_environment::GetEnvironmentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment::GetEnvironmentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.environment.as_ref()?;
        let _fld_2 = &_fld_1.deployment_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUCCEEDED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"environment.deploymentStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_8a03af5064b23745e(
    _result: ::std::result::Result<&crate::operation::get_environment::GetEnvironmentOutput, &crate::operation::get_environment::GetEnvironmentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment::GetEnvironmentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.environment.as_ref()?;
        let _fld_2 = &_fld_1.deployment_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"environmentTemplateVersion.status","expected":"DRAFT","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_template_version_a5b3f466aeb30c257(
    _result: ::std::result::Result<
        &crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionOutput,
        &crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::TemplateVersionStatus> {
        let _fld_1 = _output.environment_template_version.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DRAFT";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"environmentTemplateVersion.status","expected":"PUBLISHED","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_template_version_0828932c125f5b1cd(
    _result: ::std::result::Result<
        &crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionOutput,
        &crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::TemplateVersionStatus> {
        let _fld_1 = _output.environment_template_version.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PUBLISHED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"environmentTemplateVersion.status","expected":"REGISTRATION_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_template_version_b4971a1e3bf3ec4bc(
    _result: ::std::result::Result<
        &crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionOutput,
        &crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::TemplateVersionStatus> {
        let _fld_1 = _output.environment_template_version.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "REGISTRATION_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_service_2fa8e698c4f041742(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"CREATE_FAILED_CLEANUP_COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_get_service_efb745b5ca380efb2(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED_CLEANUP_COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"CREATE_FAILED_CLEANUP_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_cdcddd194f150cc91(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED_CLEANUP_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_5b8bf73ce5e0d610b(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_service_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"service.status","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_2e17268fe9502816d(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"serviceInstance.deploymentStatus","expected":"SUCCEEDED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_instance_0ed41a06b540a9cbe(
    _result: ::std::result::Result<
        &crate::operation::get_service_instance::GetServiceInstanceOutput,
        &crate::operation::get_service_instance::GetServiceInstanceError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_service_instance::GetServiceInstanceOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.service_instance.as_ref()?;
        let _fld_2 = &_fld_1.deployment_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUCCEEDED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"serviceInstance.deploymentStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_instance_6954282c58d20d104(
    _result: ::std::result::Result<
        &crate::operation::get_service_instance::GetServiceInstanceOutput,
        &crate::operation::get_service_instance::GetServiceInstanceError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_service_instance::GetServiceInstanceOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.service_instance.as_ref()?;
        let _fld_2 = &_fld_1.deployment_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.pipeline.deploymentStatus","expected":"SUCCEEDED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_be7a287507c1de454(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = _fld_1.pipeline.as_ref()?;
        let _fld_3 = &_fld_2.deployment_status;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUCCEEDED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.pipeline.deploymentStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_f2dcb04fda03e8ed1(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::DeploymentStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = _fld_1.pipeline.as_ref()?;
        let _fld_3 = &_fld_2.deployment_status;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"serviceTemplateVersion.status","expected":"DRAFT","comparator":"stringEquals"}}
pub(crate) fn match_get_service_template_version_84f8ebac5073b2506(
    _result: ::std::result::Result<
        &crate::operation::get_service_template_version::GetServiceTemplateVersionOutput,
        &crate::operation::get_service_template_version::GetServiceTemplateVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_service_template_version::GetServiceTemplateVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::TemplateVersionStatus> {
        let _fld_1 = _output.service_template_version.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DRAFT";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"serviceTemplateVersion.status","expected":"PUBLISHED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_template_version_593e406ad475e3be3(
    _result: ::std::result::Result<
        &crate::operation::get_service_template_version::GetServiceTemplateVersionOutput,
        &crate::operation::get_service_template_version::GetServiceTemplateVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_service_template_version::GetServiceTemplateVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::TemplateVersionStatus> {
        let _fld_1 = _output.service_template_version.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PUBLISHED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"serviceTemplateVersion.status","expected":"REGISTRATION_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_template_version_756c6a0dc70d2d223(
    _result: ::std::result::Result<
        &crate::operation::get_service_template_version::GetServiceTemplateVersionOutput,
        &crate::operation::get_service_template_version::GetServiceTemplateVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_service_template_version::GetServiceTemplateVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::TemplateVersionStatus> {
        let _fld_1 = _output.service_template_version.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "REGISTRATION_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"UPDATE_FAILED_CLEANUP_COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_get_service_4db8e3fbb4b0e28e9(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED_CLEANUP_COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"UPDATE_FAILED_CLEANUP_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_1c25d8f6b67efecce(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED_CLEANUP_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"UPDATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_6310802c4721a37d3(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"service.status","expected":"UPDATE_COMPLETE_CLEANUP_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_service_55d0862750015e99e(
    _result: ::std::result::Result<&crate::operation::get_service::GetServiceOutput, &crate::operation::get_service::GetServiceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_service::GetServiceOutput) -> ::std::option::Option<&'a crate::types::ServiceStatus> {
        let _fld_1 = _output.service.as_ref()?;
        let _fld_2 = &_fld_1.status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_COMPLETE_CLEANUP_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
