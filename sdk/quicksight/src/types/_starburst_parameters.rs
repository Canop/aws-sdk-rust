// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters that are required to connect to a Starburst data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StarburstParameters {
    /// <p>The host name of the Starburst data source.</p>
    pub host: ::std::option::Option<::std::string::String>,
    /// <p>The port for the Starburst data source.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The catalog name for the Starburst data source.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The product type for the Starburst data source.</p>
    pub product_type: ::std::option::Option<crate::types::StarburstProductType>,
}
impl StarburstParameters {
    /// <p>The host name of the Starburst data source.</p>
    pub fn host(&self) -> ::std::option::Option<&str> {
        self.host.as_deref()
    }
    /// <p>The port for the Starburst data source.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The catalog name for the Starburst data source.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn product_type(&self) -> ::std::option::Option<&crate::types::StarburstProductType> {
        self.product_type.as_ref()
    }
}
impl StarburstParameters {
    /// Creates a new builder-style object to manufacture [`StarburstParameters`](crate::types::StarburstParameters).
    pub fn builder() -> crate::types::builders::StarburstParametersBuilder {
        crate::types::builders::StarburstParametersBuilder::default()
    }
}

/// A builder for [`StarburstParameters`](crate::types::StarburstParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StarburstParametersBuilder {
    pub(crate) host: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) product_type: ::std::option::Option<crate::types::StarburstProductType>,
}
impl StarburstParametersBuilder {
    /// <p>The host name of the Starburst data source.</p>
    pub fn host(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The host name of the Starburst data source.</p>
    pub fn set_host(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>The host name of the Starburst data source.</p>
    pub fn get_host(&self) -> &::std::option::Option<::std::string::String> {
        &self.host
    }
    /// <p>The port for the Starburst data source.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port for the Starburst data source.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port for the Starburst data source.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The catalog name for the Starburst data source.</p>
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog name for the Starburst data source.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The catalog name for the Starburst data source.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn product_type(mut self, input: crate::types::StarburstProductType) -> Self {
        self.product_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn set_product_type(mut self, input: ::std::option::Option<crate::types::StarburstProductType>) -> Self {
        self.product_type = input;
        self
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn get_product_type(&self) -> &::std::option::Option<crate::types::StarburstProductType> {
        &self.product_type
    }
    /// Consumes the builder and constructs a [`StarburstParameters`](crate::types::StarburstParameters).
    pub fn build(self) -> crate::types::StarburstParameters {
        crate::types::StarburstParameters {
            host: self.host,
            port: self.port,
            catalog: self.catalog,
            product_type: self.product_type,
        }
    }
}
