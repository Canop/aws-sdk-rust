// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_dashboard_snapshot_job_result::_describe_dashboard_snapshot_job_result_output::DescribeDashboardSnapshotJobResultOutputBuilder;

pub use crate::operation::describe_dashboard_snapshot_job_result::_describe_dashboard_snapshot_job_result_input::DescribeDashboardSnapshotJobResultInputBuilder;

/// Fluent builder constructing a request to `DescribeDashboardSnapshotJobResult`.
///
/// <p>Describes the result of an existing snapshot job that has finished running.</p>
/// <p>A finished snapshot job will return a <code>COMPLETED</code> or <code>FAILED</code> status when you poll the job with a <code>DescribeDashboardSnapshotJob</code> API call.</p>
/// <p>If the job has not finished running, this operation returns a message that says <code>Dashboard Snapshot Job with id
/// <snapshotjobid>
/// has not reached a terminal state.
/// </snapshotjobid></code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeDashboardSnapshotJobResultFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::describe_dashboard_snapshot_job_result::builders::DescribeDashboardSnapshotJobResultInputBuilder,
}
impl DescribeDashboardSnapshotJobResultFluentBuilder {
    /// Creates a new `DescribeDashboardSnapshotJobResult`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResult, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResultError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResultOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResultError>>
                         {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResultOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResultError>>
                             {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResult, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::describe_dashboard_snapshot_job_result::DescribeDashboardSnapshotJobResultError>
    >{
        self.customize_middleware().await
    }
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn aws_account_id(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn set_aws_account_id(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The ID of the dashboard that you have started a snapshot job for.</p>
    pub fn dashboard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.dashboard_id(input.into());
        self
    }
    /// <p>The ID of the dashboard that you have started a snapshot job for.</p>
    pub fn set_dashboard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_dashboard_id(input);
        self
    }
    /// <p>The ID of the job to be described. The job ID is set when you start a new job with a <code>StartDashboardSnapshotJob</code> API call.</p>
    pub fn snapshot_job_id(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.snapshot_job_id(input.into());
        self
    }
    /// <p>The ID of the job to be described. The job ID is set when you start a new job with a <code>StartDashboardSnapshotJob</code> API call.</p>
    pub fn set_snapshot_job_id(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_snapshot_job_id(input);
        self
    }
}
