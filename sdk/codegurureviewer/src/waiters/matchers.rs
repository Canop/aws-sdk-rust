// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"CodeReview.State","expected":"Completed","comparator":"stringEquals"}}
pub(crate) fn match_describe_code_review_8cc67a35a671faf67(
    _result: ::std::result::Result<
        &crate::operation::describe_code_review::DescribeCodeReviewOutput,
        &crate::operation::describe_code_review::DescribeCodeReviewError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_code_review::DescribeCodeReviewOutput,
    ) -> ::std::option::Option<&'a crate::types::JobState> {
        let _fld_1 = _output.code_review.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Completed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"CodeReview.State","expected":"Failed","comparator":"stringEquals"}}
pub(crate) fn match_describe_code_review_4894d33e32d128712(
    _result: ::std::result::Result<
        &crate::operation::describe_code_review::DescribeCodeReviewOutput,
        &crate::operation::describe_code_review::DescribeCodeReviewError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_code_review::DescribeCodeReviewOutput,
    ) -> ::std::option::Option<&'a crate::types::JobState> {
        let _fld_1 = _output.code_review.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Failed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"CodeReview.State","expected":"Pending","comparator":"stringEquals"}}
pub(crate) fn match_describe_code_review_c1d64cafde514b1da(
    _result: ::std::result::Result<
        &crate::operation::describe_code_review::DescribeCodeReviewOutput,
        &crate::operation::describe_code_review::DescribeCodeReviewError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_code_review::DescribeCodeReviewOutput,
    ) -> ::std::option::Option<&'a crate::types::JobState> {
        let _fld_1 = _output.code_review.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Pending";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"RepositoryAssociation.State","expected":"Associated","comparator":"stringEquals"}}
pub(crate) fn match_describe_repository_association_f86da7ef7700140fc(
    _result: ::std::result::Result<
        &crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput,
        &crate::operation::describe_repository_association::DescribeRepositoryAssociationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput,
    ) -> ::std::option::Option<&'a crate::types::RepositoryAssociationState> {
        let _fld_1 = _output.repository_association.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Associated";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"RepositoryAssociation.State","expected":"Failed","comparator":"stringEquals"}}
pub(crate) fn match_describe_repository_association_3d6a529a98c9bf643(
    _result: ::std::result::Result<
        &crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput,
        &crate::operation::describe_repository_association::DescribeRepositoryAssociationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput,
    ) -> ::std::option::Option<&'a crate::types::RepositoryAssociationState> {
        let _fld_1 = _output.repository_association.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Failed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"RepositoryAssociation.State","expected":"Associating","comparator":"stringEquals"}}
pub(crate) fn match_describe_repository_association_6442bebcdc096353d(
    _result: ::std::result::Result<
        &crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput,
        &crate::operation::describe_repository_association::DescribeRepositoryAssociationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput,
    ) -> ::std::option::Option<&'a crate::types::RepositoryAssociationState> {
        let _fld_1 = _output.repository_association.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Associating";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
