// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_phone_number_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::request_phone_number::RequestPhoneNumberInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("IsoCountryCode").string(input.iso_country_code.as_str());
    }
    {
        object.key("MessageType").string(input.message_type.as_str());
    }
    {
        let mut array_1 = object.key("NumberCapabilities").start_array();
        for item_2 in &input.number_capabilities {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    {
        object.key("NumberType").string(input.number_type.as_str());
    }
    if let Some(var_3) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.pool_id {
        object.key("PoolId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.registration_id {
        object.key("RegistrationId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.deletion_protection_enabled {
        object.key("DeletionProtectionEnabled").boolean(*var_6);
    }
    if let Some(var_7) = &input.tags {
        let mut array_8 = object.key("Tags").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.client_token {
        object.key("ClientToken").string(var_11.as_str());
    }
    Ok(())
}
