// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_text_message_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_text_message::SendTextMessageInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("DestinationPhoneNumber").string(input.destination_phone_number.as_str());
    }
    if let Some(var_1) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_1.as_str());
    }
    if let Some(var_2) = &input.message_body {
        object.key("MessageBody").string(var_2.as_str());
    }
    if let Some(var_3) = &input.message_type {
        object.key("MessageType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.keyword {
        object.key("Keyword").string(var_4.as_str());
    }
    if let Some(var_5) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.max_price {
        object.key("MaxPrice").string(var_6.as_str());
    }
    if let Some(var_7) = &input.time_to_live {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.context {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Context").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.destination_country_parameters {
        #[allow(unused_mut)]
        let mut object_13 = object.key("DestinationCountryParameters").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    Ok(())
}
