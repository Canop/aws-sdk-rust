// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_event_destination_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_event_destination::CreateEventDestinationInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("ConfigurationSetName").string(input.configuration_set_name.as_str());
    }
    {
        object.key("EventDestinationName").string(input.event_destination_name.as_str());
    }
    {
        let mut array_1 = object.key("MatchingEventTypes").start_array();
        for item_2 in &input.matching_event_types {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.cloud_watch_logs_destination {
        #[allow(unused_mut)]
        let mut object_4 = object.key("CloudWatchLogsDestination").start_object();
        crate::protocol_serde::shape_cloud_watch_logs_destination::ser_cloud_watch_logs_destination(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.kinesis_firehose_destination {
        #[allow(unused_mut)]
        let mut object_6 = object.key("KinesisFirehoseDestination").start_object();
        crate::protocol_serde::shape_kinesis_firehose_destination::ser_kinesis_firehose_destination(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.sns_destination {
        #[allow(unused_mut)]
        let mut object_8 = object.key("SnsDestination").start_object();
        crate::protocol_serde::shape_sns_destination::ser_sns_destination(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.client_token {
        object.key("ClientToken").string(var_9.as_str());
    }
    Ok(())
}
