// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_register_application_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::register_application::RegisterApplicationInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("ApplicationId").string(input.application_id.as_str());
    }
    {
        object.key("ApplicationType").string(input.application_type.as_str());
    }
    {
        let mut array_1 = object.key("Credentials").start_array();
        for item_2 in &input.credentials {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_application_credential::ser_application_credential(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    if let Some(var_4) = &input.database_arn {
        object.key("DatabaseArn").string(var_4.as_str());
    }
    {
        let mut array_5 = object.key("Instances").start_array();
        for item_6 in &input.instances {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.sap_instance_number {
        object.key("SapInstanceNumber").string(var_7.as_str());
    }
    if let Some(var_8) = &input.sid {
        object.key("Sid").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
