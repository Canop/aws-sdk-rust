// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StopApplication`](crate::operation::stop_application::builders::StopApplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::application_id) / [`set_application_id(Option<String>)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::set_application_id):<br>required: **true**<br><p>The ID of the application.</p><br>
    ///   - [`stop_connected_entity(ConnectedEntityType)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::stop_connected_entity) / [`set_stop_connected_entity(Option<ConnectedEntityType>)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::set_stop_connected_entity):<br>required: **false**<br><p>Specify the <code>ConnectedEntityType</code>. Accepted type is <code>DBMS</code>.</p> <p>If this parameter is included, the connected DBMS (Database Management System) will be stopped.</p><br>
    ///   - [`include_ec2_instance_shutdown(bool)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::include_ec2_instance_shutdown) / [`set_include_ec2_instance_shutdown(Option<bool>)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::set_include_ec2_instance_shutdown):<br>required: **false**<br><p>Boolean. If included and if set to <code>True</code>, the StopApplication operation will shut down the associated Amazon EC2 instance in addition to the application.</p><br>
    /// - On success, responds with [`StopApplicationOutput`](crate::operation::stop_application::StopApplicationOutput) with field(s):
    ///   - [`operation_id(Option<String>)`](crate::operation::stop_application::StopApplicationOutput::operation_id): <p>The ID of the operation.</p>
    /// - On failure, responds with [`SdkError<StopApplicationError>`](crate::operation::stop_application::StopApplicationError)
    pub fn stop_application(&self) -> crate::operation::stop_application::builders::StopApplicationFluentBuilder {
        crate::operation::stop_application::builders::StopApplicationFluentBuilder::new(self.handle.clone())
    }
}
