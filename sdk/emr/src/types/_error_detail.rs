// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A tuple that provides information about an error that caused a cluster to terminate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ErrorDetail {
    /// <p>The name or code that's associated with the error.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>A list of key value pairs that provide contextual information to explain why the error may have occured.</p>
    #[doc(hidden)]
    pub error_data: std::option::Option<
        std::vec::Vec<std::collections::HashMap<std::string::String, std::string::String>>,
    >,
    /// <p>A message describing the error that occured.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl ErrorDetail {
    /// <p>The name or code that's associated with the error.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>A list of key value pairs that provide contextual information to explain why the error may have occured.</p>
    pub fn error_data(
        &self,
    ) -> std::option::Option<&[std::collections::HashMap<std::string::String, std::string::String>]>
    {
        self.error_data.as_deref()
    }
    /// <p>A message describing the error that occured.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl ErrorDetail {
    /// Creates a new builder-style object to manufacture [`ErrorDetail`](crate::types::ErrorDetail).
    pub fn builder() -> crate::types::builders::ErrorDetailBuilder {
        crate::types::builders::ErrorDetailBuilder::default()
    }
}

/// A builder for [`ErrorDetail`](crate::types::ErrorDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ErrorDetailBuilder {
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) error_data: std::option::Option<
        std::vec::Vec<std::collections::HashMap<std::string::String, std::string::String>>,
    >,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl ErrorDetailBuilder {
    /// <p>The name or code that's associated with the error.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>The name or code that's associated with the error.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// Appends an item to `error_data`.
    ///
    /// To override the contents of this collection use [`set_error_data`](Self::set_error_data).
    ///
    /// <p>A list of key value pairs that provide contextual information to explain why the error may have occured.</p>
    pub fn error_data(
        mut self,
        input: std::collections::HashMap<std::string::String, std::string::String>,
    ) -> Self {
        let mut v = self.error_data.unwrap_or_default();
        v.push(input);
        self.error_data = Some(v);
        self
    }
    /// <p>A list of key value pairs that provide contextual information to explain why the error may have occured.</p>
    pub fn set_error_data(
        mut self,
        input: std::option::Option<
            std::vec::Vec<std::collections::HashMap<std::string::String, std::string::String>>,
        >,
    ) -> Self {
        self.error_data = input;
        self
    }
    /// <p>A message describing the error that occured.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>A message describing the error that occured.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ErrorDetail`](crate::types::ErrorDetail).
    pub fn build(self) -> crate::types::ErrorDetail {
        crate::types::ErrorDetail {
            error_code: self.error_code,
            error_data: self.error_data,
            error_message: self.error_message,
        }
    }
}
