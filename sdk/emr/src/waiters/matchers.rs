// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"Cluster.Status.State","expected":"RUNNING","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_7197af0094d90f217(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterState> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "RUNNING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Cluster.Status.State","expected":"WAITING","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_5e3cda8e30e4f9cce(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterState> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "WAITING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Cluster.Status.State","expected":"TERMINATING","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_d92e7a278f8dc25c1(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterState> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "TERMINATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Cluster.Status.State","expected":"TERMINATED","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_38c4d73bbb3ebbe27(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterState> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "TERMINATED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Cluster.Status.State","expected":"TERMINATED_WITH_ERRORS","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_b33b33a717477077a(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterState> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "TERMINATED_WITH_ERRORS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Step.Status.State","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_describe_step_edbabdbf9fa701e84(
    _result: ::std::result::Result<&crate::operation::describe_step::DescribeStepOutput, &crate::operation::describe_step::DescribeStepError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::describe_step::DescribeStepOutput) -> ::std::option::Option<&'a crate::types::StepState> {
        let _fld_1 = _output.step.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Step.Status.State","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_step_c69c886041849de4f(
    _result: ::std::result::Result<&crate::operation::describe_step::DescribeStepOutput, &crate::operation::describe_step::DescribeStepError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::describe_step::DescribeStepOutput) -> ::std::option::Option<&'a crate::types::StepState> {
        let _fld_1 = _output.step.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Step.Status.State","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_describe_step_be29442bd87567b89(
    _result: ::std::result::Result<&crate::operation::describe_step::DescribeStepOutput, &crate::operation::describe_step::DescribeStepError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::describe_step::DescribeStepOutput) -> ::std::option::Option<&'a crate::types::StepState> {
        let _fld_1 = _output.step.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        let _fld_3 = _fld_2.state.as_ref()?;
        ::std::option::Option::Some(_fld_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
