// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_worker_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_worker::CreateWorkerInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.additional_fixed_properties {
        object.key("additionalFixedProperties").string(var_1.as_str());
    }
    if let Some(var_2) = &input.additional_transient_properties {
        object.key("additionalTransientProperties").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    {
        object.key("fleet").string(input.fleet.as_str());
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_4) = &input.orientation {
        #[allow(unused_mut)]
        let mut object_5 = object.key("orientation").start_object();
        crate::protocol_serde::shape_orientation::ser_orientation(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.position {
        #[allow(unused_mut)]
        let mut object_7 = object.key("position").start_object();
        crate::protocol_serde::shape_position_coordinates::ser_position_coordinates(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.vendor_properties {
        #[allow(unused_mut)]
        let mut object_9 = object.key("vendorProperties").start_object();
        crate::protocol_serde::shape_vendor_properties::ser_vendor_properties(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
