// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWorkflowStepGroupInput {
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    pub workflow_id: ::std::string::String,
    /// <p>The name of the step group.</p>
    pub name: ::std::string::String,
    /// <p>The description of the step group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The next step group.</p>
    pub next: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The previous step group.</p>
    pub previous: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateWorkflowStepGroupInput {
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    pub fn workflow_id(&self) -> &str {
        use std::ops::Deref;
        self.workflow_id.deref()
    }
    /// <p>The name of the step group.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the step group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The next step group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.next.is_none()`.
    pub fn next(&self) -> &[::std::string::String] {
        self.next.as_deref().unwrap_or_default()
    }
    /// <p>The previous step group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.previous.is_none()`.
    pub fn previous(&self) -> &[::std::string::String] {
        self.previous.as_deref().unwrap_or_default()
    }
}
impl CreateWorkflowStepGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowStepGroupInput`](crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput).
    pub fn builder() -> crate::operation::create_workflow_step_group::builders::CreateWorkflowStepGroupInputBuilder {
        crate::operation::create_workflow_step_group::builders::CreateWorkflowStepGroupInputBuilder::default()
    }
}

/// A builder for [`CreateWorkflowStepGroupInput`](crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateWorkflowStepGroupInputBuilder {
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) next: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) previous: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateWorkflowStepGroupInputBuilder {
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The name of the step group.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the step group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the step group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the step group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the step group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `next`.
    ///
    /// To override the contents of this collection use [`set_next`](Self::set_next).
    ///
    /// <p>The next step group.</p>
    pub fn next(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.next.unwrap_or_default();
        v.push(input.into());
        self.next = ::std::option::Option::Some(v);
        self
    }
    /// <p>The next step group.</p>
    pub fn set_next(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.next = input;
        self
    }
    /// <p>The next step group.</p>
    pub fn get_next(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.next
    }
    /// Appends an item to `previous`.
    ///
    /// To override the contents of this collection use [`set_previous`](Self::set_previous).
    ///
    /// <p>The previous step group.</p>
    pub fn previous(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.previous.unwrap_or_default();
        v.push(input.into());
        self.previous = ::std::option::Option::Some(v);
        self
    }
    /// <p>The previous step group.</p>
    pub fn set_previous(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.previous = input;
        self
    }
    /// <p>The previous step group.</p>
    pub fn get_previous(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.previous
    }
    /// Consumes the builder and constructs a [`CreateWorkflowStepGroupInput`](crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`workflow_id`](crate::operation::create_workflow_step_group::builders::CreateWorkflowStepGroupInputBuilder::workflow_id)
    /// - [`name`](crate::operation::create_workflow_step_group::builders::CreateWorkflowStepGroupInputBuilder::name)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput,
        ::aws_smithy_http::operation::error::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput {
            workflow_id: self.workflow_id.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "workflow_id",
                    "workflow_id was not specified but it is required when building CreateWorkflowStepGroupInput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CreateWorkflowStepGroupInput",
                )
            })?,
            description: self.description,
            next: self.next,
            previous: self.previous,
        })
    }
}
