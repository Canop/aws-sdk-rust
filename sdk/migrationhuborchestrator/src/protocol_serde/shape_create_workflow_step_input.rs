// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_workflow_step_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_workflow_step::CreateWorkflowStepInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_2) = &input.next {
        let mut array_3 = object.key("next").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.outputs {
        let mut array_6 = object.key("outputs").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_workflow_step_output::ser_workflow_step_output(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.previous {
        let mut array_10 = object.key("previous").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    {
        object.key("stepActionType").string(input.step_action_type.as_str());
    }
    {
        object.key("stepGroupId").string(input.step_group_id.as_str());
    }
    if let Some(var_12) = &input.step_target {
        let mut array_13 = object.key("stepTarget").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    {
        object.key("workflowId").string(input.workflow_id.as_str());
    }
    if let Some(var_15) = &input.workflow_step_automation_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("workflowStepAutomationConfiguration").start_object();
        crate::protocol_serde::shape_workflow_step_automation_configuration::ser_workflow_step_automation_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
