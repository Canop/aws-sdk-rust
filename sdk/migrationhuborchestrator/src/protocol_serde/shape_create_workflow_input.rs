// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_workflow_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_workflow::CreateWorkflowInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object
            .key("applicationConfigurationId")
            .string(input.application_configuration_id.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    {
        #[allow(unused_mut)]
        let mut object_2 = object.key("inputParameters").start_object();
        for (key_3, value_4) in &input.input_parameters {
            {
                #[allow(unused_mut)]
                let mut object_5 = object_2.key(key_3.as_str()).start_object();
                crate::protocol_serde::shape_step_input::ser_step_input(&mut object_5, value_4)?;
                object_5.finish();
            }
        }
        object_2.finish();
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_6) = &input.step_targets {
        let mut array_7 = object.key("stepTargets").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    {
        object.key("templateId").string(input.template_id.as_str());
    }
    Ok(())
}
