// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Result item returned from a knowledge base retrieval.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct KnowledgeBaseRetrievalResult {
    /// Content of a retrieval result.
    pub content: ::std::option::Option<crate::types::RetrievalResultContent>,
    /// The source location of a retrieval result.
    pub location: ::std::option::Option<crate::types::RetrievalResultLocation>,
    /// The relevance score of a result.
    pub score: ::std::option::Option<f64>,
}
impl KnowledgeBaseRetrievalResult {
    /// Content of a retrieval result.
    pub fn content(&self) -> ::std::option::Option<&crate::types::RetrievalResultContent> {
        self.content.as_ref()
    }
    /// The source location of a retrieval result.
    pub fn location(&self) -> ::std::option::Option<&crate::types::RetrievalResultLocation> {
        self.location.as_ref()
    }
    /// The relevance score of a result.
    pub fn score(&self) -> ::std::option::Option<f64> {
        self.score
    }
}
impl ::std::fmt::Debug for KnowledgeBaseRetrievalResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KnowledgeBaseRetrievalResult");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.field("score", &self.score);
        formatter.finish()
    }
}
impl KnowledgeBaseRetrievalResult {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseRetrievalResult`](crate::types::KnowledgeBaseRetrievalResult).
    pub fn builder() -> crate::types::builders::KnowledgeBaseRetrievalResultBuilder {
        crate::types::builders::KnowledgeBaseRetrievalResultBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseRetrievalResult`](crate::types::KnowledgeBaseRetrievalResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct KnowledgeBaseRetrievalResultBuilder {
    pub(crate) content: ::std::option::Option<crate::types::RetrievalResultContent>,
    pub(crate) location: ::std::option::Option<crate::types::RetrievalResultLocation>,
    pub(crate) score: ::std::option::Option<f64>,
}
impl KnowledgeBaseRetrievalResultBuilder {
    /// Content of a retrieval result.
    /// This field is required.
    pub fn content(mut self, input: crate::types::RetrievalResultContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// Content of a retrieval result.
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::RetrievalResultContent>) -> Self {
        self.content = input;
        self
    }
    /// Content of a retrieval result.
    pub fn get_content(&self) -> &::std::option::Option<crate::types::RetrievalResultContent> {
        &self.content
    }
    /// The source location of a retrieval result.
    pub fn location(mut self, input: crate::types::RetrievalResultLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// The source location of a retrieval result.
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultLocation>) -> Self {
        self.location = input;
        self
    }
    /// The source location of a retrieval result.
    pub fn get_location(&self) -> &::std::option::Option<crate::types::RetrievalResultLocation> {
        &self.location
    }
    /// The relevance score of a result.
    pub fn score(mut self, input: f64) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// The relevance score of a result.
    pub fn set_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// The relevance score of a result.
    pub fn get_score(&self) -> &::std::option::Option<f64> {
        &self.score
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseRetrievalResult`](crate::types::KnowledgeBaseRetrievalResult).
    pub fn build(self) -> crate::types::KnowledgeBaseRetrievalResult {
        crate::types::KnowledgeBaseRetrievalResult {
            content: self.content,
            location: self.location,
            score: self.score,
        }
    }
}
impl ::std::fmt::Debug for KnowledgeBaseRetrievalResultBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KnowledgeBaseRetrievalResultBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.field("score", &self.score);
        formatter.finish()
    }
}
