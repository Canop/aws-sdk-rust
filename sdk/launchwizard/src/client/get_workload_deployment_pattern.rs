// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetWorkloadDeploymentPattern`](crate::operation::get_workload_deployment_pattern::builders::GetWorkloadDeploymentPatternFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_name(impl Into<String>)`](crate::operation::get_workload_deployment_pattern::builders::GetWorkloadDeploymentPatternFluentBuilder::workload_name) / [`set_workload_name(Option<String>)`](crate::operation::get_workload_deployment_pattern::builders::GetWorkloadDeploymentPatternFluentBuilder::set_workload_name):<br>required: **true**<br><p>The name of the workload.</p><br>
    ///   - [`deployment_pattern_name(impl Into<String>)`](crate::operation::get_workload_deployment_pattern::builders::GetWorkloadDeploymentPatternFluentBuilder::deployment_pattern_name) / [`set_deployment_pattern_name(Option<String>)`](crate::operation::get_workload_deployment_pattern::builders::GetWorkloadDeploymentPatternFluentBuilder::set_deployment_pattern_name):<br>required: **true**<br><p>The name of the deployment pattern.</p><br>
    /// - On success, responds with [`GetWorkloadDeploymentPatternOutput`](crate::operation::get_workload_deployment_pattern::GetWorkloadDeploymentPatternOutput) with field(s):
    ///   - [`workload_deployment_pattern(Option<WorkloadDeploymentPatternData>)`](crate::operation::get_workload_deployment_pattern::GetWorkloadDeploymentPatternOutput::workload_deployment_pattern): <p>Details about the workload deployment pattern.</p>
    /// - On failure, responds with [`SdkError<GetWorkloadDeploymentPatternError>`](crate::operation::get_workload_deployment_pattern::GetWorkloadDeploymentPatternError)
    pub fn get_workload_deployment_pattern(
        &self,
    ) -> crate::operation::get_workload_deployment_pattern::builders::GetWorkloadDeploymentPatternFluentBuilder {
        crate::operation::get_workload_deployment_pattern::builders::GetWorkloadDeploymentPatternFluentBuilder::new(self.handle.clone())
    }
}
