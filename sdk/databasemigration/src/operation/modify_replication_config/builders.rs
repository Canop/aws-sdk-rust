// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_replication_config::_modify_replication_config_output::ModifyReplicationConfigOutputBuilder;

pub use crate::operation::modify_replication_config::_modify_replication_config_input::ModifyReplicationConfigInputBuilder;

impl ModifyReplicationConfigInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_replication_config::ModifyReplicationConfigOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::modify_replication_config::ModifyReplicationConfigError,
            ::aws_smithy_http::operation::Response,
        >,
    > {
        let mut fluent_builder = client.modify_replication_config();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyReplicationConfig`.
///
/// <p>Modifies an existing DMS Serverless replication configuration that you can use to start a replication. This command includes input validation and logic to check the state of any replication that uses this configuration. You can only modify a replication configuration before any replication that uses it has started. As soon as you have initially started a replication with a given configuiration, you can't modify that configuration, even if you stop it.</p>
/// <p>Other run statuses that allow you to run this command include FAILED and CREATED. A provisioning state that allows you to run this command is FAILED_PROVISION.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyReplicationConfigFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::modify_replication_config::builders::ModifyReplicationConfigInputBuilder,
}
impl ModifyReplicationConfigFluentBuilder {
    /// Creates a new `ModifyReplicationConfig`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn customize_middleware(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_replication_config::ModifyReplicationConfig,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::modify_replication_config::ModifyReplicationConfigError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn send_middleware(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_replication_config::ModifyReplicationConfigOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::modify_replication_config::ModifyReplicationConfigError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_replication_config::ModifyReplicationConfigOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::modify_replication_config::ModifyReplicationConfigError,
        >,
    > {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_replication_config::ModifyReplicationConfig,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::modify_replication_config::ModifyReplicationConfigError,
        >,
    > {
        self.customize_middleware().await
    }
    /// <p>The Amazon Resource Name of the replication to modify.</p>
    pub fn replication_config_arn(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.replication_config_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the replication to modify.</p>
    pub fn set_replication_config_arn(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_replication_config_arn(input);
        self
    }
    /// <p>The new replication config to apply to the replication.</p>
    pub fn replication_config_identifier(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.replication_config_identifier(input.into());
        self
    }
    /// <p>The new replication config to apply to the replication.</p>
    pub fn set_replication_config_identifier(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_replication_config_identifier(input);
        self
    }
    /// <p>The type of replication.</p>
    pub fn replication_type(mut self, input: crate::types::MigrationTypeValue) -> Self {
        self.inner = self.inner.replication_type(input);
        self
    }
    /// <p>The type of replication.</p>
    pub fn set_replication_type(
        mut self,
        input: ::std::option::Option<crate::types::MigrationTypeValue>,
    ) -> Self {
        self.inner = self.inner.set_replication_type(input);
        self
    }
    /// <p>Table mappings specified in the replication.</p>
    pub fn table_mappings(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.table_mappings(input.into());
        self
    }
    /// <p>Table mappings specified in the replication.</p>
    pub fn set_table_mappings(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_table_mappings(input);
        self
    }
    /// <p>The settings for the replication.</p>
    pub fn replication_settings(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.replication_settings(input.into());
        self
    }
    /// <p>The settings for the replication.</p>
    pub fn set_replication_settings(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_replication_settings(input);
        self
    }
    /// <p>Additional settings for the replication.</p>
    pub fn supplemental_settings(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.supplemental_settings(input.into());
        self
    }
    /// <p>Additional settings for the replication.</p>
    pub fn set_supplemental_settings(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_supplemental_settings(input);
        self
    }
    /// <p>Configuration parameters for provisioning an DMS Serverless replication.</p>
    pub fn compute_config(mut self, input: crate::types::ComputeConfig) -> Self {
        self.inner = self.inner.compute_config(input);
        self
    }
    /// <p>Configuration parameters for provisioning an DMS Serverless replication.</p>
    pub fn set_compute_config(
        mut self,
        input: ::std::option::Option<crate::types::ComputeConfig>,
    ) -> Self {
        self.inner = self.inner.set_compute_config(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source endpoint for this DMS serverless replication configuration.</p>
    pub fn source_endpoint_arn(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.source_endpoint_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source endpoint for this DMS serverless replication configuration.</p>
    pub fn set_source_endpoint_arn(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_endpoint_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target endpoint for this DMS serverless replication configuration.</p>
    pub fn target_endpoint_arn(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.target_endpoint_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target endpoint for this DMS serverless replication configuration.</p>
    pub fn set_target_endpoint_arn(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_endpoint_arn(input);
        self
    }
}
