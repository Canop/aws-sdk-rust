// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_test_case_output_output_correct_errors(
    mut builder: crate::operation::create_test_case::builders::CreateTestCaseOutputBuilder,
) -> crate::operation::create_test_case::builders::CreateTestCaseOutputBuilder {
    if builder.test_case_id.is_none() {
        builder.test_case_id = Some(Default::default())
    }
    if builder.test_case_version.is_none() {
        builder.test_case_version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_test_configuration_output_output_correct_errors(
    mut builder: crate::operation::create_test_configuration::builders::CreateTestConfigurationOutputBuilder,
) -> crate::operation::create_test_configuration::builders::CreateTestConfigurationOutputBuilder {
    if builder.test_configuration_id.is_none() {
        builder.test_configuration_id = Some(Default::default())
    }
    if builder.test_configuration_version.is_none() {
        builder.test_configuration_version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_test_suite_output_output_correct_errors(
    mut builder: crate::operation::create_test_suite::builders::CreateTestSuiteOutputBuilder,
) -> crate::operation::create_test_suite::builders::CreateTestSuiteOutputBuilder {
    if builder.test_suite_id.is_none() {
        builder.test_suite_id = Some(Default::default())
    }
    if builder.test_suite_version.is_none() {
        builder.test_suite_version = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_test_case_output_output_correct_errors(
    mut builder: crate::operation::get_test_case::builders::GetTestCaseOutputBuilder,
) -> crate::operation::get_test_case::builders::GetTestCaseOutputBuilder {
    if builder.test_case_id.is_none() {
        builder.test_case_id = Some(Default::default())
    }
    if builder.test_case_arn.is_none() {
        builder.test_case_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.latest_version.is_none() {
        builder.latest_version = {
            let builder = crate::types::builders::TestCaseLatestVersionBuilder::default();
            crate::serde_util::test_case_latest_version_correct_errors(builder).build().ok()
        }
    }
    if builder.test_case_version.is_none() {
        builder.test_case_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestCaseLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.steps.is_none() {
        builder.steps = Some(Default::default())
    }
    builder
}

pub(crate) fn get_test_configuration_output_output_correct_errors(
    mut builder: crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder,
) -> crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder {
    if builder.test_configuration_id.is_none() {
        builder.test_configuration_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.test_configuration_arn.is_none() {
        builder.test_configuration_arn = Some(Default::default())
    }
    if builder.latest_version.is_none() {
        builder.latest_version = {
            let builder = crate::types::builders::TestConfigurationLatestVersionBuilder::default();
            crate::serde_util::test_configuration_latest_version_correct_errors(builder).build().ok()
        }
    }
    if builder.test_configuration_version.is_none() {
        builder.test_configuration_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestConfigurationLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn get_test_run_step_output_output_correct_errors(
    mut builder: crate::operation::get_test_run_step::builders::GetTestRunStepOutputBuilder,
) -> crate::operation::get_test_run_step::builders::GetTestRunStepOutputBuilder {
    if builder.step_name.is_none() {
        builder.step_name = Some(Default::default())
    }
    if builder.test_run_id.is_none() {
        builder.test_run_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StepRunStatus>().ok()
    }
    if builder.run_start_time.is_none() {
        builder.run_start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_test_suite_output_output_correct_errors(
    mut builder: crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder,
) -> crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder {
    if builder.test_suite_id.is_none() {
        builder.test_suite_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.latest_version.is_none() {
        builder.latest_version = {
            let builder = crate::types::builders::TestSuiteLatestVersionBuilder::default();
            crate::serde_util::test_suite_latest_version_correct_errors(builder).build().ok()
        }
    }
    if builder.test_suite_version.is_none() {
        builder.test_suite_version = Some(Default::default())
    }
    if builder.test_suite_arn.is_none() {
        builder.test_suite_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.before_steps.is_none() {
        builder.before_steps = Some(Default::default())
    }
    if builder.after_steps.is_none() {
        builder.after_steps = Some(Default::default())
    }
    if builder.test_cases.is_none() {
        builder.test_cases = Some(crate::types::TestCases::Unknown)
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_test_cases_output_output_correct_errors(
    mut builder: crate::operation::list_test_cases::builders::ListTestCasesOutputBuilder,
) -> crate::operation::list_test_cases::builders::ListTestCasesOutputBuilder {
    if builder.test_cases.is_none() {
        builder.test_cases = Some(Default::default())
    }
    builder
}

pub(crate) fn list_test_configurations_output_output_correct_errors(
    mut builder: crate::operation::list_test_configurations::builders::ListTestConfigurationsOutputBuilder,
) -> crate::operation::list_test_configurations::builders::ListTestConfigurationsOutputBuilder {
    if builder.test_configurations.is_none() {
        builder.test_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_test_run_steps_output_output_correct_errors(
    mut builder: crate::operation::list_test_run_steps::builders::ListTestRunStepsOutputBuilder,
) -> crate::operation::list_test_run_steps::builders::ListTestRunStepsOutputBuilder {
    if builder.test_run_steps.is_none() {
        builder.test_run_steps = Some(Default::default())
    }
    builder
}

pub(crate) fn list_test_run_test_cases_output_output_correct_errors(
    mut builder: crate::operation::list_test_run_test_cases::builders::ListTestRunTestCasesOutputBuilder,
) -> crate::operation::list_test_run_test_cases::builders::ListTestRunTestCasesOutputBuilder {
    if builder.test_run_test_cases.is_none() {
        builder.test_run_test_cases = Some(Default::default())
    }
    builder
}

pub(crate) fn list_test_runs_output_output_correct_errors(
    mut builder: crate::operation::list_test_runs::builders::ListTestRunsOutputBuilder,
) -> crate::operation::list_test_runs::builders::ListTestRunsOutputBuilder {
    if builder.test_runs.is_none() {
        builder.test_runs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_test_suites_output_output_correct_errors(
    mut builder: crate::operation::list_test_suites::builders::ListTestSuitesOutputBuilder,
) -> crate::operation::list_test_suites::builders::ListTestSuitesOutputBuilder {
    if builder.test_suites.is_none() {
        builder.test_suites = Some(Default::default())
    }
    builder
}

pub(crate) fn start_test_run_output_output_correct_errors(
    mut builder: crate::operation::start_test_run::builders::StartTestRunOutputBuilder,
) -> crate::operation::start_test_run::builders::StartTestRunOutputBuilder {
    if builder.test_run_id.is_none() {
        builder.test_run_id = Some(Default::default())
    }
    if builder.test_run_status.is_none() {
        builder.test_run_status = "no value was set".parse::<crate::types::TestRunStatus>().ok()
    }
    builder
}

pub(crate) fn update_test_case_output_output_correct_errors(
    mut builder: crate::operation::update_test_case::builders::UpdateTestCaseOutputBuilder,
) -> crate::operation::update_test_case::builders::UpdateTestCaseOutputBuilder {
    if builder.test_case_id.is_none() {
        builder.test_case_id = Some(Default::default())
    }
    if builder.test_case_version.is_none() {
        builder.test_case_version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_test_configuration_output_output_correct_errors(
    mut builder: crate::operation::update_test_configuration::builders::UpdateTestConfigurationOutputBuilder,
) -> crate::operation::update_test_configuration::builders::UpdateTestConfigurationOutputBuilder {
    if builder.test_configuration_id.is_none() {
        builder.test_configuration_id = Some(Default::default())
    }
    if builder.test_configuration_version.is_none() {
        builder.test_configuration_version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_test_suite_output_output_correct_errors(
    mut builder: crate::operation::update_test_suite::builders::UpdateTestSuiteOutputBuilder,
) -> crate::operation::update_test_suite::builders::UpdateTestSuiteOutputBuilder {
    if builder.test_suite_id.is_none() {
        builder.test_suite_id = Some(Default::default())
    }
    builder
}

pub(crate) fn test_case_latest_version_correct_errors(
    mut builder: crate::types::builders::TestCaseLatestVersionBuilder,
) -> crate::types::builders::TestCaseLatestVersionBuilder {
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestCaseLifecycle>().ok()
    }
    builder
}

pub(crate) fn test_configuration_latest_version_correct_errors(
    mut builder: crate::types::builders::TestConfigurationLatestVersionBuilder,
) -> crate::types::builders::TestConfigurationLatestVersionBuilder {
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestConfigurationLifecycle>().ok()
    }
    builder
}

pub(crate) fn test_suite_latest_version_correct_errors(
    mut builder: crate::types::builders::TestSuiteLatestVersionBuilder,
) -> crate::types::builders::TestSuiteLatestVersionBuilder {
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestSuiteLifecycle>().ok()
    }
    builder
}

pub(crate) fn compare_action_summary_correct_errors(
    mut builder: crate::types::builders::CompareActionSummaryBuilder,
) -> crate::types::builders::CompareActionSummaryBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(crate::types::File::Unknown)
    }
    builder
}

pub(crate) fn resource_correct_errors(mut builder: crate::types::builders::ResourceBuilder) -> crate::types::builders::ResourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(crate::types::ResourceType::Unknown)
    }
    builder
}

pub(crate) fn step_correct_errors(mut builder: crate::types::builders::StepBuilder) -> crate::types::builders::StepBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = Some(crate::types::StepAction::Unknown)
    }
    builder
}

pub(crate) fn test_case_run_summary_correct_errors(
    mut builder: crate::types::builders::TestCaseRunSummaryBuilder,
) -> crate::types::builders::TestCaseRunSummaryBuilder {
    if builder.test_case_id.is_none() {
        builder.test_case_id = Some(Default::default())
    }
    if builder.test_case_version.is_none() {
        builder.test_case_version = Some(Default::default())
    }
    if builder.test_run_id.is_none() {
        builder.test_run_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestCaseRunStatus>().ok()
    }
    if builder.run_start_time.is_none() {
        builder.run_start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn test_case_summary_correct_errors(
    mut builder: crate::types::builders::TestCaseSummaryBuilder,
) -> crate::types::builders::TestCaseSummaryBuilder {
    if builder.test_case_id.is_none() {
        builder.test_case_id = Some(Default::default())
    }
    if builder.test_case_arn.is_none() {
        builder.test_case_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.latest_version.is_none() {
        builder.latest_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestCaseLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn test_configuration_summary_correct_errors(
    mut builder: crate::types::builders::TestConfigurationSummaryBuilder,
) -> crate::types::builders::TestConfigurationSummaryBuilder {
    if builder.test_configuration_id.is_none() {
        builder.test_configuration_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.latest_version.is_none() {
        builder.latest_version = Some(Default::default())
    }
    if builder.test_configuration_arn.is_none() {
        builder.test_configuration_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestConfigurationLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn test_run_step_summary_correct_errors(
    mut builder: crate::types::builders::TestRunStepSummaryBuilder,
) -> crate::types::builders::TestRunStepSummaryBuilder {
    if builder.step_name.is_none() {
        builder.step_name = Some(Default::default())
    }
    if builder.test_run_id.is_none() {
        builder.test_run_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StepRunStatus>().ok()
    }
    if builder.run_start_time.is_none() {
        builder.run_start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn test_run_summary_correct_errors(
    mut builder: crate::types::builders::TestRunSummaryBuilder,
) -> crate::types::builders::TestRunSummaryBuilder {
    if builder.test_run_id.is_none() {
        builder.test_run_id = Some(Default::default())
    }
    if builder.test_run_arn.is_none() {
        builder.test_run_arn = Some(Default::default())
    }
    if builder.test_suite_id.is_none() {
        builder.test_suite_id = Some(Default::default())
    }
    if builder.test_suite_version.is_none() {
        builder.test_suite_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestRunStatus>().ok()
    }
    if builder.run_start_time.is_none() {
        builder.run_start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn test_suite_summary_correct_errors(
    mut builder: crate::types::builders::TestSuiteSummaryBuilder,
) -> crate::types::builders::TestSuiteSummaryBuilder {
    if builder.test_suite_id.is_none() {
        builder.test_suite_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.latest_version.is_none() {
        builder.latest_version = Some(Default::default())
    }
    if builder.test_suite_arn.is_none() {
        builder.test_suite_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TestSuiteLifecycle>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_summary_correct_errors(mut builder: crate::types::builders::BatchSummaryBuilder) -> crate::types::builders::BatchSummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::BatchStepInputBuilder::default();
            crate::serde_util::batch_step_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn m2_managed_application_step_summary_correct_errors(
    mut builder: crate::types::builders::M2ManagedApplicationStepSummaryBuilder,
) -> crate::types::builders::M2ManagedApplicationStepSummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::M2ManagedApplicationStepInputBuilder::default();
            crate::serde_util::m2_managed_application_step_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn m2_non_managed_application_step_summary_correct_errors(
    mut builder: crate::types::builders::M2NonManagedApplicationStepSummaryBuilder,
) -> crate::types::builders::M2NonManagedApplicationStepSummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::M2NonManagedApplicationStepInputBuilder::default();
            crate::serde_util::m2_non_managed_application_step_input_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn tn3270_summary_correct_errors(
    mut builder: crate::types::builders::Tn3270SummaryBuilder,
) -> crate::types::builders::Tn3270SummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::Tn3270StepInputBuilder::default();
            Some(crate::serde_util::tn3270_step_input_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn batch_step_input_correct_errors(
    mut builder: crate::types::builders::BatchStepInputBuilder,
) -> crate::types::builders::BatchStepInputBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(crate::types::MainframeResourceSummary::Unknown)
    }
    if builder.batch_job_name.is_none() {
        builder.batch_job_name = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_formation_correct_errors(
    mut builder: crate::types::builders::CloudFormationBuilder,
) -> crate::types::builders::CloudFormationBuilder {
    if builder.template_location.is_none() {
        builder.template_location = Some(Default::default())
    }
    builder
}

pub(crate) fn compare_action_correct_errors(
    mut builder: crate::types::builders::CompareActionBuilder,
) -> crate::types::builders::CompareActionBuilder {
    if builder.input.is_none() {
        builder.input = Some(crate::types::Input::Unknown)
    }
    builder
}

pub(crate) fn create_cloud_formation_summary_correct_errors(
    mut builder: crate::types::builders::CreateCloudFormationSummaryBuilder,
) -> crate::types::builders::CreateCloudFormationSummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::CreateCloudFormationStepInputBuilder::default();
            crate::serde_util::create_cloud_formation_step_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_cloud_formation_summary_correct_errors(
    mut builder: crate::types::builders::DeleteCloudFormationSummaryBuilder,
) -> crate::types::builders::DeleteCloudFormationSummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::DeleteCloudFormationStepInputBuilder::default();
            crate::serde_util::delete_cloud_formation_step_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn m2_managed_application_correct_errors(
    mut builder: crate::types::builders::M2ManagedApplicationBuilder,
) -> crate::types::builders::M2ManagedApplicationBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::M2ManagedRuntime>().ok()
    }
    builder
}

pub(crate) fn m2_managed_application_step_input_correct_errors(
    mut builder: crate::types::builders::M2ManagedApplicationStepInputBuilder,
) -> crate::types::builders::M2ManagedApplicationStepInputBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = Some(Default::default())
    }
    if builder.action_type.is_none() {
        builder.action_type = "no value was set".parse::<crate::types::M2ManagedActionType>().ok()
    }
    builder
}

pub(crate) fn m2_non_managed_application_correct_errors(
    mut builder: crate::types::builders::M2NonManagedApplicationBuilder,
) -> crate::types::builders::M2NonManagedApplicationBuilder {
    if builder.vpc_endpoint_service_name.is_none() {
        builder.vpc_endpoint_service_name = Some(Default::default())
    }
    if builder.listener_port.is_none() {
        builder.listener_port = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::M2NonManagedRuntime>().ok()
    }
    builder
}

pub(crate) fn m2_non_managed_application_step_input_correct_errors(
    mut builder: crate::types::builders::M2NonManagedApplicationStepInputBuilder,
) -> crate::types::builders::M2NonManagedApplicationStepInputBuilder {
    if builder.vpc_endpoint_service_name.is_none() {
        builder.vpc_endpoint_service_name = Some(Default::default())
    }
    if builder.listener_port.is_none() {
        builder.listener_port = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::M2NonManagedRuntime>().ok()
    }
    if builder.action_type.is_none() {
        builder.action_type = "no value was set".parse::<crate::types::M2NonManagedActionType>().ok()
    }
    builder
}

pub(crate) fn mainframe_action_correct_errors(
    mut builder: crate::types::builders::MainframeActionBuilder,
) -> crate::types::builders::MainframeActionBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    if builder.action_type.is_none() {
        builder.action_type = Some(crate::types::MainframeActionType::Unknown)
    }
    builder
}

pub(crate) fn tn3270_step_input_correct_errors(
    mut builder: crate::types::builders::Tn3270StepInputBuilder,
) -> crate::types::builders::Tn3270StepInputBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(crate::types::MainframeResourceSummary::Unknown)
    }
    if builder.script.is_none() {
        builder.script = {
            let builder = crate::types::builders::ScriptSummaryBuilder::default();
            crate::serde_util::script_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn tn3270_step_output_correct_errors(
    mut builder: crate::types::builders::Tn3270StepOutputBuilder,
) -> crate::types::builders::Tn3270StepOutputBuilder {
    if builder.script_output_location.is_none() {
        builder.script_output_location = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_formation_action_correct_errors(
    mut builder: crate::types::builders::CloudFormationActionBuilder,
) -> crate::types::builders::CloudFormationActionBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn compare_data_sets_summary_correct_errors(
    mut builder: crate::types::builders::CompareDataSetsSummaryBuilder,
) -> crate::types::builders::CompareDataSetsSummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::CompareDataSetsStepInputBuilder::default();
            crate::serde_util::compare_data_sets_step_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn compare_database_cdc_summary_correct_errors(
    mut builder: crate::types::builders::CompareDatabaseCdcSummaryBuilder,
) -> crate::types::builders::CompareDatabaseCdcSummaryBuilder {
    if builder.step_input.is_none() {
        builder.step_input = {
            let builder = crate::types::builders::CompareDatabaseCdcStepInputBuilder::default();
            crate::serde_util::compare_database_cdc_step_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_cloud_formation_step_input_correct_errors(
    mut builder: crate::types::builders::CreateCloudFormationStepInputBuilder,
) -> crate::types::builders::CreateCloudFormationStepInputBuilder {
    if builder.template_location.is_none() {
        builder.template_location = Some(Default::default())
    }
    builder
}

pub(crate) fn create_cloud_formation_step_output_correct_errors(
    mut builder: crate::types::builders::CreateCloudFormationStepOutputBuilder,
) -> crate::types::builders::CreateCloudFormationStepOutputBuilder {
    if builder.stack_id.is_none() {
        builder.stack_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_cloud_formation_step_input_correct_errors(
    mut builder: crate::types::builders::DeleteCloudFormationStepInputBuilder,
) -> crate::types::builders::DeleteCloudFormationStepInputBuilder {
    if builder.stack_id.is_none() {
        builder.stack_id = Some(Default::default())
    }
    builder
}

pub(crate) fn m2_managed_application_action_correct_errors(
    mut builder: crate::types::builders::M2ManagedApplicationActionBuilder,
) -> crate::types::builders::M2ManagedApplicationActionBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    if builder.action_type.is_none() {
        builder.action_type = "no value was set".parse::<crate::types::M2ManagedActionType>().ok()
    }
    builder
}

pub(crate) fn m2_non_managed_application_action_correct_errors(
    mut builder: crate::types::builders::M2NonManagedApplicationActionBuilder,
) -> crate::types::builders::M2NonManagedApplicationActionBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    if builder.action_type.is_none() {
        builder.action_type = "no value was set".parse::<crate::types::M2NonManagedActionType>().ok()
    }
    builder
}

pub(crate) fn script_summary_correct_errors(
    mut builder: crate::types::builders::ScriptSummaryBuilder,
) -> crate::types::builders::ScriptSummaryBuilder {
    if builder.script_location.is_none() {
        builder.script_location = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ScriptType>().ok()
    }
    builder
}

pub(crate) fn batch_correct_errors(mut builder: crate::types::builders::BatchBuilder) -> crate::types::builders::BatchBuilder {
    if builder.batch_job_name.is_none() {
        builder.batch_job_name = Some(Default::default())
    }
    builder
}

pub(crate) fn compare_data_sets_step_input_correct_errors(
    mut builder: crate::types::builders::CompareDataSetsStepInputBuilder,
) -> crate::types::builders::CompareDataSetsStepInputBuilder {
    if builder.source_location.is_none() {
        builder.source_location = Some(Default::default())
    }
    if builder.target_location.is_none() {
        builder.target_location = Some(Default::default())
    }
    if builder.source_data_sets.is_none() {
        builder.source_data_sets = Some(Default::default())
    }
    if builder.target_data_sets.is_none() {
        builder.target_data_sets = Some(Default::default())
    }
    builder
}

pub(crate) fn compare_data_sets_step_output_correct_errors(
    mut builder: crate::types::builders::CompareDataSetsStepOutputBuilder,
) -> crate::types::builders::CompareDataSetsStepOutputBuilder {
    if builder.comparison_output_location.is_none() {
        builder.comparison_output_location = Some(Default::default())
    }
    if builder.comparison_status.is_none() {
        builder.comparison_status = "no value was set".parse::<crate::types::ComparisonStatusEnum>().ok()
    }
    builder
}

pub(crate) fn compare_database_cdc_step_input_correct_errors(
    mut builder: crate::types::builders::CompareDatabaseCdcStepInputBuilder,
) -> crate::types::builders::CompareDatabaseCdcStepInputBuilder {
    if builder.source_location.is_none() {
        builder.source_location = Some(Default::default())
    }
    if builder.target_location.is_none() {
        builder.target_location = Some(Default::default())
    }
    if builder.source_metadata.is_none() {
        builder.source_metadata = {
            let builder = crate::types::builders::SourceDatabaseMetadataBuilder::default();
            crate::serde_util::source_database_metadata_correct_errors(builder).build().ok()
        }
    }
    if builder.target_metadata.is_none() {
        builder.target_metadata = {
            let builder = crate::types::builders::TargetDatabaseMetadataBuilder::default();
            crate::serde_util::target_database_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn compare_database_cdc_step_output_correct_errors(
    mut builder: crate::types::builders::CompareDatabaseCdcStepOutputBuilder,
) -> crate::types::builders::CompareDatabaseCdcStepOutputBuilder {
    if builder.comparison_output_location.is_none() {
        builder.comparison_output_location = Some(Default::default())
    }
    if builder.comparison_status.is_none() {
        builder.comparison_status = "no value was set".parse::<crate::types::ComparisonStatusEnum>().ok()
    }
    builder
}

pub(crate) fn data_set_correct_errors(mut builder: crate::types::builders::DataSetBuilder) -> crate::types::builders::DataSetBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataSetType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.ccsid.is_none() {
        builder.ccsid = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    if builder.length.is_none() {
        builder.length = Some(Default::default())
    }
    builder
}

pub(crate) fn input_file_correct_errors(mut builder: crate::types::builders::InputFileBuilder) -> crate::types::builders::InputFileBuilder {
    if builder.source_location.is_none() {
        builder.source_location = Some(Default::default())
    }
    if builder.target_location.is_none() {
        builder.target_location = Some(Default::default())
    }
    if builder.file_metadata.is_none() {
        builder.file_metadata = Some(crate::types::FileMetadata::Unknown)
    }
    builder
}

pub(crate) fn m2_managed_application_summary_correct_errors(
    mut builder: crate::types::builders::M2ManagedApplicationSummaryBuilder,
) -> crate::types::builders::M2ManagedApplicationSummaryBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::M2ManagedRuntime>().ok()
    }
    builder
}

pub(crate) fn m2_non_managed_application_summary_correct_errors(
    mut builder: crate::types::builders::M2NonManagedApplicationSummaryBuilder,
) -> crate::types::builders::M2NonManagedApplicationSummaryBuilder {
    if builder.vpc_endpoint_service_name.is_none() {
        builder.vpc_endpoint_service_name = Some(Default::default())
    }
    if builder.listener_port.is_none() {
        builder.listener_port = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::M2NonManagedRuntime>().ok()
    }
    builder
}

pub(crate) fn tn3270_correct_errors(mut builder: crate::types::builders::Tn3270Builder) -> crate::types::builders::Tn3270Builder {
    if builder.script.is_none() {
        builder.script = {
            let builder = crate::types::builders::ScriptBuilder::default();
            crate::serde_util::script_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn script_correct_errors(mut builder: crate::types::builders::ScriptBuilder) -> crate::types::builders::ScriptBuilder {
    if builder.script_location.is_none() {
        builder.script_location = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ScriptType>().ok()
    }
    builder
}

pub(crate) fn source_database_metadata_correct_errors(
    mut builder: crate::types::builders::SourceDatabaseMetadataBuilder,
) -> crate::types::builders::SourceDatabaseMetadataBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SourceDatabase>().ok()
    }
    if builder.capture_tool.is_none() {
        builder.capture_tool = "no value was set".parse::<crate::types::CaptureTool>().ok()
    }
    builder
}

pub(crate) fn target_database_metadata_correct_errors(
    mut builder: crate::types::builders::TargetDatabaseMetadataBuilder,
) -> crate::types::builders::TargetDatabaseMetadataBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TargetDatabase>().ok()
    }
    if builder.capture_tool.is_none() {
        builder.capture_tool = "no value was set".parse::<crate::types::CaptureTool>().ok()
    }
    builder
}

pub(crate) fn database_cdc_correct_errors(mut builder: crate::types::builders::DatabaseCdcBuilder) -> crate::types::builders::DatabaseCdcBuilder {
    if builder.source_metadata.is_none() {
        builder.source_metadata = {
            let builder = crate::types::builders::SourceDatabaseMetadataBuilder::default();
            crate::serde_util::source_database_metadata_correct_errors(builder).build().ok()
        }
    }
    if builder.target_metadata.is_none() {
        builder.target_metadata = {
            let builder = crate::types::builders::TargetDatabaseMetadataBuilder::default();
            crate::serde_util::target_database_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}
