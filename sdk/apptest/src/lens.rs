// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_test_cases_output_output_next_token(
    input: &crate::operation::list_test_cases::ListTestCasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_test_configurations_output_output_next_token(
    input: &crate::operation::list_test_configurations::ListTestConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_test_run_steps_output_output_next_token(
    input: &crate::operation::list_test_run_steps::ListTestRunStepsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_test_run_test_cases_output_output_next_token(
    input: &crate::operation::list_test_run_test_cases::ListTestRunTestCasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_test_runs_output_output_next_token(
    input: &crate::operation::list_test_runs::ListTestRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_test_suites_output_output_next_token(
    input: &crate::operation::list_test_suites::ListTestSuitesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_test_cases_output_output_test_cases(
    input: crate::operation::list_test_cases::ListTestCasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TestCaseSummary>> {
    let input = input.test_cases;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_test_configurations_output_output_test_configurations(
    input: crate::operation::list_test_configurations::ListTestConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TestConfigurationSummary>> {
    let input = input.test_configurations;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_test_run_steps_output_output_test_run_steps(
    input: crate::operation::list_test_run_steps::ListTestRunStepsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TestRunStepSummary>> {
    let input = input.test_run_steps;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_test_run_test_cases_output_output_test_run_test_cases(
    input: crate::operation::list_test_run_test_cases::ListTestRunTestCasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TestCaseRunSummary>> {
    let input = input.test_run_test_cases;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_test_runs_output_output_test_runs(
    input: crate::operation::list_test_runs::ListTestRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TestRunSummary>> {
    let input = input.test_runs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_test_suites_output_output_test_suites(
    input: crate::operation::list_test_suites::ListTestSuitesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TestSuiteSummary>> {
    let input = input.test_suites;
    ::std::option::Option::Some(input)
}
