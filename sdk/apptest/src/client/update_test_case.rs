// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateTestCase`](crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`test_case_id(impl Into<String>)`](crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder::test_case_id) / [`set_test_case_id(Option<String>)`](crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder::set_test_case_id):<br>required: **true**<br><p>The test case ID of the test case.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder::set_description):<br>required: **false**<br><p>The description of the test case.</p><br>
    ///   - [`steps(Step)`](crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder::steps) / [`set_steps(Option<Vec::<Step>>)`](crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder::set_steps):<br>required: **false**<br><p>The steps of the test case.</p><br>
    /// - On success, responds with [`UpdateTestCaseOutput`](crate::operation::update_test_case::UpdateTestCaseOutput) with field(s):
    ///   - [`test_case_id(String)`](crate::operation::update_test_case::UpdateTestCaseOutput::test_case_id): <p>The test case ID of the test case.</p>
    ///   - [`test_case_version(i32)`](crate::operation::update_test_case::UpdateTestCaseOutput::test_case_version): <p>The test case version of the test case.</p>
    /// - On failure, responds with [`SdkError<UpdateTestCaseError>`](crate::operation::update_test_case::UpdateTestCaseError)
    pub fn update_test_case(&self) -> crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder {
        crate::operation::update_test_case::builders::UpdateTestCaseFluentBuilder::new(self.handle.clone())
    }
}
