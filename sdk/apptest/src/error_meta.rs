// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The account or role doesn't have the right permissions to make the request.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The parameters provided in the request conflict with existing resources.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred during the processing of the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>One or more quotas for AWS Application Testing exceeds the limit.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The number of requests made exceeds the limit.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>One or more parameter provided in the request is not valid.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_case::CreateTestCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_case::CreateTestCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_test_case::CreateTestCaseError> for Error {
    fn from(err: crate::operation::create_test_case::CreateTestCaseError) -> Self {
        match err {
            crate::operation::create_test_case::CreateTestCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_test_case::CreateTestCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_test_case::CreateTestCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_test_case::CreateTestCaseError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_test_case::CreateTestCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_test_case::CreateTestCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_test_case::CreateTestCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_configuration::CreateTestConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_configuration::CreateTestConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_test_configuration::CreateTestConfigurationError> for Error {
    fn from(err: crate::operation::create_test_configuration::CreateTestConfigurationError) -> Self {
        match err {
            crate::operation::create_test_configuration::CreateTestConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_test_configuration::CreateTestConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_test_configuration::CreateTestConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_test_configuration::CreateTestConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_test_configuration::CreateTestConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_test_configuration::CreateTestConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_test_configuration::CreateTestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_suite::CreateTestSuiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_test_suite::CreateTestSuiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_test_suite::CreateTestSuiteError> for Error {
    fn from(err: crate::operation::create_test_suite::CreateTestSuiteError) -> Self {
        match err {
            crate::operation::create_test_suite::CreateTestSuiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_test_suite::CreateTestSuiteError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_test_suite::CreateTestSuiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_test_suite::CreateTestSuiteError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_test_suite::CreateTestSuiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_test_suite::CreateTestSuiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_test_suite::CreateTestSuiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_case::DeleteTestCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_case::DeleteTestCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_test_case::DeleteTestCaseError> for Error {
    fn from(err: crate::operation::delete_test_case::DeleteTestCaseError) -> Self {
        match err {
            crate::operation::delete_test_case::DeleteTestCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_test_case::DeleteTestCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_test_case::DeleteTestCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_test_case::DeleteTestCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_test_case::DeleteTestCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_test_case::DeleteTestCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_test_case::DeleteTestCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_configuration::DeleteTestConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_configuration::DeleteTestConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_test_configuration::DeleteTestConfigurationError> for Error {
    fn from(err: crate::operation::delete_test_configuration::DeleteTestConfigurationError) -> Self {
        match err {
            crate::operation::delete_test_configuration::DeleteTestConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_test_configuration::DeleteTestConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_test_configuration::DeleteTestConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_test_configuration::DeleteTestConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_test_configuration::DeleteTestConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_test_configuration::DeleteTestConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_test_configuration::DeleteTestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_run::DeleteTestRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_run::DeleteTestRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_test_run::DeleteTestRunError> for Error {
    fn from(err: crate::operation::delete_test_run::DeleteTestRunError) -> Self {
        match err {
            crate::operation::delete_test_run::DeleteTestRunError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_test_run::DeleteTestRunError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_test_run::DeleteTestRunError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_test_run::DeleteTestRunError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_test_run::DeleteTestRunError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_test_run::DeleteTestRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_suite::DeleteTestSuiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_test_suite::DeleteTestSuiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_test_suite::DeleteTestSuiteError> for Error {
    fn from(err: crate::operation::delete_test_suite::DeleteTestSuiteError) -> Self {
        match err {
            crate::operation::delete_test_suite::DeleteTestSuiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_test_suite::DeleteTestSuiteError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_test_suite::DeleteTestSuiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_test_suite::DeleteTestSuiteError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_test_suite::DeleteTestSuiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_test_suite::DeleteTestSuiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_test_suite::DeleteTestSuiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_case::GetTestCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_case::GetTestCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_test_case::GetTestCaseError> for Error {
    fn from(err: crate::operation::get_test_case::GetTestCaseError) -> Self {
        match err {
            crate::operation::get_test_case::GetTestCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_test_case::GetTestCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_test_case::GetTestCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_test_case::GetTestCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_test_case::GetTestCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_test_case::GetTestCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_configuration::GetTestConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_configuration::GetTestConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_test_configuration::GetTestConfigurationError> for Error {
    fn from(err: crate::operation::get_test_configuration::GetTestConfigurationError) -> Self {
        match err {
            crate::operation::get_test_configuration::GetTestConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_test_configuration::GetTestConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_test_configuration::GetTestConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_test_configuration::GetTestConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_test_configuration::GetTestConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_test_configuration::GetTestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_run_step::GetTestRunStepError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_run_step::GetTestRunStepError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_test_run_step::GetTestRunStepError> for Error {
    fn from(err: crate::operation::get_test_run_step::GetTestRunStepError) -> Self {
        match err {
            crate::operation::get_test_run_step::GetTestRunStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_test_run_step::GetTestRunStepError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_test_run_step::GetTestRunStepError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_test_run_step::GetTestRunStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_test_run_step::GetTestRunStepError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_test_run_step::GetTestRunStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_suite::GetTestSuiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_test_suite::GetTestSuiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_test_suite::GetTestSuiteError> for Error {
    fn from(err: crate::operation::get_test_suite::GetTestSuiteError) -> Self {
        match err {
            crate::operation::get_test_suite::GetTestSuiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_test_suite::GetTestSuiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_test_suite::GetTestSuiteError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_test_suite::GetTestSuiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_test_suite::GetTestSuiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_test_suite::GetTestSuiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_cases::ListTestCasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_cases::ListTestCasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_test_cases::ListTestCasesError> for Error {
    fn from(err: crate::operation::list_test_cases::ListTestCasesError) -> Self {
        match err {
            crate::operation::list_test_cases::ListTestCasesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_test_cases::ListTestCasesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_test_cases::ListTestCasesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_test_cases::ListTestCasesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_test_cases::ListTestCasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_test_cases::ListTestCasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_configurations::ListTestConfigurationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_configurations::ListTestConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_test_configurations::ListTestConfigurationsError> for Error {
    fn from(err: crate::operation::list_test_configurations::ListTestConfigurationsError) -> Self {
        match err {
            crate::operation::list_test_configurations::ListTestConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_test_configurations::ListTestConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_test_configurations::ListTestConfigurationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_test_configurations::ListTestConfigurationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_test_configurations::ListTestConfigurationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_test_configurations::ListTestConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_runs::ListTestRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_runs::ListTestRunsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_test_runs::ListTestRunsError> for Error {
    fn from(err: crate::operation::list_test_runs::ListTestRunsError) -> Self {
        match err {
            crate::operation::list_test_runs::ListTestRunsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_test_runs::ListTestRunsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_test_runs::ListTestRunsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_test_runs::ListTestRunsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_test_runs::ListTestRunsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_test_runs::ListTestRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_run_steps::ListTestRunStepsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_run_steps::ListTestRunStepsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_test_run_steps::ListTestRunStepsError> for Error {
    fn from(err: crate::operation::list_test_run_steps::ListTestRunStepsError) -> Self {
        match err {
            crate::operation::list_test_run_steps::ListTestRunStepsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_test_run_steps::ListTestRunStepsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_test_run_steps::ListTestRunStepsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_test_run_steps::ListTestRunStepsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_test_run_steps::ListTestRunStepsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_test_run_steps::ListTestRunStepsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_run_test_cases::ListTestRunTestCasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_run_test_cases::ListTestRunTestCasesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_test_run_test_cases::ListTestRunTestCasesError> for Error {
    fn from(err: crate::operation::list_test_run_test_cases::ListTestRunTestCasesError) -> Self {
        match err {
            crate::operation::list_test_run_test_cases::ListTestRunTestCasesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_test_run_test_cases::ListTestRunTestCasesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_test_run_test_cases::ListTestRunTestCasesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_test_run_test_cases::ListTestRunTestCasesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_test_run_test_cases::ListTestRunTestCasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_test_run_test_cases::ListTestRunTestCasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_suites::ListTestSuitesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_test_suites::ListTestSuitesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_test_suites::ListTestSuitesError> for Error {
    fn from(err: crate::operation::list_test_suites::ListTestSuitesError) -> Self {
        match err {
            crate::operation::list_test_suites::ListTestSuitesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_test_suites::ListTestSuitesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_test_suites::ListTestSuitesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_test_suites::ListTestSuitesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_test_suites::ListTestSuitesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_test_suites::ListTestSuitesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_test_run::StartTestRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_test_run::StartTestRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_test_run::StartTestRunError> for Error {
    fn from(err: crate::operation::start_test_run::StartTestRunError) -> Self {
        match err {
            crate::operation::start_test_run::StartTestRunError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_test_run::StartTestRunError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_test_run::StartTestRunError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_test_run::StartTestRunError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_test_run::StartTestRunError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_test_run::StartTestRunError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_test_run::StartTestRunError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_test_run::StartTestRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_case::UpdateTestCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_case::UpdateTestCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_test_case::UpdateTestCaseError> for Error {
    fn from(err: crate::operation::update_test_case::UpdateTestCaseError) -> Self {
        match err {
            crate::operation::update_test_case::UpdateTestCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_test_case::UpdateTestCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_test_case::UpdateTestCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_test_case::UpdateTestCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_test_case::UpdateTestCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_test_case::UpdateTestCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_test_case::UpdateTestCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_configuration::UpdateTestConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_configuration::UpdateTestConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_test_configuration::UpdateTestConfigurationError> for Error {
    fn from(err: crate::operation::update_test_configuration::UpdateTestConfigurationError) -> Self {
        match err {
            crate::operation::update_test_configuration::UpdateTestConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_test_configuration::UpdateTestConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_test_configuration::UpdateTestConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_test_configuration::UpdateTestConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_test_configuration::UpdateTestConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_test_configuration::UpdateTestConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_test_configuration::UpdateTestConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_suite::UpdateTestSuiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_test_suite::UpdateTestSuiteError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_test_suite::UpdateTestSuiteError> for Error {
    fn from(err: crate::operation::update_test_suite::UpdateTestSuiteError) -> Self {
        match err {
            crate::operation::update_test_suite::UpdateTestSuiteError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_test_suite::UpdateTestSuiteError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_test_suite::UpdateTestSuiteError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_test_suite::UpdateTestSuiteError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_test_suite::UpdateTestSuiteError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_test_suite::UpdateTestSuiteError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_test_suite::UpdateTestSuiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
