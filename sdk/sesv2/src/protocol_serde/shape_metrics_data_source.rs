// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_metrics_data_source(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MetricsDataSource,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.dimensions {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Dimensions").start_object();
        for (key_3, value_4) in var_1 {
            {
                let mut array_5 = object_2.key(key_3.as_str()).start_array();
                for item_6 in value_4 {
                    {
                        array_5.value().string(item_6.as_str());
                    }
                }
                array_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_7) = &input.namespace {
        object.key("Namespace").string(var_7.as_str());
    }
    if let Some(var_8) = &input.metrics {
        let mut array_9 = object.key("Metrics").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_export_metric::ser_export_metric(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.start_date {
        object
            .key("StartDate")
            .date_time(var_12, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_13) = &input.end_date {
        object
            .key("EndDate")
            .date_time(var_13, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub(crate) fn de_metrics_data_source<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MetricsDataSource>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MetricsDataSourceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Dimensions" => {
                            builder = builder.set_dimensions(crate::protocol_serde::shape_export_dimensions::de_export_dimensions(tokens)?);
                        }
                        "Namespace" => {
                            builder = builder.set_namespace(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MetricNamespace::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Metrics" => {
                            builder = builder.set_metrics(crate::protocol_serde::shape_export_metrics::de_export_metrics(tokens)?);
                        }
                        "StartDate" => {
                            builder = builder.set_start_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "EndDate" => {
                            builder = builder.set_end_date(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
