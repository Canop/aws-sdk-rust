// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalExceptionBuilder,
) -> crate::types::error::builders::InternalExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_source_active_mq_broker_parameters_correct_errors(
    mut builder: crate::types::builders::PipeSourceActiveMqBrokerParametersBuilder,
) -> crate::types::builders::PipeSourceActiveMqBrokerParametersBuilder {
    if builder.credentials.is_none() {
        builder.credentials = Some(crate::types::MqBrokerAccessCredentials::Unknown)
    }
    if builder.queue_name.is_none() {
        builder.queue_name = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_source_dynamo_db_stream_parameters_correct_errors(
    mut builder: crate::types::builders::PipeSourceDynamoDbStreamParametersBuilder,
) -> crate::types::builders::PipeSourceDynamoDbStreamParametersBuilder {
    if builder.starting_position.is_none() {
        builder.starting_position = "no value was set".parse::<crate::types::DynamoDbStreamStartPosition>().ok()
    }
    builder
}

pub(crate) fn pipe_source_kinesis_stream_parameters_correct_errors(
    mut builder: crate::types::builders::PipeSourceKinesisStreamParametersBuilder,
) -> crate::types::builders::PipeSourceKinesisStreamParametersBuilder {
    if builder.starting_position.is_none() {
        builder.starting_position = "no value was set".parse::<crate::types::KinesisStreamStartPosition>().ok()
    }
    builder
}

pub(crate) fn pipe_source_managed_streaming_kafka_parameters_correct_errors(
    mut builder: crate::types::builders::PipeSourceManagedStreamingKafkaParametersBuilder,
) -> crate::types::builders::PipeSourceManagedStreamingKafkaParametersBuilder {
    if builder.topic_name.is_none() {
        builder.topic_name = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_source_rabbit_mq_broker_parameters_correct_errors(
    mut builder: crate::types::builders::PipeSourceRabbitMqBrokerParametersBuilder,
) -> crate::types::builders::PipeSourceRabbitMqBrokerParametersBuilder {
    if builder.credentials.is_none() {
        builder.credentials = Some(crate::types::MqBrokerAccessCredentials::Unknown)
    }
    if builder.queue_name.is_none() {
        builder.queue_name = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_source_self_managed_kafka_parameters_correct_errors(
    mut builder: crate::types::builders::PipeSourceSelfManagedKafkaParametersBuilder,
) -> crate::types::builders::PipeSourceSelfManagedKafkaParametersBuilder {
    if builder.topic_name.is_none() {
        builder.topic_name = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_target_batch_job_parameters_correct_errors(
    mut builder: crate::types::builders::PipeTargetBatchJobParametersBuilder,
) -> crate::types::builders::PipeTargetBatchJobParametersBuilder {
    if builder.job_definition.is_none() {
        builder.job_definition = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_target_ecs_task_parameters_correct_errors(
    mut builder: crate::types::builders::PipeTargetEcsTaskParametersBuilder,
) -> crate::types::builders::PipeTargetEcsTaskParametersBuilder {
    if builder.task_definition_arn.is_none() {
        builder.task_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_target_kinesis_stream_parameters_correct_errors(
    mut builder: crate::types::builders::PipeTargetKinesisStreamParametersBuilder,
) -> crate::types::builders::PipeTargetKinesisStreamParametersBuilder {
    if builder.partition_key.is_none() {
        builder.partition_key = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_target_redshift_data_parameters_correct_errors(
    mut builder: crate::types::builders::PipeTargetRedshiftDataParametersBuilder,
) -> crate::types::builders::PipeTargetRedshiftDataParametersBuilder {
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.sqls.is_none() {
        builder.sqls = Some(Default::default())
    }
    builder
}

pub(crate) fn pipe_target_timestream_parameters_correct_errors(
    mut builder: crate::types::builders::PipeTargetTimestreamParametersBuilder,
) -> crate::types::builders::PipeTargetTimestreamParametersBuilder {
    if builder.time_value.is_none() {
        builder.time_value = Some(Default::default())
    }
    if builder.version_value.is_none() {
        builder.version_value = Some(Default::default())
    }
    if builder.dimension_mappings.is_none() {
        builder.dimension_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_vpc_configuration_correct_errors(
    mut builder: crate::types::builders::AwsVpcConfigurationBuilder,
) -> crate::types::builders::AwsVpcConfigurationBuilder {
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_provider_strategy_item_correct_errors(
    mut builder: crate::types::builders::CapacityProviderStrategyItemBuilder,
) -> crate::types::builders::CapacityProviderStrategyItemBuilder {
    if builder.capacity_provider.is_none() {
        builder.capacity_provider = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_mapping_correct_errors(
    mut builder: crate::types::builders::DimensionMappingBuilder,
) -> crate::types::builders::DimensionMappingBuilder {
    if builder.dimension_value.is_none() {
        builder.dimension_value = Some(Default::default())
    }
    if builder.dimension_value_type.is_none() {
        builder.dimension_value_type = "no value was set".parse::<crate::types::DimensionValueType>().ok()
    }
    if builder.dimension_name.is_none() {
        builder.dimension_name = Some(Default::default())
    }
    builder
}

pub(crate) fn ecs_ephemeral_storage_correct_errors(
    mut builder: crate::types::builders::EcsEphemeralStorageBuilder,
) -> crate::types::builders::EcsEphemeralStorageBuilder {
    if builder.size_in_gib.is_none() {
        builder.size_in_gib = Some(Default::default())
    }
    builder
}

pub(crate) fn multi_measure_mapping_correct_errors(
    mut builder: crate::types::builders::MultiMeasureMappingBuilder,
) -> crate::types::builders::MultiMeasureMappingBuilder {
    if builder.multi_measure_name.is_none() {
        builder.multi_measure_name = Some(Default::default())
    }
    if builder.multi_measure_attribute_mappings.is_none() {
        builder.multi_measure_attribute_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn sage_maker_pipeline_parameter_correct_errors(
    mut builder: crate::types::builders::SageMakerPipelineParameterBuilder,
) -> crate::types::builders::SageMakerPipelineParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn single_measure_mapping_correct_errors(
    mut builder: crate::types::builders::SingleMeasureMappingBuilder,
) -> crate::types::builders::SingleMeasureMappingBuilder {
    if builder.measure_value.is_none() {
        builder.measure_value = Some(Default::default())
    }
    if builder.measure_value_type.is_none() {
        builder.measure_value_type = "no value was set".parse::<crate::types::MeasureValueType>().ok()
    }
    if builder.measure_name.is_none() {
        builder.measure_name = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_resource_requirement_correct_errors(
    mut builder: crate::types::builders::BatchResourceRequirementBuilder,
) -> crate::types::builders::BatchResourceRequirementBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::BatchResourceRequirementType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn multi_measure_attribute_mapping_correct_errors(
    mut builder: crate::types::builders::MultiMeasureAttributeMappingBuilder,
) -> crate::types::builders::MultiMeasureAttributeMappingBuilder {
    if builder.measure_value.is_none() {
        builder.measure_value = Some(Default::default())
    }
    if builder.measure_value_type.is_none() {
        builder.measure_value_type = "no value was set".parse::<crate::types::MeasureValueType>().ok()
    }
    if builder.multi_measure_attribute_name.is_none() {
        builder.multi_measure_attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn ecs_environment_file_correct_errors(
    mut builder: crate::types::builders::EcsEnvironmentFileBuilder,
) -> crate::types::builders::EcsEnvironmentFileBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EcsEnvironmentFileType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn ecs_resource_requirement_correct_errors(
    mut builder: crate::types::builders::EcsResourceRequirementBuilder,
) -> crate::types::builders::EcsResourceRequirementBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EcsResourceRequirementType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
