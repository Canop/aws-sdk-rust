// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the attributes of the private key.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrivateKeyAttributesV2 {
    /// <p>Set the minimum key length of the private key.</p>
    pub minimal_key_length: ::std::option::Option<i32>,
    /// <p>Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.</p>
    pub key_spec: ::std::option::Option<crate::types::KeySpec>,
    /// <p>Defines the cryptographic providers used to generate the private key.</p>
    pub crypto_providers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PrivateKeyAttributesV2 {
    /// <p>Set the minimum key length of the private key.</p>
    pub fn minimal_key_length(&self) -> ::std::option::Option<i32> {
        self.minimal_key_length
    }
    /// <p>Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.</p>
    pub fn key_spec(&self) -> ::std::option::Option<&crate::types::KeySpec> {
        self.key_spec.as_ref()
    }
    /// <p>Defines the cryptographic providers used to generate the private key.</p>
    pub fn crypto_providers(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.crypto_providers.as_deref()
    }
}
impl PrivateKeyAttributesV2 {
    /// Creates a new builder-style object to manufacture [`PrivateKeyAttributesV2`](crate::types::PrivateKeyAttributesV2).
    pub fn builder() -> crate::types::builders::PrivateKeyAttributesV2Builder {
        crate::types::builders::PrivateKeyAttributesV2Builder::default()
    }
}

/// A builder for [`PrivateKeyAttributesV2`](crate::types::PrivateKeyAttributesV2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PrivateKeyAttributesV2Builder {
    pub(crate) minimal_key_length: ::std::option::Option<i32>,
    pub(crate) key_spec: ::std::option::Option<crate::types::KeySpec>,
    pub(crate) crypto_providers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PrivateKeyAttributesV2Builder {
    /// <p>Set the minimum key length of the private key.</p>
    pub fn minimal_key_length(mut self, input: i32) -> Self {
        self.minimal_key_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set the minimum key length of the private key.</p>
    pub fn set_minimal_key_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimal_key_length = input;
        self
    }
    /// <p>Set the minimum key length of the private key.</p>
    pub fn get_minimal_key_length(&self) -> &::std::option::Option<i32> {
        &self.minimal_key_length
    }
    /// <p>Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.</p>
    pub fn key_spec(mut self, input: crate::types::KeySpec) -> Self {
        self.key_spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.</p>
    pub fn set_key_spec(mut self, input: ::std::option::Option<crate::types::KeySpec>) -> Self {
        self.key_spec = input;
        self
    }
    /// <p>Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.</p>
    pub fn get_key_spec(&self) -> &::std::option::Option<crate::types::KeySpec> {
        &self.key_spec
    }
    /// Appends an item to `crypto_providers`.
    ///
    /// To override the contents of this collection use [`set_crypto_providers`](Self::set_crypto_providers).
    ///
    /// <p>Defines the cryptographic providers used to generate the private key.</p>
    pub fn crypto_providers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.crypto_providers.unwrap_or_default();
        v.push(input.into());
        self.crypto_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Defines the cryptographic providers used to generate the private key.</p>
    pub fn set_crypto_providers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.crypto_providers = input;
        self
    }
    /// <p>Defines the cryptographic providers used to generate the private key.</p>
    pub fn get_crypto_providers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.crypto_providers
    }
    /// Consumes the builder and constructs a [`PrivateKeyAttributesV2`](crate::types::PrivateKeyAttributesV2).
    pub fn build(self) -> crate::types::PrivateKeyAttributesV2 {
        crate::types::PrivateKeyAttributesV2 {
            minimal_key_length: self.minimal_key_length,
            key_spec: self.key_spec,
            crypto_providers: self.crypto_providers,
        }
    }
}
