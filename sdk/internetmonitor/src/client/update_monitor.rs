// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateMonitor`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl Into<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::monitor_name) / [`set_monitor_name(Option<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_monitor_name): <p>The name of the monitor. </p>
    ///   - [`resources_to_add(impl Into<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::resources_to_add) / [`set_resources_to_add(Option<Vec<String>>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_resources_to_add): <p>The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs). Resources can be VPCs, NLBs, Amazon CloudFront distributions, or Amazon WorkSpaces directories.</p>  <p>You can add a combination of VPCs and CloudFront distributions, or you can add WorkSpaces directories, or you can add NLBs. You can't add NLBs or WorkSpaces directories together with any other resources.</p> <note>   <p>If you add only Amazon Virtual Private Clouds resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.</p>  </note>
    ///   - [`resources_to_remove(impl Into<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::resources_to_remove) / [`set_resources_to_remove(Option<Vec<String>>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_resources_to_remove): <p>The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs).</p>
    ///   - [`status(MonitorConfigState)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::status) / [`set_status(Option<MonitorConfigState>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_status): <p>The status for a monitor. The accepted values for <code>Status</code> with the <code>UpdateMonitor</code> API call are the following: <code>ACTIVE</code> and <code>INACTIVE</code>. The following values are <i>not</i> accepted: <code>PENDING</code>, and <code>ERROR</code>.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_client_token): <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. You should not reuse the same client token for other API requests.</p>
    ///   - [`max_city_networks_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::max_city_networks_to_monitor) / [`set_max_city_networks_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_max_city_networks_to_monitor): <p>The maximum number of city-networks to monitor for your application. A city-network is the location (city) where clients access your application resources from and the ASN or network provider, such as an internet service provider (ISP), that clients access the resources through. Setting this limit can help control billing costs.</p>
    ///   - [`internet_measurements_log_delivery(InternetMeasurementsLogDelivery)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::internet_measurements_log_delivery) / [`set_internet_measurements_log_delivery(Option<InternetMeasurementsLogDelivery>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_internet_measurements_log_delivery): <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    ///   - [`traffic_percentage_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::traffic_percentage_to_monitor) / [`set_traffic_percentage_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_traffic_percentage_to_monitor): <p>The percentage of the internet-facing traffic for your application that you want to monitor with this monitor. If you set a city-networks maximum, that limit overrides the traffic percentage that you set.</p>  <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMTrafficPercentage.html">Choosing an application traffic percentage to monitor </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    ///   - [`health_events_config(HealthEventsConfig)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::health_events_config) / [`set_health_events_config(Option<HealthEventsConfig>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_health_events_config): <p>The list of health score thresholds. A threshold percentage for health scores, along with other configuration information, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview"> Change health event thresholds</a> in the Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    /// - On success, responds with [`UpdateMonitorOutput`](crate::operation::update_monitor::UpdateMonitorOutput) with field(s):
    ///   - [`monitor_arn(Option<String>)`](crate::operation::update_monitor::UpdateMonitorOutput::monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor.</p>
    ///   - [`status(Option<MonitorConfigState>)`](crate::operation::update_monitor::UpdateMonitorOutput::status): <p>The status of a monitor.</p>
    /// - On failure, responds with [`SdkError<UpdateMonitorError>`](crate::operation::update_monitor::UpdateMonitorError)
    pub fn update_monitor(&self) -> crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder {
        crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::new(self.handle.clone())
    }
}
