// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"imageScanStatus.status","expected":"COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_describe_image_scan_findings_e6f570cf50c93ebe8(
    _result: ::std::result::Result<
        &crate::operation::describe_image_scan_findings::DescribeImageScanFindingsOutput,
        &crate::operation::describe_image_scan_findings::DescribeImageScanFindingsError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_image_scan_findings::DescribeImageScanFindingsOutput,
    ) -> ::std::option::Option<&'a crate::types::ScanStatus> {
        let _fld_1 = _output.image_scan_status.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"imageScanStatus.status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_image_scan_findings_98a640e82b81483b5(
    _result: ::std::result::Result<
        &crate::operation::describe_image_scan_findings::DescribeImageScanFindingsOutput,
        &crate::operation::describe_image_scan_findings::DescribeImageScanFindingsError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_image_scan_findings::DescribeImageScanFindingsOutput,
    ) -> ::std::option::Option<&'a crate::types::ScanStatus> {
        let _fld_1 = _output.image_scan_status.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_get_lifecycle_policy_preview_757237db6f4c6e630(
    _result: ::std::result::Result<
        &crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput,
        &crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput,
    ) -> ::std::option::Option<&'a crate::types::LifecyclePolicyPreviewStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_lifecycle_policy_preview_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput,
        &crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput,
    ) -> ::std::option::Option<&'a crate::types::LifecyclePolicyPreviewStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
