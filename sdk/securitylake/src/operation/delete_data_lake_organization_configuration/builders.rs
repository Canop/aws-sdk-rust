// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_data_lake_organization_configuration::_delete_data_lake_organization_configuration_output::DeleteDataLakeOrganizationConfigurationOutputBuilder;

pub use crate::operation::delete_data_lake_organization_configuration::_delete_data_lake_organization_configuration_input::DeleteDataLakeOrganizationConfigurationInputBuilder;

impl DeleteDataLakeOrganizationConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationError,
                            ::aws_smithy_http::operation::Response
                        >
    >{
        let mut fluent_builder = client.delete_data_lake_organization_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteDataLakeOrganizationConfiguration`.
///
/// <p>Turns off automatic enablement of Amazon Security Lake for member accounts that are added to an organization in Organizations. Only the delegated Security Lake administrator for an organization can perform this operation. If the delegated Security Lake administrator performs this operation, new member accounts won't automatically contribute data to the data lake.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteDataLakeOrganizationConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_data_lake_organization_configuration::builders::DeleteDataLakeOrganizationConfigurationInputBuilder,
}
impl DeleteDataLakeOrganizationConfigurationFluentBuilder {
    /// Creates a new `DeleteDataLakeOrganizationConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the DeleteDataLakeOrganizationConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_data_lake_organization_configuration::builders::DeleteDataLakeOrganizationConfigurationInputBuilder{
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfiguration, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationError>>
                         {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationOutput, ::aws_smithy_http::result::SdkError<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationError>>
                             {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfiguration, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::delete_data_lake_organization_configuration::DeleteDataLakeOrganizationConfigurationError>
    >{
        self.customize_middleware().await
    }
    /// Appends an item to `autoEnableNewAccount`.
    ///
    /// To override the contents of this collection use [`set_auto_enable_new_account`](Self::set_auto_enable_new_account).
    ///
    /// <p>Turns off automatic enablement of Security Lake for member accounts that are added to an organization.</p>
    pub fn auto_enable_new_account(
        mut self,
        input: crate::types::DataLakeAutoEnableNewAccountConfiguration,
    ) -> Self {
        self.inner = self.inner.auto_enable_new_account(input);
        self
    }
    /// <p>Turns off automatic enablement of Security Lake for member accounts that are added to an organization.</p>
    pub fn set_auto_enable_new_account(
        mut self,
        input: ::std::option::Option<
            ::std::vec::Vec<crate::types::DataLakeAutoEnableNewAccountConfiguration>,
        >,
    ) -> Self {
        self.inner = self.inner.set_auto_enable_new_account(input);
        self
    }
    /// <p>Turns off automatic enablement of Security Lake for member accounts that are added to an organization.</p>
    pub fn get_auto_enable_new_account(
        &self,
    ) -> &::std::option::Option<
        ::std::vec::Vec<crate::types::DataLakeAutoEnableNewAccountConfiguration>,
    > {
        self.inner.get_auto_enable_new_account()
    }
}
