// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_sol_network_instance::_create_sol_network_instance_output::CreateSolNetworkInstanceOutputBuilder;

pub use crate::operation::create_sol_network_instance::_create_sol_network_instance_input::CreateSolNetworkInstanceInputBuilder;

/// Fluent builder constructing a request to `CreateSolNetworkInstance`.
/// 
/// <p>Creates a network instance.</p> 
/// <p>A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed. Creating a network instance is the third step after creating a network package. For more information about network instances, <a href="https://docs.aws.amazon.com/tnb/latest/ug/network-instances.html">Network instances</a> in the <i>Amazon Web Services Telco Network Builder User Guide</i>.</p> 
/// <p>Once you create a network instance, you can instantiate it. To instantiate a network, see <a href="https://docs.aws.amazon.com/tnb/latest/APIReference/API_InstantiateSolNetworkInstance.html">InstantiateSolNetworkInstance</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSolNetworkInstanceFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_sol_network_instance::builders::CreateSolNetworkInstanceInputBuilder
            }
impl CreateSolNetworkInstanceFluentBuilder  {
    /// Creates a new `CreateSolNetworkInstance`.
                    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
                        Self { handle, inner: Default::default() }
                    }
    
                    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_sol_network_instance::CreateSolNetworkInstance, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_sol_network_instance::CreateSolNetworkInstanceError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_sol_network_instance::CreateSolNetworkInstanceOutput, aws_smithy_http::result::SdkError<crate::operation::create_sol_network_instance::CreateSolNetworkInstanceError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// <p>ID for network service descriptor.</p>
    pub fn nsd_info_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.nsd_info_id(input.into());
        self
    }
    /// <p>ID for network service descriptor.</p>
    pub fn set_nsd_info_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_nsd_info_id(input);
        self
    }
    /// <p>Network instance name.</p>
    pub fn ns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ns_name(input.into());
        self
    }
    /// <p>Network instance name.</p>
    pub fn set_ns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ns_name(input);
        self
    }
    /// <p>Network instance description.</p>
    pub fn ns_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ns_description(input.into());
        self
    }
    /// <p>Network instance description.</p>
    pub fn set_ns_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ns_description(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl Into<std::string::String>, v: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

