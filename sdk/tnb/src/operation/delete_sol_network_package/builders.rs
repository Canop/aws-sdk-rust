// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_sol_network_package::_delete_sol_network_package_output::DeleteSolNetworkPackageOutputBuilder;

pub use crate::operation::delete_sol_network_package::_delete_sol_network_package_input::DeleteSolNetworkPackageInputBuilder;

/// Fluent builder constructing a request to `DeleteSolNetworkPackage`.
/// 
/// <p>Deletes network package.</p> 
/// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p> 
/// <p>To delete a network package, the package must be in a disable state. To disable a network package, see <a href="https://docs.aws.amazon.com/tnb/latest/APIReference/API_UpdateSolNetworkPackage.html">UpdateSolNetworkPackage</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSolNetworkPackageFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::delete_sol_network_package::builders::DeleteSolNetworkPackageInputBuilder
            }
impl DeleteSolNetworkPackageFluentBuilder  {
    /// Creates a new `DeleteSolNetworkPackage`.
                    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
                        Self { handle, inner: Default::default() }
                    }
    
                    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::delete_sol_network_package::DeleteSolNetworkPackage, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::delete_sol_network_package::DeleteSolNetworkPackageError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::delete_sol_network_package::DeleteSolNetworkPackageOutput, aws_smithy_http::result::SdkError<crate::operation::delete_sol_network_package::DeleteSolNetworkPackageError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn nsd_info_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.nsd_info_id(input.into());
        self
    }
    /// <p>ID of the network service descriptor in the network package.</p>
    pub fn set_nsd_info_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_nsd_info_id(input);
        self
    }
}

