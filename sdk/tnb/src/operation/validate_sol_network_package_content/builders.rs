// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::validate_sol_network_package_content::_validate_sol_network_package_content_output::ValidateSolNetworkPackageContentOutputBuilder;

pub use crate::operation::validate_sol_network_package_content::_validate_sol_network_package_content_input::ValidateSolNetworkPackageContentInputBuilder;

/// Fluent builder constructing a request to `ValidateSolNetworkPackageContent`.
///
/// <p>Validates network package content. This can be used as a dry run before uploading network package content with <a href="https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolNetworkPackageContent.html">PutSolNetworkPackageContent</a>.</p>
/// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ValidateSolNetworkPackageContentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::validate_sol_network_package_content::builders::ValidateSolNetworkPackageContentInputBuilder,
}
impl ValidateSolNetworkPackageContentFluentBuilder {
    /// Creates a new `ValidateSolNetworkPackageContent`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }
    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::validate_sol_network_package_content::ValidateSolNetworkPackageContent, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::validate_sol_network_package_content::ValidateSolNetworkPackageContentError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::validate_sol_network_package_content::ValidateSolNetworkPackageContentOutput, aws_smithy_http::result::SdkError<crate::operation::validate_sol_network_package_content::ValidateSolNetworkPackageContentError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Network service descriptor file.</p>
    pub fn nsd_info_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.nsd_info_id(input.into());
        self
    }
    /// <p>Network service descriptor file.</p>
    pub fn set_nsd_info_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_nsd_info_id(input);
        self
    }
    /// <p>Network package content type.</p>
    pub fn content_type(mut self, input: crate::types::PackageContentType) -> Self {
        self.inner = self.inner.content_type(input);
        self
    }
    /// <p>Network package content type.</p>
    pub fn set_content_type(
        mut self,
        input: std::option::Option<crate::types::PackageContentType>,
    ) -> Self {
        self.inner = self.inner.set_content_type(input);
        self
    }
    /// <p>Network package file.</p>
    pub fn file(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.file(input);
        self
    }
    /// <p>Network package file.</p>
    pub fn set_file(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_file(input);
        self
    }
}
