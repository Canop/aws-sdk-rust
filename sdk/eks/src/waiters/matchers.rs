// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"addon.status","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_addon_a62f0a565d1671308(
    _result: ::std::result::Result<&crate::operation::describe_addon::DescribeAddonOutput, &crate::operation::describe_addon::DescribeAddonError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_addon::DescribeAddonOutput,
    ) -> ::std::option::Option<&'a crate::types::AddonStatus> {
        let _fld_1 = _output.addon.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"addon.status","expected":"DEGRADED","comparator":"stringEquals"}}
pub(crate) fn match_describe_addon_6138145771db8ed3a(
    _result: ::std::result::Result<&crate::operation::describe_addon::DescribeAddonOutput, &crate::operation::describe_addon::DescribeAddonError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_addon::DescribeAddonOutput,
    ) -> ::std::option::Option<&'a crate::types::AddonStatus> {
        let _fld_1 = _output.addon.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DEGRADED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"addon.status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_addon_8f782ed0323ba973f(
    _result: ::std::result::Result<&crate::operation::describe_addon::DescribeAddonOutput, &crate::operation::describe_addon::DescribeAddonError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_addon::DescribeAddonOutput,
    ) -> ::std::option::Option<&'a crate::types::AddonStatus> {
        let _fld_1 = _output.addon.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"addon.status","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_addon_f140b77ae2af62414(
    _result: ::std::result::Result<&crate::operation::describe_addon::DescribeAddonOutput, &crate::operation::describe_addon::DescribeAddonError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_addon::DescribeAddonOutput,
    ) -> ::std::option::Option<&'a crate::types::AddonStatus> {
        let _fld_1 = _output.addon.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_addon_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::describe_addon::DescribeAddonOutput, &crate::operation::describe_addon::DescribeAddonError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"cluster.status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_2e0bd61808cbeec1a(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterStatus> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"cluster.status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_06c799b34731ffd71(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterStatus> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"cluster.status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_8e9a63e8d6f5374c3(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterStatus> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"cluster.status","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_25fcb54f3dbca748d(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterStatus> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"cluster.status","expected":"PENDING","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_79906cd838aa35428(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_cluster::DescribeClusterOutput,
    ) -> ::std::option::Option<&'a crate::types::ClusterStatus> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_cluster_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"fargateProfile.status","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fargate_profile_878446975b853b010(
    _result: ::std::result::Result<
        &crate::operation::describe_fargate_profile::DescribeFargateProfileOutput,
        &crate::operation::describe_fargate_profile::DescribeFargateProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fargate_profile::DescribeFargateProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::FargateProfileStatus> {
        let _fld_1 = _output.fargate_profile.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"fargateProfile.status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_fargate_profile_fd5ae8faa232dab83(
    _result: ::std::result::Result<
        &crate::operation::describe_fargate_profile::DescribeFargateProfileOutput,
        &crate::operation::describe_fargate_profile::DescribeFargateProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fargate_profile::DescribeFargateProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::FargateProfileStatus> {
        let _fld_1 = _output.fargate_profile.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"fargateProfile.status","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fargate_profile_40684fe648ad679bd(
    _result: ::std::result::Result<
        &crate::operation::describe_fargate_profile::DescribeFargateProfileOutput,
        &crate::operation::describe_fargate_profile::DescribeFargateProfileError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fargate_profile::DescribeFargateProfileOutput,
    ) -> ::std::option::Option<&'a crate::types::FargateProfileStatus> {
        let _fld_1 = _output.fargate_profile.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_fargate_profile_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_fargate_profile::DescribeFargateProfileOutput,
        &crate::operation::describe_fargate_profile::DescribeFargateProfileError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"nodegroup.status","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_nodegroup_605c4724caeafc7f7(
    _result: ::std::result::Result<
        &crate::operation::describe_nodegroup::DescribeNodegroupOutput,
        &crate::operation::describe_nodegroup::DescribeNodegroupError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_nodegroup::DescribeNodegroupOutput,
    ) -> ::std::option::Option<&'a crate::types::NodegroupStatus> {
        let _fld_1 = _output.nodegroup.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"nodegroup.status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_nodegroup_b76009d53c2fdae85(
    _result: ::std::result::Result<
        &crate::operation::describe_nodegroup::DescribeNodegroupOutput,
        &crate::operation::describe_nodegroup::DescribeNodegroupError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_nodegroup::DescribeNodegroupOutput,
    ) -> ::std::option::Option<&'a crate::types::NodegroupStatus> {
        let _fld_1 = _output.nodegroup.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"nodegroup.status","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_nodegroup_ea961478468f9d103(
    _result: ::std::result::Result<
        &crate::operation::describe_nodegroup::DescribeNodegroupOutput,
        &crate::operation::describe_nodegroup::DescribeNodegroupError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_nodegroup::DescribeNodegroupOutput,
    ) -> ::std::option::Option<&'a crate::types::NodegroupStatus> {
        let _fld_1 = _output.nodegroup.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_nodegroup_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_nodegroup::DescribeNodegroupOutput,
        &crate::operation::describe_nodegroup::DescribeNodegroupError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}
