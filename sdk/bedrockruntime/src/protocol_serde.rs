// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_converse;

pub(crate) mod shape_converse_stream;

pub(crate) mod shape_invoke_model;

pub(crate) mod shape_invoke_model_input;

pub(crate) mod shape_invoke_model_with_response_stream;

pub(crate) mod shape_invoke_model_with_response_stream_input;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_converse_input;

pub(crate) mod shape_converse_stream_input;

pub(crate) mod shape_converse_stream_output;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_invoke_model_output;

pub(crate) mod shape_invoke_model_with_response_stream_output;

pub(crate) mod shape_model_error_exception;

pub(crate) mod shape_model_not_ready_exception;

pub(crate) mod shape_model_stream_error_exception;

pub(crate) mod shape_model_timeout_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_validation_exception;

pub fn parse_event_stream_error_metadata(
    payload: &::bytes::Bytes,
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    // Note: HeaderMap::new() doesn't allocate
    crate::json_errors::parse_error_metadata(payload, &::aws_smithy_runtime_api::http::Headers::new())
}

pub(crate) mod shape_converse_metrics;

pub(crate) mod shape_converse_output;

pub(crate) mod shape_inference_configuration;

pub(crate) mod shape_message;

pub(crate) mod shape_system_content_block;

pub(crate) mod shape_token_usage;

pub(crate) mod shape_tool_configuration;

pub(crate) mod shape_content_block;

pub(crate) mod shape_content_block_delta_event;

pub(crate) mod shape_content_block_start_event;

pub(crate) mod shape_content_block_stop_event;

pub(crate) mod shape_converse_stream_metadata_event;

pub(crate) mod shape_message_start_event;

pub(crate) mod shape_message_stop_event;

pub(crate) mod shape_payload_part;

pub(crate) mod shape_tool;

pub(crate) mod shape_tool_choice;

pub(crate) mod shape_any_tool_choice;

pub(crate) mod shape_auto_tool_choice;

pub(crate) mod shape_content_blocks;

pub(crate) mod shape_image_block;

pub(crate) mod shape_specific_tool_choice;

pub(crate) mod shape_tool_result_block;

pub(crate) mod shape_tool_specification;

pub(crate) mod shape_tool_use_block;

pub(crate) mod shape_content_block_delta;

pub(crate) mod shape_content_block_start;

pub(crate) mod shape_converse_stream_metrics;

pub(crate) mod shape_image_source;

pub(crate) mod shape_tool_input_schema;

pub(crate) mod shape_tool_result_content_block;

pub(crate) mod shape_tool_use_block_delta;

pub(crate) mod shape_tool_use_block_start;

pub(crate) mod shape_tool_result_content_blocks;
