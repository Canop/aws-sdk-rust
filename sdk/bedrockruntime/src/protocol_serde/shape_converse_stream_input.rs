// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_converse_stream_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::converse_stream::ConverseStreamInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_model_request_fields {
        object.key("additionalModelRequestFields").document(var_1);
    }
    if let Some(var_2) = &input.additional_model_response_field_paths {
        let mut array_3 = object.key("additionalModelResponseFieldPaths").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.inference_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("inferenceConfig").start_object();
        crate::protocol_serde::shape_inference_configuration::ser_inference_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.messages {
        let mut array_8 = object.key("messages").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_message::ser_message(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.system {
        let mut array_12 = object.key("system").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_system_content_block::ser_system_content_block(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.tool_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("toolConfig").start_object();
        crate::protocol_serde::shape_tool_configuration::ser_tool_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
