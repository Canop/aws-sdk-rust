// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_malware_protection_plan::_delete_malware_protection_plan_output::DeleteMalwareProtectionPlanOutputBuilder;

pub use crate::operation::delete_malware_protection_plan::_delete_malware_protection_plan_input::DeleteMalwareProtectionPlanInputBuilder;

impl crate::operation::delete_malware_protection_plan::builders::DeleteMalwareProtectionPlanInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_malware_protection_plan();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteMalwareProtectionPlan`.
///
/// <p>Deletes the Malware Protection plan ID associated with the Malware Protection plan resource. Use this API only when you no longer want to protect the resource associated with this Malware Protection plan ID.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteMalwareProtectionPlanFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_malware_protection_plan::builders::DeleteMalwareProtectionPlanInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanOutput,
        crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanError,
    > for DeleteMalwareProtectionPlanFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanOutput,
            crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteMalwareProtectionPlanFluentBuilder {
    /// Creates a new `DeleteMalwareProtectionPlanFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteMalwareProtectionPlan as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_malware_protection_plan::builders::DeleteMalwareProtectionPlanInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlan::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlan::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanOutput,
        crate::operation::delete_malware_protection_plan::DeleteMalwareProtectionPlanError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique identifier associated with Malware Protection plan resource.</p>
    pub fn malware_protection_plan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.malware_protection_plan_id(input.into());
        self
    }
    /// <p>A unique identifier associated with Malware Protection plan resource.</p>
    pub fn set_malware_protection_plan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_malware_protection_plan_id(input);
        self
    }
    /// <p>A unique identifier associated with Malware Protection plan resource.</p>
    pub fn get_malware_protection_plan_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_malware_protection_plan_id()
    }
}
