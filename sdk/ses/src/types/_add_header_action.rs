// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>When included in a receipt rule, this action adds a header to the received email.</p>
/// <p>For information about adding a header using a receipt rule, see the <a href="https://docs.aws.amazon.com/ses/latest/dg/receiving-email-action-add-header.html">Amazon SES Developer Guide</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddHeaderAction {
    /// <p>The name of the header to add to the incoming message. The name must contain at least one character, and can contain up to 50 characters. It consists of alphanumeric (a–z, A–Z, 0–9) characters and dashes.</p>
    pub header_name: ::std::option::Option<::std::string::String>,
    /// <p>The content to include in the header. This value can contain up to 2048 characters. It can't contain newline (<code>\n</code>) or carriage return (<code>\r</code>) characters.</p>
    pub header_value: ::std::option::Option<::std::string::String>,
}
impl AddHeaderAction {
    /// <p>The name of the header to add to the incoming message. The name must contain at least one character, and can contain up to 50 characters. It consists of alphanumeric (a–z, A–Z, 0–9) characters and dashes.</p>
    pub fn header_name(&self) -> ::std::option::Option<&str> {
        self.header_name.as_deref()
    }
    /// <p>The content to include in the header. This value can contain up to 2048 characters. It can't contain newline (<code>\n</code>) or carriage return (<code>\r</code>) characters.</p>
    pub fn header_value(&self) -> ::std::option::Option<&str> {
        self.header_value.as_deref()
    }
}
impl AddHeaderAction {
    /// Creates a new builder-style object to manufacture [`AddHeaderAction`](crate::types::AddHeaderAction).
    pub fn builder() -> crate::types::builders::AddHeaderActionBuilder {
        crate::types::builders::AddHeaderActionBuilder::default()
    }
}

/// A builder for [`AddHeaderAction`](crate::types::AddHeaderAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddHeaderActionBuilder {
    pub(crate) header_name: ::std::option::Option<::std::string::String>,
    pub(crate) header_value: ::std::option::Option<::std::string::String>,
}
impl AddHeaderActionBuilder {
    /// <p>The name of the header to add to the incoming message. The name must contain at least one character, and can contain up to 50 characters. It consists of alphanumeric (a–z, A–Z, 0–9) characters and dashes.</p>
    pub fn header_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.header_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the header to add to the incoming message. The name must contain at least one character, and can contain up to 50 characters. It consists of alphanumeric (a–z, A–Z, 0–9) characters and dashes.</p>
    pub fn set_header_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.header_name = input;
        self
    }
    /// <p>The name of the header to add to the incoming message. The name must contain at least one character, and can contain up to 50 characters. It consists of alphanumeric (a–z, A–Z, 0–9) characters and dashes.</p>
    pub fn get_header_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.header_name
    }
    /// <p>The content to include in the header. This value can contain up to 2048 characters. It can't contain newline (<code>\n</code>) or carriage return (<code>\r</code>) characters.</p>
    pub fn header_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.header_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content to include in the header. This value can contain up to 2048 characters. It can't contain newline (<code>\n</code>) or carriage return (<code>\r</code>) characters.</p>
    pub fn set_header_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.header_value = input;
        self
    }
    /// <p>The content to include in the header. This value can contain up to 2048 characters. It can't contain newline (<code>\n</code>) or carriage return (<code>\r</code>) characters.</p>
    pub fn get_header_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.header_value
    }
    /// Consumes the builder and constructs a [`AddHeaderAction`](crate::types::AddHeaderAction).
    pub fn build(self) -> crate::types::AddHeaderAction {
        crate::types::AddHeaderAction {
            header_name: self.header_name,
            header_value: self.header_value,
        }
    }
}
