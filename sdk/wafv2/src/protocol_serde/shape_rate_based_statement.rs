// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rate_based_statement(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RateBasedStatement,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.aggregate_key_type {
        object.key("AggregateKeyType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.scope_down_statement {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ScopeDownStatement").start_object();
        crate::protocol_serde::shape_statement::ser_statement(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.forwarded_ip_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ForwardedIPConfig").start_object();
        crate::protocol_serde::shape_forwarded_ip_config::ser_forwarded_ip_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.custom_keys {
        let mut array_8 = object.key("CustomKeys").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_rate_based_statement_custom_key::ser_rate_based_statement_custom_key(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}

pub(crate) fn de_rate_based_statement<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::RateBasedStatement>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RateBasedStatementBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Limit" => {
                            builder = builder.set_limit(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "AggregateKeyType" => {
                            builder = builder.set_aggregate_key_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::RateBasedStatementAggregateKeyType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "ScopeDownStatement" => {
                            builder = builder.set_scope_down_statement(crate::protocol_serde::shape_statement::de_statement(tokens)?.map(Box::new));
                        }
                        "ForwardedIPConfig" => {
                            builder =
                                builder.set_forwarded_ip_config(crate::protocol_serde::shape_forwarded_ip_config::de_forwarded_ip_config(tokens)?);
                        }
                        "CustomKeys" => {
                            builder = builder.set_custom_keys(
                                crate::protocol_serde::shape_rate_based_statement_custom_keys::de_rate_based_statement_custom_keys(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
