// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateApiKeyInput {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, or an App Runner service. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub scope: std::option::Option<crate::types::Scope>,
    /// <p>The client application domains that you want to use this API key for. </p>
    #[doc(hidden)]
    pub token_domains: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateApiKeyInput {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, or an App Runner service. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn scope(&self) -> std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
    /// <p>The client application domains that you want to use this API key for. </p>
    pub fn token_domains(&self) -> std::option::Option<&[std::string::String]> {
        self.token_domains.as_deref()
    }
}
impl CreateApiKeyInput {
    /// Creates a new builder-style object to manufacture [`CreateApiKeyInput`](crate::operation::create_api_key::CreateApiKeyInput).
    pub fn builder() -> crate::operation::create_api_key::builders::CreateApiKeyInputBuilder {
        crate::operation::create_api_key::builders::CreateApiKeyInputBuilder::default()
    }
}

/// A builder for [`CreateApiKeyInput`](crate::operation::create_api_key::CreateApiKeyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateApiKeyInputBuilder {
    pub(crate) scope: std::option::Option<crate::types::Scope>,
    pub(crate) token_domains: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateApiKeyInputBuilder {
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, or an App Runner service. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = Some(input);
        self
    }
    /// <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, or an App Runner service. </p>
    /// <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    /// <ul>
    /// <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li>
    /// <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li>
    /// </ul>
    pub fn set_scope(mut self, input: std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// Appends an item to `token_domains`.
    ///
    /// To override the contents of this collection use [`set_token_domains`](Self::set_token_domains).
    ///
    /// <p>The client application domains that you want to use this API key for. </p>
    pub fn token_domains(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.token_domains.unwrap_or_default();
        v.push(input.into());
        self.token_domains = Some(v);
        self
    }
    /// <p>The client application domains that you want to use this API key for. </p>
    pub fn set_token_domains(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.token_domains = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateApiKeyInput`](crate::operation::create_api_key::CreateApiKeyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_api_key::CreateApiKeyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_api_key::CreateApiKeyInput {
            scope: self.scope,
            token_domains: self.token_domains,
        })
    }
}
