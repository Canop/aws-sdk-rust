// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_service_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_service::CreateServiceInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    {
        object.key("EndpointType").string(input.endpoint_type.as_str());
    }
    if let Some(var_3) = &input.lambda_endpoint {
        #[allow(unused_mut)]
        let mut object_4 = object.key("LambdaEndpoint").start_object();
        crate::protocol_serde::shape_lambda_endpoint_input::ser_lambda_endpoint_input(&mut object_4, var_3)?;
        object_4.finish();
    }
    {
        object.key("Name").string(input.name.as_str());
    }
    if let Some(var_5) = &input.tags {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Tags").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.url_endpoint {
        #[allow(unused_mut)]
        let mut object_10 = object.key("UrlEndpoint").start_object();
        crate::protocol_serde::shape_url_endpoint_input::ser_url_endpoint_input(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.vpc_id {
        object.key("VpcId").string(var_11.as_str());
    }
    Ok(())
}
