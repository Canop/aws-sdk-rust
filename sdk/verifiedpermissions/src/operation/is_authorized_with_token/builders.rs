// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::is_authorized_with_token::_is_authorized_with_token_output::IsAuthorizedWithTokenOutputBuilder;

pub use crate::operation::is_authorized_with_token::_is_authorized_with_token_input::IsAuthorizedWithTokenInputBuilder;

/// Fluent builder constructing a request to `IsAuthorizedWithToken`.
///
/// <p>Makes an authorization decision about a service request described in the parameters. The principal in this request comes from an external identity source. The information in the parameters can also define additional context that Verified Permissions can include in the evaluation. The request is evaluated against all matching policies in the specified policy store. The result of the decision is either <code>Allow</code> or <code>Deny</code>, along with a list of the policies that resulted in the decision.</p> <important>
/// <p>If you delete a Amazon Cognito user pool or user, tokens from that deleted pool or that deleted user continue to be usable until they expire.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct IsAuthorizedWithTokenFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::is_authorized_with_token::builders::IsAuthorizedWithTokenInputBuilder,
}
impl IsAuthorizedWithTokenFluentBuilder {
    /// Creates a new `IsAuthorizedWithToken`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn customize_middleware(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::is_authorized_with_token::IsAuthorizedWithToken,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::is_authorized_with_token::IsAuthorizedWithTokenError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn send_middleware(
        self,
    ) -> ::std::result::Result<
        crate::operation::is_authorized_with_token::IsAuthorizedWithTokenOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::is_authorized_with_token::IsAuthorizedWithTokenError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::is_authorized_with_token::IsAuthorizedWithTokenOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::is_authorized_with_token::IsAuthorizedWithTokenError,
        >,
    > {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::is_authorized_with_token::IsAuthorizedWithToken,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::is_authorized_with_token::IsAuthorizedWithTokenError,
        >,
    > {
        self.customize_middleware().await
    }
    /// <p>Specifies the ID of the policy store. Policies in this policy store will be used to make an authorization decision for the input.</p>
    pub fn policy_store_id(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.policy_store_id(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store. Policies in this policy store will be used to make an authorization decision for the input.</p>
    pub fn set_policy_store_id(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_policy_store_id(input);
        self
    }
    /// <p>Specifies an identity token for the principal to be authorized. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>AccessToken</code> or an <code>IdentityToken</code>, but not both.</p>
    pub fn identity_token(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.identity_token(input.into());
        self
    }
    /// <p>Specifies an identity token for the principal to be authorized. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>AccessToken</code> or an <code>IdentityToken</code>, but not both.</p>
    pub fn set_identity_token(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_identity_token(input);
        self
    }
    /// <p>Specifies an access token for the principal to be authorized. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>AccessToken</code> or an <code>IdentityToken</code>, but not both.</p>
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.access_token(input.into());
        self
    }
    /// <p>Specifies an access token for the principal to be authorized. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>AccessToken</code> or an <code>IdentityToken</code>, but not both.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_access_token(input);
        self
    }
    /// <p>Specifies the requested action to be authorized. Is the specified principal authorized to perform this action on the specified resource.</p>
    pub fn action(mut self, input: crate::types::ActionIdentifier) -> Self {
        self.inner = self.inner.action(input);
        self
    }
    /// <p>Specifies the requested action to be authorized. Is the specified principal authorized to perform this action on the specified resource.</p>
    pub fn set_action(
        mut self,
        input: ::std::option::Option<crate::types::ActionIdentifier>,
    ) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// <p>Specifies the resource for which the authorization decision is made. For example, is the principal allowed to perform the action on the resource?</p>
    pub fn resource(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.inner = self.inner.resource(input);
        self
    }
    /// <p>Specifies the resource for which the authorization decision is made. For example, is the principal allowed to perform the action on the resource?</p>
    pub fn set_resource(
        mut self,
        input: ::std::option::Option<crate::types::EntityIdentifier>,
    ) -> Self {
        self.inner = self.inner.set_resource(input);
        self
    }
    /// <p>Specifies additional context that can be used to make more granular authorization decisions.</p>
    pub fn context(mut self, input: crate::types::ContextDefinition) -> Self {
        self.inner = self.inner.context(input);
        self
    }
    /// <p>Specifies additional context that can be used to make more granular authorization decisions.</p>
    pub fn set_context(
        mut self,
        input: ::std::option::Option<crate::types::ContextDefinition>,
    ) -> Self {
        self.inner = self.inner.set_context(input);
        self
    }
    /// <p>Specifies the list of resources and principals and their associated attributes that Verified Permissions can examine when evaluating the policies. </p> <note>
    /// <p>You can include only principal and resource entities in this parameter; you can't include actions. You must specify actions in the schema.</p>
    /// </note>
    pub fn entities(mut self, input: crate::types::EntitiesDefinition) -> Self {
        self.inner = self.inner.entities(input);
        self
    }
    /// <p>Specifies the list of resources and principals and their associated attributes that Verified Permissions can examine when evaluating the policies. </p> <note>
    /// <p>You can include only principal and resource entities in this parameter; you can't include actions. You must specify actions in the schema.</p>
    /// </note>
    pub fn set_entities(
        mut self,
        input: ::std::option::Option<crate::types::EntitiesDefinition>,
    ) -> Self {
        self.inner = self.inner.set_entities(input);
        self
    }
}
