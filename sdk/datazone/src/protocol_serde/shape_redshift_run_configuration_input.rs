// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_redshift_run_configuration_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RedshiftRunConfigurationInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.data_access_role {
        object.key("dataAccessRole").string(var_1.as_str());
    }
    if let Some(var_2) = &input.relational_filter_configurations {
        let mut array_3 = object.key("relationalFilterConfigurations").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_relational_filter_configuration::ser_relational_filter_configuration(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.redshift_credential_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("redshiftCredentialConfiguration").start_object();
        crate::protocol_serde::shape_redshift_credential_configuration::ser_redshift_credential_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.redshift_storage {
        #[allow(unused_mut)]
        let mut object_9 = object.key("redshiftStorage").start_object();
        crate::protocol_serde::shape_redshift_storage::ser_redshift_storage(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
