// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a Amazon DataZone domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DomainSummary {
    /// <p>The ID of the Amazon DataZone domain.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A name of an Amazon DataZone domain.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of an Amazon DataZone domain.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Amazon DataZone domain.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Web Services account that manages the domain.</p>
    pub managed_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Amazon DataZone domain.</p>
    pub status: ::std::option::Option<crate::types::DomainStatus>,
    /// <p>The data portal URL for the Amazon DataZone domain.</p>
    pub portal_url: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp of when a Amazon DataZone domain was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp of when a Amazon DataZone domain was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DomainSummary {
    /// <p>The ID of the Amazon DataZone domain.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A name of an Amazon DataZone domain.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of an Amazon DataZone domain.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the Amazon DataZone domain.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The identifier of the Amazon Web Services account that manages the domain.</p>
    pub fn managed_account_id(&self) -> ::std::option::Option<&str> {
        self.managed_account_id.as_deref()
    }
    /// <p>The status of the Amazon DataZone domain.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DomainStatus> {
        self.status.as_ref()
    }
    /// <p>The data portal URL for the Amazon DataZone domain.</p>
    pub fn portal_url(&self) -> ::std::option::Option<&str> {
        self.portal_url.as_deref()
    }
    /// <p>A timestamp of when a Amazon DataZone domain was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>A timestamp of when a Amazon DataZone domain was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for DomainSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DomainSummary");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("managed_account_id", &self.managed_account_id);
        formatter.field("status", &self.status);
        formatter.field("portal_url", &self.portal_url);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
impl DomainSummary {
    /// Creates a new builder-style object to manufacture [`DomainSummary`](crate::types::DomainSummary).
    pub fn builder() -> crate::types::builders::DomainSummaryBuilder {
        crate::types::builders::DomainSummaryBuilder::default()
    }
}

/// A builder for [`DomainSummary`](crate::types::DomainSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DomainSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) managed_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DomainStatus>,
    pub(crate) portal_url: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DomainSummaryBuilder {
    /// <p>The ID of the Amazon DataZone domain.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A name of an Amazon DataZone domain.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name of an Amazon DataZone domain.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name of an Amazon DataZone domain.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of an Amazon DataZone domain.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of an Amazon DataZone domain.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of an Amazon DataZone domain.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ARN of the Amazon DataZone domain.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon DataZone domain.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the Amazon DataZone domain.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The identifier of the Amazon Web Services account that manages the domain.</p>
    pub fn managed_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account that manages the domain.</p>
    pub fn set_managed_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_account_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account that manages the domain.</p>
    pub fn get_managed_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_account_id
    }
    /// <p>The status of the Amazon DataZone domain.</p>
    pub fn status(mut self, input: crate::types::DomainStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Amazon DataZone domain.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DomainStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Amazon DataZone domain.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DomainStatus> {
        &self.status
    }
    /// <p>The data portal URL for the Amazon DataZone domain.</p>
    pub fn portal_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data portal URL for the Amazon DataZone domain.</p>
    pub fn set_portal_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_url = input;
        self
    }
    /// <p>The data portal URL for the Amazon DataZone domain.</p>
    pub fn get_portal_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_url
    }
    /// <p>A timestamp of when a Amazon DataZone domain was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of when a Amazon DataZone domain was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp of when a Amazon DataZone domain was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>A timestamp of when a Amazon DataZone domain was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of when a Amazon DataZone domain was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>A timestamp of when a Amazon DataZone domain was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Consumes the builder and constructs a [`DomainSummary`](crate::types::DomainSummary).
    pub fn build(self) -> crate::types::DomainSummary {
        crate::types::DomainSummary {
            id: self.id,
            name: self.name,
            description: self.description,
            arn: self.arn,
            managed_account_id: self.managed_account_id,
            status: self.status,
            portal_url: self.portal_url,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
        }
    }
}
impl ::std::fmt::Debug for DomainSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DomainSummaryBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("managed_account_id", &self.managed_account_id);
        formatter.field("status", &self.status);
        formatter.field("portal_url", &self.portal_url);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
