// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the import of the metadata form type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Import {
    /// <p>The name of the import.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the import.</p>
    pub revision: ::std::option::Option<::std::string::String>,
}
impl Import {
    /// <p>The name of the import.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The revision of the import.</p>
    pub fn revision(&self) -> ::std::option::Option<&str> {
        self.revision.as_deref()
    }
}
impl ::std::fmt::Debug for Import {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Import");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("revision", &self.revision);
        formatter.finish()
    }
}
impl Import {
    /// Creates a new builder-style object to manufacture [`Import`](crate::types::Import).
    pub fn builder() -> crate::types::builders::ImportBuilder {
        crate::types::builders::ImportBuilder::default()
    }
}

/// A builder for [`Import`](crate::types::Import).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ImportBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
}
impl ImportBuilder {
    /// <p>The name of the import.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the import.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the import.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The revision of the import.</p>
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the import.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the import.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// Consumes the builder and constructs a [`Import`](crate::types::Import).
    pub fn build(self) -> crate::types::Import {
        crate::types::Import {
            name: self.name,
            revision: self.revision,
        }
    }
}
impl ::std::fmt::Debug for ImportBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImportBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("revision", &self.revision);
        formatter.finish()
    }
}
