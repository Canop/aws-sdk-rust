// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the form entry.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FormEntryOutput {
    /// <p>The name of the type of the form entry.</p>
    pub type_name: ::std::option::Option<::std::string::String>,
    /// <p>The type revision of the form entry.</p>
    pub type_revision: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether a form entry is required.</p>
    pub required: ::std::option::Option<bool>,
}
impl FormEntryOutput {
    /// <p>The name of the type of the form entry.</p>
    pub fn type_name(&self) -> ::std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The type revision of the form entry.</p>
    pub fn type_revision(&self) -> ::std::option::Option<&str> {
        self.type_revision.as_deref()
    }
    /// <p>Specifies whether a form entry is required.</p>
    pub fn required(&self) -> ::std::option::Option<bool> {
        self.required
    }
}
impl ::std::fmt::Debug for FormEntryOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FormEntryOutput");
        formatter.field("type_name", &"*** Sensitive Data Redacted ***");
        formatter.field("type_revision", &self.type_revision);
        formatter.field("required", &self.required);
        formatter.finish()
    }
}
impl FormEntryOutput {
    /// Creates a new builder-style object to manufacture [`FormEntryOutput`](crate::types::FormEntryOutput).
    pub fn builder() -> crate::types::builders::FormEntryOutputBuilder {
        crate::types::builders::FormEntryOutputBuilder::default()
    }
}

/// A builder for [`FormEntryOutput`](crate::types::FormEntryOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct FormEntryOutputBuilder {
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) type_revision: ::std::option::Option<::std::string::String>,
    pub(crate) required: ::std::option::Option<bool>,
}
impl FormEntryOutputBuilder {
    /// <p>The name of the type of the form entry.</p>
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the type of the form entry.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The name of the type of the form entry.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The type revision of the form entry.</p>
    pub fn type_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type revision of the form entry.</p>
    pub fn set_type_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_revision = input;
        self
    }
    /// <p>The type revision of the form entry.</p>
    pub fn get_type_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_revision
    }
    /// <p>Specifies whether a form entry is required.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a form entry is required.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Specifies whether a form entry is required.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// Consumes the builder and constructs a [`FormEntryOutput`](crate::types::FormEntryOutput).
    pub fn build(self) -> crate::types::FormEntryOutput {
        crate::types::FormEntryOutput {
            type_name: self.type_name,
            type_revision: self.type_revision,
            required: self.required,
        }
    }
}
impl ::std::fmt::Debug for FormEntryOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FormEntryOutputBuilder");
        formatter.field("type_name", &"*** Sensitive Data Redacted ***");
        formatter.field("type_revision", &self.type_revision);
        formatter.field("required", &self.required);
        formatter.finish()
    }
}
