// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataProductSummary {
    /// <p></p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub owning_project_id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p></p>
    pub data_product_items: ::std::option::Option<::std::vec::Vec<crate::types::DataProductItem>>,
    /// <p></p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub updated_by: ::std::option::Option<::std::string::String>,
}
impl DataProductSummary {
    /// <p></p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p></p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p></p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p></p>
    pub fn owning_project_id(&self) -> ::std::option::Option<&str> {
        self.owning_project_id.as_deref()
    }
    /// <p></p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p></p>
    pub fn glossary_terms(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.glossary_terms.as_deref()
    }
    /// <p></p>
    pub fn data_product_items(&self) -> ::std::option::Option<&[crate::types::DataProductItem]> {
        self.data_product_items.as_deref()
    }
    /// <p></p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p></p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p></p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p></p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
}
impl ::std::fmt::Debug for DataProductSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataProductSummary");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("data_product_items", &self.data_product_items);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.finish()
    }
}
impl DataProductSummary {
    /// Creates a new builder-style object to manufacture [`DataProductSummary`](crate::types::DataProductSummary).
    pub fn builder() -> crate::types::builders::DataProductSummaryBuilder {
        crate::types::builders::DataProductSummaryBuilder::default()
    }
}

/// A builder for [`DataProductSummary`](crate::types::DataProductSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DataProductSummaryBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owning_project_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) data_product_items: ::std::option::Option<::std::vec::Vec<crate::types::DataProductItem>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
}
impl DataProductSummaryBuilder {
    /// <p></p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p></p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p></p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p></p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p></p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p></p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p></p>
    pub fn owning_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_owning_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_id = input;
        self
    }
    /// <p></p>
    pub fn get_owning_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_id
    }
    /// <p></p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p></p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p></p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p></p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p></p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// Appends an item to `data_product_items`.
    ///
    /// To override the contents of this collection use [`set_data_product_items`](Self::set_data_product_items).
    ///
    /// <p></p>
    pub fn data_product_items(mut self, input: crate::types::DataProductItem) -> Self {
        let mut v = self.data_product_items.unwrap_or_default();
        v.push(input);
        self.data_product_items = ::std::option::Option::Some(v);
        self
    }
    /// <p></p>
    pub fn set_data_product_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataProductItem>>) -> Self {
        self.data_product_items = input;
        self
    }
    /// <p></p>
    pub fn get_data_product_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataProductItem>> {
        &self.data_product_items
    }
    /// <p></p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p></p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p></p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p></p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p></p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p></p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p></p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p></p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// Consumes the builder and constructs a [`DataProductSummary`](crate::types::DataProductSummary).
    pub fn build(self) -> crate::types::DataProductSummary {
        crate::types::DataProductSummary {
            domain_id: self.domain_id,
            id: self.id,
            name: self.name,
            owning_project_id: self.owning_project_id,
            description: self.description,
            glossary_terms: self.glossary_terms,
            data_product_items: self.data_product_items,
            created_at: self.created_at,
            created_by: self.created_by,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
        }
    }
}
impl ::std::fmt::Debug for DataProductSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataProductSummaryBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("data_product_items", &self.data_product_items);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.finish()
    }
}
