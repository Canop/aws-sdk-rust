// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the subscription target configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubscriptionTargetForm {
    /// <p>The form name included in the subscription target configuration.</p>
    pub form_name: ::std::option::Option<::std::string::String>,
    /// <p>The content of the subscription target configuration.</p>
    pub content: ::std::option::Option<::std::string::String>,
}
impl SubscriptionTargetForm {
    /// <p>The form name included in the subscription target configuration.</p>
    pub fn form_name(&self) -> ::std::option::Option<&str> {
        self.form_name.as_deref()
    }
    /// <p>The content of the subscription target configuration.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
}
impl SubscriptionTargetForm {
    /// Creates a new builder-style object to manufacture [`SubscriptionTargetForm`](crate::types::SubscriptionTargetForm).
    pub fn builder() -> crate::types::builders::SubscriptionTargetFormBuilder {
        crate::types::builders::SubscriptionTargetFormBuilder::default()
    }
}

/// A builder for [`SubscriptionTargetForm`](crate::types::SubscriptionTargetForm).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubscriptionTargetFormBuilder {
    pub(crate) form_name: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
}
impl SubscriptionTargetFormBuilder {
    /// <p>The form name included in the subscription target configuration.</p>
    pub fn form_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.form_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The form name included in the subscription target configuration.</p>
    pub fn set_form_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.form_name = input;
        self
    }
    /// <p>The form name included in the subscription target configuration.</p>
    pub fn get_form_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.form_name
    }
    /// <p>The content of the subscription target configuration.</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the subscription target configuration.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the subscription target configuration.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// Consumes the builder and constructs a [`SubscriptionTargetForm`](crate::types::SubscriptionTargetForm).
    pub fn build(self) -> crate::types::SubscriptionTargetForm {
        crate::types::SubscriptionTargetForm {
            form_name: self.form_name,
            content: self.content,
        }
    }
}
