// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataSourceSummary {
    /// <p>The ID of the Amazon DataZone domain in which the data source exists.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the environment in which the data source exists.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the data source.</p>
    pub data_source_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the data source.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the data source.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The status of the data source.</p>
    pub status: ::std::option::Option<crate::types::DataSourceStatus>,
    /// <p>Specifies whether the data source is enabled.</p>
    pub enable_setting: ::std::option::Option<crate::types::EnableSetting>,
    /// <p>The details of the schedule of the data source runs.</p>
    pub schedule: ::std::option::Option<crate::types::ScheduleConfiguration>,
    /// <p>The status of the last data source run.</p>
    pub last_run_status: ::std::option::Option<crate::types::DataSourceRunStatus>,
    /// <p>The timestamp of when the data source run was last performed.</p>
    pub last_run_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The details of the error message that is returned if the operation cannot be successfully completed.</p>
    pub last_run_error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    /// <p>The count of the assets created during the last data source run.</p>
    pub last_run_asset_count: ::std::option::Option<i32>,
    /// <p>The timestamp of when the data source was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the data source was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataSourceSummary {
    /// <p>The ID of the Amazon DataZone domain in which the data source exists.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The ID of the environment in which the data source exists.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The ID of the data source.</p>
    pub fn data_source_id(&self) -> ::std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
    /// <p>The name of the data source.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the data source.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The status of the data source.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataSourceStatus> {
        self.status.as_ref()
    }
    /// <p>Specifies whether the data source is enabled.</p>
    pub fn enable_setting(&self) -> ::std::option::Option<&crate::types::EnableSetting> {
        self.enable_setting.as_ref()
    }
    /// <p>The details of the schedule of the data source runs.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::ScheduleConfiguration> {
        self.schedule.as_ref()
    }
    /// <p>The status of the last data source run.</p>
    pub fn last_run_status(&self) -> ::std::option::Option<&crate::types::DataSourceRunStatus> {
        self.last_run_status.as_ref()
    }
    /// <p>The timestamp of when the data source run was last performed.</p>
    pub fn last_run_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_run_at.as_ref()
    }
    /// <p>The details of the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn last_run_error_message(&self) -> ::std::option::Option<&crate::types::DataSourceErrorMessage> {
        self.last_run_error_message.as_ref()
    }
    /// <p>The count of the assets created during the last data source run.</p>
    pub fn last_run_asset_count(&self) -> ::std::option::Option<i32> {
        self.last_run_asset_count
    }
    /// <p>The timestamp of when the data source was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the data source was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for DataSourceSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataSourceSummary");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("data_source_id", &self.data_source_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("status", &self.status);
        formatter.field("enable_setting", &self.enable_setting);
        formatter.field("schedule", &"*** Sensitive Data Redacted ***");
        formatter.field("last_run_status", &self.last_run_status);
        formatter.field("last_run_at", &self.last_run_at);
        formatter.field("last_run_error_message", &self.last_run_error_message);
        formatter.field("last_run_asset_count", &self.last_run_asset_count);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
impl DataSourceSummary {
    /// Creates a new builder-style object to manufacture [`DataSourceSummary`](crate::types::DataSourceSummary).
    pub fn builder() -> crate::types::builders::DataSourceSummaryBuilder {
        crate::types::builders::DataSourceSummaryBuilder::default()
    }
}

/// A builder for [`DataSourceSummary`](crate::types::DataSourceSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DataSourceSummaryBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DataSourceStatus>,
    pub(crate) enable_setting: ::std::option::Option<crate::types::EnableSetting>,
    pub(crate) schedule: ::std::option::Option<crate::types::ScheduleConfiguration>,
    pub(crate) last_run_status: ::std::option::Option<crate::types::DataSourceRunStatus>,
    pub(crate) last_run_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_run_error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    pub(crate) last_run_asset_count: ::std::option::Option<i32>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataSourceSummaryBuilder {
    /// <p>The ID of the Amazon DataZone domain in which the data source exists.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the data source exists.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the data source exists.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the environment in which the data source exists.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment in which the data source exists.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of the environment in which the data source exists.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The ID of the data source.</p>
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data source.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The ID of the data source.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// <p>The name of the data source.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the data source.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the data source.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the data source.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The status of the data source.</p>
    pub fn status(mut self, input: crate::types::DataSourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the data source.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataSourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the data source.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataSourceStatus> {
        &self.status
    }
    /// <p>Specifies whether the data source is enabled.</p>
    pub fn enable_setting(mut self, input: crate::types::EnableSetting) -> Self {
        self.enable_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the data source is enabled.</p>
    pub fn set_enable_setting(mut self, input: ::std::option::Option<crate::types::EnableSetting>) -> Self {
        self.enable_setting = input;
        self
    }
    /// <p>Specifies whether the data source is enabled.</p>
    pub fn get_enable_setting(&self) -> &::std::option::Option<crate::types::EnableSetting> {
        &self.enable_setting
    }
    /// <p>The details of the schedule of the data source runs.</p>
    pub fn schedule(mut self, input: crate::types::ScheduleConfiguration) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the schedule of the data source runs.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::ScheduleConfiguration>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The details of the schedule of the data source runs.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::ScheduleConfiguration> {
        &self.schedule
    }
    /// <p>The status of the last data source run.</p>
    pub fn last_run_status(mut self, input: crate::types::DataSourceRunStatus) -> Self {
        self.last_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the last data source run.</p>
    pub fn set_last_run_status(mut self, input: ::std::option::Option<crate::types::DataSourceRunStatus>) -> Self {
        self.last_run_status = input;
        self
    }
    /// <p>The status of the last data source run.</p>
    pub fn get_last_run_status(&self) -> &::std::option::Option<crate::types::DataSourceRunStatus> {
        &self.last_run_status
    }
    /// <p>The timestamp of when the data source run was last performed.</p>
    pub fn last_run_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_run_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the data source run was last performed.</p>
    pub fn set_last_run_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_run_at = input;
        self
    }
    /// <p>The timestamp of when the data source run was last performed.</p>
    pub fn get_last_run_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_run_at
    }
    /// <p>The details of the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn last_run_error_message(mut self, input: crate::types::DataSourceErrorMessage) -> Self {
        self.last_run_error_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn set_last_run_error_message(mut self, input: ::std::option::Option<crate::types::DataSourceErrorMessage>) -> Self {
        self.last_run_error_message = input;
        self
    }
    /// <p>The details of the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn get_last_run_error_message(&self) -> &::std::option::Option<crate::types::DataSourceErrorMessage> {
        &self.last_run_error_message
    }
    /// <p>The count of the assets created during the last data source run.</p>
    pub fn last_run_asset_count(mut self, input: i32) -> Self {
        self.last_run_asset_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of the assets created during the last data source run.</p>
    pub fn set_last_run_asset_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.last_run_asset_count = input;
        self
    }
    /// <p>The count of the assets created during the last data source run.</p>
    pub fn get_last_run_asset_count(&self) -> &::std::option::Option<i32> {
        &self.last_run_asset_count
    }
    /// <p>The timestamp of when the data source was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the data source was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the data source was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the data source was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the data source was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the data source was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`DataSourceSummary`](crate::types::DataSourceSummary).
    pub fn build(self) -> crate::types::DataSourceSummary {
        crate::types::DataSourceSummary {
            domain_id: self.domain_id,
            environment_id: self.environment_id,
            data_source_id: self.data_source_id,
            name: self.name,
            r#type: self.r#type,
            status: self.status,
            enable_setting: self.enable_setting,
            schedule: self.schedule,
            last_run_status: self.last_run_status,
            last_run_at: self.last_run_at,
            last_run_error_message: self.last_run_error_message,
            last_run_asset_count: self.last_run_asset_count,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
impl ::std::fmt::Debug for DataSourceSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataSourceSummaryBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("data_source_id", &self.data_source_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("status", &self.status);
        formatter.field("enable_setting", &self.enable_setting);
        formatter.field("schedule", &"*** Sensitive Data Redacted ***");
        formatter.field("last_run_status", &self.last_run_status);
        formatter.field("last_run_at", &self.last_run_at);
        formatter.field("last_run_error_message", &self.last_run_error_message);
        formatter.field("last_run_asset_count", &self.last_run_asset_count);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
