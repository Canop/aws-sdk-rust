// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configurable action of a Amazon DataZone environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurableEnvironmentAction {
    /// <p>The type of a configurable action in a Amazon DataZone environment.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The authentication type of a configurable action of a Amazon DataZone environment. </p>
    pub auth: ::std::option::Option<crate::types::ConfigurableActionTypeAuthorization>,
    /// <p>The parameters of a configurable action in a Amazon DataZone environment.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurableActionParameter>>,
}
impl ConfigurableEnvironmentAction {
    /// <p>The type of a configurable action in a Amazon DataZone environment.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The authentication type of a configurable action of a Amazon DataZone environment. </p>
    pub fn auth(&self) -> ::std::option::Option<&crate::types::ConfigurableActionTypeAuthorization> {
        self.auth.as_ref()
    }
    /// <p>The parameters of a configurable action in a Amazon DataZone environment.</p>
    pub fn parameters(&self) -> ::std::option::Option<&[crate::types::ConfigurableActionParameter]> {
        self.parameters.as_deref()
    }
}
impl ConfigurableEnvironmentAction {
    /// Creates a new builder-style object to manufacture [`ConfigurableEnvironmentAction`](crate::types::ConfigurableEnvironmentAction).
    pub fn builder() -> crate::types::builders::ConfigurableEnvironmentActionBuilder {
        crate::types::builders::ConfigurableEnvironmentActionBuilder::default()
    }
}

/// A builder for [`ConfigurableEnvironmentAction`](crate::types::ConfigurableEnvironmentAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurableEnvironmentActionBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) auth: ::std::option::Option<crate::types::ConfigurableActionTypeAuthorization>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurableActionParameter>>,
}
impl ConfigurableEnvironmentActionBuilder {
    /// <p>The type of a configurable action in a Amazon DataZone environment.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of a configurable action in a Amazon DataZone environment.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of a configurable action in a Amazon DataZone environment.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The authentication type of a configurable action of a Amazon DataZone environment. </p>
    pub fn auth(mut self, input: crate::types::ConfigurableActionTypeAuthorization) -> Self {
        self.auth = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type of a configurable action of a Amazon DataZone environment. </p>
    pub fn set_auth(mut self, input: ::std::option::Option<crate::types::ConfigurableActionTypeAuthorization>) -> Self {
        self.auth = input;
        self
    }
    /// <p>The authentication type of a configurable action of a Amazon DataZone environment. </p>
    pub fn get_auth(&self) -> &::std::option::Option<crate::types::ConfigurableActionTypeAuthorization> {
        &self.auth
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters of a configurable action in a Amazon DataZone environment.</p>
    pub fn parameters(mut self, input: crate::types::ConfigurableActionParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters of a configurable action in a Amazon DataZone environment.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurableActionParameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters of a configurable action in a Amazon DataZone environment.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigurableActionParameter>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`ConfigurableEnvironmentAction`](crate::types::ConfigurableEnvironmentAction).
    pub fn build(self) -> crate::types::ConfigurableEnvironmentAction {
        crate::types::ConfigurableEnvironmentAction {
            r#type: self.r#type,
            auth: self.auth,
            parameters: self.parameters,
        }
    }
}
