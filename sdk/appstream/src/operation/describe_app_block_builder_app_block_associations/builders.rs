// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_app_block_builder_app_block_associations::_describe_app_block_builder_app_block_associations_output::DescribeAppBlockBuilderAppBlockAssociationsOutputBuilder;

pub use crate::operation::describe_app_block_builder_app_block_associations::_describe_app_block_builder_app_block_associations_input::DescribeAppBlockBuilderAppBlockAssociationsInputBuilder;

impl DescribeAppBlockBuilderAppBlockAssociationsInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsError,
                            ::aws_smithy_http::operation::Response
                        >
    >{
        let mut fluent_builder = client.describe_app_block_builder_app_block_associations();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeAppBlockBuilderAppBlockAssociations`.
///
/// <p>Retrieves a list that describes one or more app block builder associations.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeAppBlockBuilderAppBlockAssociationsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::describe_app_block_builder_app_block_associations::builders::DescribeAppBlockBuilderAppBlockAssociationsInputBuilder,
}
impl DescribeAppBlockBuilderAppBlockAssociationsFluentBuilder {
    /// Creates a new `DescribeAppBlockBuilderAppBlockAssociations`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
                        pub async fn customize_middleware(self) -> ::std::result::Result<
                            crate::client::customize::CustomizableOperation<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociations, ::aws_http::retry::AwsResponseRetryClassifier,>,
                            ::aws_smithy_http::result::SdkError<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
                        pub async fn send_middleware(self) -> ::std::result::Result<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsError>>
                         {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                            pub async fn send(self) -> ::std::result::Result<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsOutput, ::aws_smithy_http::result::SdkError<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsError>>
                             {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                            pub async fn customize(self) -> ::std::result::Result<
                                crate::client::customize::CustomizableOperation<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociations, ::aws_http::retry::AwsResponseRetryClassifier,>,
                                ::aws_smithy_http::result::SdkError<crate::operation::describe_app_block_builder_app_block_associations::DescribeAppBlockBuilderAppBlockAssociationsError>
    >{
        self.customize_middleware().await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_app_block_builder_app_block_associations::paginator::DescribeAppBlockBuilderAppBlockAssociationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_app_block_builder_app_block_associations::paginator::DescribeAppBlockBuilderAppBlockAssociationsPaginator{
        crate::operation::describe_app_block_builder_app_block_associations::paginator::DescribeAppBlockBuilderAppBlockAssociationsPaginator::new(self.handle, self.inner)
    }
    /// <p>The ARN of the app block.</p>
    pub fn app_block_arn(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.app_block_arn(input.into());
        self
    }
    /// <p>The ARN of the app block.</p>
    pub fn set_app_block_arn(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_block_arn(input);
        self
    }
    /// <p>The name of the app block builder.</p>
    pub fn app_block_builder_name(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.app_block_builder_name(input.into());
        self
    }
    /// <p>The name of the app block builder.</p>
    pub fn set_app_block_builder_name(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_block_builder_name(input);
        self
    }
    /// <p>The maximum size of each page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of each page of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
