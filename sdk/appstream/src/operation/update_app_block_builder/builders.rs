// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_app_block_builder::_update_app_block_builder_output::UpdateAppBlockBuilderOutputBuilder;

pub use crate::operation::update_app_block_builder::_update_app_block_builder_input::UpdateAppBlockBuilderInputBuilder;

/// Fluent builder constructing a request to `UpdateAppBlockBuilder`.
///
/// <p>Updates an app block builder.</p>
/// <p>If the app block builder is in the <code>STARTING</code> or <code>STOPPING</code> state, you can't update it. If the app block builder is in the <code>RUNNING</code> state, you can only update the DisplayName and Description. If the app block builder is in the <code>STOPPED</code> state, you can update any attribute except the Name.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateAppBlockBuilderFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_app_block_builder::builders::UpdateAppBlockBuilderInputBuilder,
}
impl UpdateAppBlockBuilderFluentBuilder {
    /// Creates a new `UpdateAppBlockBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn customize_middleware(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_app_block_builder::UpdateAppBlockBuilder,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_app_block_builder::UpdateAppBlockBuilderError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn send_middleware(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_app_block_builder::UpdateAppBlockBuilderOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_app_block_builder::UpdateAppBlockBuilderError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_app_block_builder::UpdateAppBlockBuilderOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_app_block_builder::UpdateAppBlockBuilderError,
        >,
    > {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_app_block_builder::UpdateAppBlockBuilder,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_app_block_builder::UpdateAppBlockBuilderError,
        >,
    > {
        self.customize_middleware().await
    }
    /// <p>The unique name for the app block builder.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The unique name for the app block builder.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The description of the app block builder.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the app block builder.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The display name of the app block builder.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The display name of the app block builder.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The platform of the app block builder.</p>
    /// <p> <code>WINDOWS_SERVER_2019</code> is the only valid value.</p>
    pub fn platform(mut self, input: crate::types::PlatformType) -> Self {
        self.inner = self.inner.platform(input);
        self
    }
    /// <p>The platform of the app block builder.</p>
    /// <p> <code>WINDOWS_SERVER_2019</code> is the only valid value.</p>
    pub fn set_platform(
        mut self,
        input: ::std::option::Option<crate::types::PlatformType>,
    ) -> Self {
        self.inner = self.inner.set_platform(input);
        self
    }
    /// <p>The instance type to use when launching the app block builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.standard.xlarge</p> </li>
    /// <li> <p>stream.standard.2xlarge</p> </li>
    /// </ul>
    pub fn instance_type(
        mut self,
        input: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.instance_type(input.into());
        self
    }
    /// <p>The instance type to use when launching the app block builder. The following instance types are available:</p>
    /// <ul>
    /// <li> <p>stream.standard.small</p> </li>
    /// <li> <p>stream.standard.medium</p> </li>
    /// <li> <p>stream.standard.large</p> </li>
    /// <li> <p>stream.standard.xlarge</p> </li>
    /// <li> <p>stream.standard.2xlarge</p> </li>
    /// </ul>
    pub fn set_instance_type(
        mut self,
        input: ::std::option::Option<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_instance_type(input);
        self
    }
    /// <p>The VPC configuration for the app block builder.</p>
    /// <p>App block builders require that you specify at least two subnets in different availability zones.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>The VPC configuration for the app block builder.</p>
    /// <p>App block builders require that you specify at least two subnets in different availability zones.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>Enables or disables default internet access for the app block builder.</p>
    pub fn enable_default_internet_access(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_default_internet_access(input);
        self
    }
    /// <p>Enables or disables default internet access for the app block builder.</p>
    pub fn set_enable_default_internet_access(
        mut self,
        input: ::std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_enable_default_internet_access(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the app block builder. To assume a role, the app block builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.iam_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the app block builder. To assume a role, the app block builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_iam_role_arn(input);
        self
    }
    /// Appends an item to `AccessEndpoints`.
    ///
    /// To override the contents of this collection use [`set_access_endpoints`](Self::set_access_endpoints).
    ///
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.</p>
    pub fn access_endpoints(mut self, input: crate::types::AccessEndpoint) -> Self {
        self.inner = self.inner.access_endpoints(input);
        self
    }
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.</p>
    pub fn set_access_endpoints(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>,
    ) -> Self {
        self.inner = self.inner.set_access_endpoints(input);
        self
    }
    /// Appends an item to `AttributesToDelete`.
    ///
    /// To override the contents of this collection use [`set_attributes_to_delete`](Self::set_attributes_to_delete).
    ///
    /// <p>The attributes to delete from the app block builder.</p>
    pub fn attributes_to_delete(mut self, input: crate::types::AppBlockBuilderAttribute) -> Self {
        self.inner = self.inner.attributes_to_delete(input);
        self
    }
    /// <p>The attributes to delete from the app block builder.</p>
    pub fn set_attributes_to_delete(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AppBlockBuilderAttribute>>,
    ) -> Self {
        self.inner = self.inner.set_attributes_to_delete(input);
        self
    }
}
