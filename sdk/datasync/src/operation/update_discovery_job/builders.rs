// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_discovery_job::_update_discovery_job_output::UpdateDiscoveryJobOutputBuilder;

pub use crate::operation::update_discovery_job::_update_discovery_job_input::UpdateDiscoveryJobInputBuilder;

/// Fluent builder constructing a request to `UpdateDiscoveryJob`.
/// 
/// <p>Edits a DataSync discovery job configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDiscoveryJobFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::update_discovery_job::builders::UpdateDiscoveryJobInputBuilder,
}
impl UpdateDiscoveryJobFluentBuilder  {
    /// Creates a new `UpdateDiscoveryJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle, inner: Default::default(),
        }
    }
    /// Consume this builder, creating a customizable operation that can be modified before being
                    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_discovery_job::UpdateDiscoveryJob, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_discovery_job::UpdateDiscoveryJobError>
                    >  {
                        let handle = self.handle.clone();
                        let operation = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        Ok(crate::client::customize::CustomizableOperation { handle, operation })
                    }
    
                    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_discovery_job::UpdateDiscoveryJobOutput, aws_smithy_http::result::SdkError<crate::operation::update_discovery_job::UpdateDiscoveryJobError>>
                     {
                        let op = self.inner.build().map_err(aws_smithy_http::result::SdkError::construction_failure)?
                            .make_operation(&self.handle.conf)
                            .await
                            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
                        self.handle.client.call(op).await
                    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the discovery job that you want to update.</p>
    pub fn discovery_job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.discovery_job_arn(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the discovery job that you want to update.</p>
    pub fn set_discovery_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_discovery_job_arn(input);
        self
    }
    /// <p>Specifies in minutes how long that you want the discovery job to run. (You can't set this parameter to less than the number of minutes that the job has already run for.)</p>
    pub fn collection_duration_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.collection_duration_minutes(input);
        self
    }
    /// <p>Specifies in minutes how long that you want the discovery job to run. (You can't set this parameter to less than the number of minutes that the job has already run for.)</p>
    pub fn set_collection_duration_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_collection_duration_minutes(input);
        self
    }
}

