// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The configuration that allows you to choose how you want to update the databases on a cluster. Depending on the option you choose, you can reduce the time it takes to update the database changesets on to a cluster. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KxDeploymentConfiguration {
    /// <p> The type of deployment that you want on a cluster. </p>
    /// <ul>
    /// <li> <p>ROLLING – This options loads the updated database by stopping the exiting q process and starting a new q process with updated configuration.</p> </li>
    /// <li> <p>NO_RESTART – This option loads the updated database on the running q process without stopping it. This option is quicker as it reduces the turn around time to update a kdb database changeset configuration on a cluster.</p> </li>
    /// </ul>
    pub deployment_strategy: ::std::option::Option<crate::types::KxDeploymentStrategy>,
}
impl KxDeploymentConfiguration {
    /// <p> The type of deployment that you want on a cluster. </p>
    /// <ul>
    /// <li> <p>ROLLING – This options loads the updated database by stopping the exiting q process and starting a new q process with updated configuration.</p> </li>
    /// <li> <p>NO_RESTART – This option loads the updated database on the running q process without stopping it. This option is quicker as it reduces the turn around time to update a kdb database changeset configuration on a cluster.</p> </li>
    /// </ul>
    pub fn deployment_strategy(&self) -> ::std::option::Option<&crate::types::KxDeploymentStrategy> {
        self.deployment_strategy.as_ref()
    }
}
impl KxDeploymentConfiguration {
    /// Creates a new builder-style object to manufacture [`KxDeploymentConfiguration`](crate::types::KxDeploymentConfiguration).
    pub fn builder() -> crate::types::builders::KxDeploymentConfigurationBuilder {
        crate::types::builders::KxDeploymentConfigurationBuilder::default()
    }
}

/// A builder for [`KxDeploymentConfiguration`](crate::types::KxDeploymentConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KxDeploymentConfigurationBuilder {
    pub(crate) deployment_strategy: ::std::option::Option<crate::types::KxDeploymentStrategy>,
}
impl KxDeploymentConfigurationBuilder {
    /// <p> The type of deployment that you want on a cluster. </p>
    /// <ul>
    /// <li> <p>ROLLING – This options loads the updated database by stopping the exiting q process and starting a new q process with updated configuration.</p> </li>
    /// <li> <p>NO_RESTART – This option loads the updated database on the running q process without stopping it. This option is quicker as it reduces the turn around time to update a kdb database changeset configuration on a cluster.</p> </li>
    /// </ul>
    pub fn deployment_strategy(mut self, input: crate::types::KxDeploymentStrategy) -> Self {
        self.deployment_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type of deployment that you want on a cluster. </p>
    /// <ul>
    /// <li> <p>ROLLING – This options loads the updated database by stopping the exiting q process and starting a new q process with updated configuration.</p> </li>
    /// <li> <p>NO_RESTART – This option loads the updated database on the running q process without stopping it. This option is quicker as it reduces the turn around time to update a kdb database changeset configuration on a cluster.</p> </li>
    /// </ul>
    pub fn set_deployment_strategy(mut self, input: ::std::option::Option<crate::types::KxDeploymentStrategy>) -> Self {
        self.deployment_strategy = input;
        self
    }
    /// <p> The type of deployment that you want on a cluster. </p>
    /// <ul>
    /// <li> <p>ROLLING – This options loads the updated database by stopping the exiting q process and starting a new q process with updated configuration.</p> </li>
    /// <li> <p>NO_RESTART – This option loads the updated database on the running q process without stopping it. This option is quicker as it reduces the turn around time to update a kdb database changeset configuration on a cluster.</p> </li>
    /// </ul>
    pub fn get_deployment_strategy(&self) -> &::std::option::Option<crate::types::KxDeploymentStrategy> {
        &self.deployment_strategy
    }
    /// Consumes the builder and constructs a [`KxDeploymentConfiguration`](crate::types::KxDeploymentConfiguration).
    pub fn build(self) -> crate::types::KxDeploymentConfiguration {
        crate::types::KxDeploymentConfiguration {
            deployment_strategy: self.deployment_strategy,
        }
    }
}
