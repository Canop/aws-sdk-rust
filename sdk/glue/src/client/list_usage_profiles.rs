// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListUsageProfiles`](crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder::set_next_token):<br>required: **false**<br><p>A continuation token, included if this is a continuation call.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of usage profiles to return in a single response.</p><br>
    /// - On success, responds with [`ListUsageProfilesOutput`](crate::operation::list_usage_profiles::ListUsageProfilesOutput) with field(s):
    ///   - [`profiles(Option<Vec::<UsageProfileDefinition>>)`](crate::operation::list_usage_profiles::ListUsageProfilesOutput::profiles): <p>A list of usage profile (<code>UsageProfileDefinition</code>) objects.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_usage_profiles::ListUsageProfilesOutput::next_token): <p>A continuation token, present if the current list segment is not the last.</p>
    /// - On failure, responds with [`SdkError<ListUsageProfilesError>`](crate::operation::list_usage_profiles::ListUsageProfilesError)
    pub fn list_usage_profiles(&self) -> crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder {
        crate::operation::list_usage_profiles::builders::ListUsageProfilesFluentBuilder::new(self.handle.clone())
    }
}
