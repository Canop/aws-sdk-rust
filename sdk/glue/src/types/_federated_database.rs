// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A database that points to an entity outside the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FederatedDatabase {
    /// <p>A unique identifier for the federated database.</p>
    #[doc(hidden)]
    pub identifier: std::option::Option<std::string::String>,
    /// <p>The name of the connection to the external metastore.</p>
    #[doc(hidden)]
    pub connection_name: std::option::Option<std::string::String>,
}
impl FederatedDatabase {
    /// <p>A unique identifier for the federated database.</p>
    pub fn identifier(&self) -> std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The name of the connection to the external metastore.</p>
    pub fn connection_name(&self) -> std::option::Option<&str> {
        self.connection_name.as_deref()
    }
}
impl FederatedDatabase {
    /// Creates a new builder-style object to manufacture [`FederatedDatabase`](crate::types::FederatedDatabase).
    pub fn builder() -> crate::types::builders::FederatedDatabaseBuilder {
        crate::types::builders::FederatedDatabaseBuilder::default()
    }
}

/// A builder for [`FederatedDatabase`](crate::types::FederatedDatabase).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FederatedDatabaseBuilder {
    pub(crate) identifier: std::option::Option<std::string::String>,
    pub(crate) connection_name: std::option::Option<std::string::String>,
}
impl FederatedDatabaseBuilder {
    /// <p>A unique identifier for the federated database.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.identifier = Some(input.into());
        self
    }
    /// <p>A unique identifier for the federated database.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The name of the connection to the external metastore.</p>
    pub fn connection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_name = Some(input.into());
        self
    }
    /// <p>The name of the connection to the external metastore.</p>
    pub fn set_connection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// Consumes the builder and constructs a [`FederatedDatabase`](crate::types::FederatedDatabase).
    pub fn build(self) -> crate::types::FederatedDatabase {
        crate::types::FederatedDatabase {
            identifier: self.identifier,
            connection_name: self.connection_name,
        }
    }
}
