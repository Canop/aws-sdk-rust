// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_trust_anchor_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_trust_anchor::CreateTrustAnchorInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.enabled {
        object.key("enabled").boolean(*var_1);
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_2) = &input.notification_settings {
        let mut array_3 = object.key("notificationSettings").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_notification_setting::ser_notification_setting(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.source {
        #[allow(unused_mut)]
        let mut object_7 = object.key("source").start_object();
        crate::protocol_serde::shape_source::ser_source(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
