// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_calculate_route_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::calculate_route::CalculateRouteInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.car_mode_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CarModeOptions").start_object();
        crate::protocol_serde::shape_calculate_route_car_mode_options::ser_calculate_route_car_mode_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.depart_now {
        object.key("DepartNow").boolean(*var_3);
    }
    {
        let mut array_4 = object.key("DeparturePosition").start_array();
        for item_5 in &input.departure_position {
            {
                array_4.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_5).into()),
                );
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.departure_time {
        object
            .key("DepartureTime")
            .date_time(var_6, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    {
        let mut array_7 = object.key("DestinationPosition").start_array();
        for item_8 in &input.destination_position {
            {
                array_7.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_8).into()),
                );
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.distance_unit {
        object.key("DistanceUnit").string(var_9.as_str());
    }
    if let Some(var_10) = &input.include_leg_geometry {
        object.key("IncludeLegGeometry").boolean(*var_10);
    }
    if let Some(var_11) = &input.travel_mode {
        object.key("TravelMode").string(var_11.as_str());
    }
    if let Some(var_12) = &input.truck_mode_options {
        #[allow(unused_mut)]
        let mut object_13 = object.key("TruckModeOptions").start_object();
        crate::protocol_serde::shape_calculate_route_truck_mode_options::ser_calculate_route_truck_mode_options(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.waypoint_positions {
        let mut array_15 = object.key("WaypointPositions").start_array();
        for item_16 in var_14 {
            {
                let mut array_17 = array_15.value().start_array();
                for item_18 in item_16 {
                    {
                        array_17.value().number(
                            #[allow(clippy::useless_conversion)]
                            ::aws_smithy_types::Number::Float((*item_18).into()),
                        );
                    }
                }
                array_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
