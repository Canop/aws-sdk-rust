// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_application_component_config_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_application_component_config::UpdateApplicationComponentConfigInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.app_type {
        object.key("appType").string(var_1.as_str());
    }
    {
        object.key("applicationComponentId").string(input.application_component_id.as_str());
    }
    if let Some(var_2) = &input.configure_only {
        object.key("configureOnly").boolean(*var_2);
    }
    if let Some(var_3) = &input.inclusion_status {
        object.key("inclusionStatus").string(var_3.as_str());
    }
    if let Some(var_4) = &input.secrets_manager_key {
        object.key("secretsManagerKey").string(var_4.as_str());
    }
    if let Some(var_5) = &input.source_code_list {
        let mut array_6 = object.key("sourceCodeList").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_source_code::ser_source_code(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.strategy_option {
        #[allow(unused_mut)]
        let mut object_10 = object.key("strategyOption").start_object();
        crate::protocol_serde::shape_strategy_option::ser_strategy_option(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
