// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTableInput {
    /// <p>The name of the keyspace that the table is stored in.</p>
    pub keyspace_name: ::std::string::String,
    /// <p>The name of the table.</p>
    pub table_name: ::std::string::String,
}
impl GetTableInput {
    /// <p>The name of the keyspace that the table is stored in.</p>
    pub fn keyspace_name(&self) -> &str {
        use std::ops::Deref;
        self.keyspace_name.deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
}
impl GetTableInput {
    /// Creates a new builder-style object to manufacture [`GetTableInput`](crate::operation::get_table::GetTableInput).
    pub fn builder() -> crate::operation::get_table::builders::GetTableInputBuilder {
        crate::operation::get_table::builders::GetTableInputBuilder::default()
    }
}

/// A builder for [`GetTableInput`](crate::operation::get_table::GetTableInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTableInputBuilder {
    pub(crate) keyspace_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
}
impl GetTableInputBuilder {
    /// <p>The name of the keyspace that the table is stored in.</p>
    /// This field is required.
    pub fn keyspace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.keyspace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the keyspace that the table is stored in.</p>
    pub fn set_keyspace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.keyspace_name = input;
        self
    }
    /// <p>The name of the keyspace that the table is stored in.</p>
    pub fn get_keyspace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.keyspace_name
    }
    /// <p>The name of the table.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// Consumes the builder and constructs a [`GetTableInput`](crate::operation::get_table::GetTableInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`keyspace_name`](crate::operation::get_table::builders::GetTableInputBuilder::keyspace_name)
    /// - [`table_name`](crate::operation::get_table::builders::GetTableInputBuilder::table_name)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_table::GetTableInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_table::GetTableInput {
            keyspace_name: self.keyspace_name.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "keyspace_name",
                    "keyspace_name was not specified but it is required when building GetTableInput",
                )
            })?,
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building GetTableInput",
                )
            })?,
        })
    }
}
