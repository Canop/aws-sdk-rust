// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_table_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::restore_table::RestoreTableInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("sourceKeyspaceName").string(input.source_keyspace_name.as_str());
    }
    {
        object.key("sourceTableName").string(input.source_table_name.as_str());
    }
    {
        object.key("targetKeyspaceName").string(input.target_keyspace_name.as_str());
    }
    {
        object.key("targetTableName").string(input.target_table_name.as_str());
    }
    if let Some(var_1) = &input.restore_timestamp {
        object
            .key("restoreTimestamp")
            .date_time(var_1, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2) = &input.capacity_specification_override {
        #[allow(unused_mut)]
        let mut object_3 = object.key("capacitySpecificationOverride").start_object();
        crate::protocol_serde::shape_capacity_specification::ser_capacity_specification(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.encryption_specification_override {
        #[allow(unused_mut)]
        let mut object_5 = object.key("encryptionSpecificationOverride").start_object();
        crate::protocol_serde::shape_encryption_specification::ser_encryption_specification(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.point_in_time_recovery_override {
        #[allow(unused_mut)]
        let mut object_7 = object.key("pointInTimeRecoveryOverride").start_object();
        crate::protocol_serde::shape_point_in_time_recovery::ser_point_in_time_recovery(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags_override {
        let mut array_9 = object.key("tagsOverride").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
