// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The logging parameters of a user pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogDeliveryConfigurationType {
    /// <p>The ID of the user pool where you configured detailed activity logging.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The detailed activity logging destination of a user pool.</p>
    pub log_configurations: ::std::option::Option<::std::vec::Vec<crate::types::LogConfigurationType>>,
}
impl LogDeliveryConfigurationType {
    /// <p>The ID of the user pool where you configured detailed activity logging.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The detailed activity logging destination of a user pool.</p>
    pub fn log_configurations(&self) -> ::std::option::Option<&[crate::types::LogConfigurationType]> {
        self.log_configurations.as_deref()
    }
}
impl LogDeliveryConfigurationType {
    /// Creates a new builder-style object to manufacture [`LogDeliveryConfigurationType`](crate::types::LogDeliveryConfigurationType).
    pub fn builder() -> crate::types::builders::LogDeliveryConfigurationTypeBuilder {
        crate::types::builders::LogDeliveryConfigurationTypeBuilder::default()
    }
}

/// A builder for [`LogDeliveryConfigurationType`](crate::types::LogDeliveryConfigurationType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LogDeliveryConfigurationTypeBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) log_configurations: ::std::option::Option<::std::vec::Vec<crate::types::LogConfigurationType>>,
}
impl LogDeliveryConfigurationTypeBuilder {
    /// <p>The ID of the user pool where you configured detailed activity logging.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool where you configured detailed activity logging.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool where you configured detailed activity logging.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// Appends an item to `log_configurations`.
    ///
    /// To override the contents of this collection use [`set_log_configurations`](Self::set_log_configurations).
    ///
    /// <p>The detailed activity logging destination of a user pool.</p>
    pub fn log_configurations(mut self, input: crate::types::LogConfigurationType) -> Self {
        let mut v = self.log_configurations.unwrap_or_default();
        v.push(input);
        self.log_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The detailed activity logging destination of a user pool.</p>
    pub fn set_log_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LogConfigurationType>>) -> Self {
        self.log_configurations = input;
        self
    }
    /// <p>The detailed activity logging destination of a user pool.</p>
    pub fn get_log_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LogConfigurationType>> {
        &self.log_configurations
    }
    /// Consumes the builder and constructs a [`LogDeliveryConfigurationType`](crate::types::LogDeliveryConfigurationType).
    pub fn build(self) -> crate::types::LogDeliveryConfigurationType {
        crate::types::LogDeliveryConfigurationType {
            user_pool_id: self.user_pool_id,
            log_configurations: self.log_configurations,
        }
    }
}
