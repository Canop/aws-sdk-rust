// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"Cluster.Status","expected":"DEPLOYED","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_974a65d7466750eb4(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::describe_cluster::DescribeClusterOutput) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DEPLOYED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Cluster.Status","expected":"PENDING","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_8869123ac9947e7a4(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::describe_cluster::DescribeClusterOutput) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"InternalServerException"}
pub(crate) fn match_describe_cluster_4b686b1fc25ad25ab(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "InternalServerException";
        }
    }
    false
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_cluster_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"Cluster.Status","expected":"PENDING_DELETION","comparator":"stringEquals"}}
pub(crate) fn match_describe_cluster_870279264632af412(
    _result: ::std::result::Result<
        &crate::operation::describe_cluster::DescribeClusterOutput,
        &crate::operation::describe_cluster::DescribeClusterError,
    >,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::describe_cluster::DescribeClusterOutput) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.cluster.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING_DELETION";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ControlPanel.Status","expected":"DEPLOYED","comparator":"stringEquals"}}
pub(crate) fn match_describe_control_panel_7cc9e162da0b8c4fc(
    _result: ::std::result::Result<
        &crate::operation::describe_control_panel::DescribeControlPanelOutput,
        &crate::operation::describe_control_panel::DescribeControlPanelError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_control_panel::DescribeControlPanelOutput,
    ) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.control_panel.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DEPLOYED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ControlPanel.Status","expected":"PENDING","comparator":"stringEquals"}}
pub(crate) fn match_describe_control_panel_ef5b6282580a34947(
    _result: ::std::result::Result<
        &crate::operation::describe_control_panel::DescribeControlPanelOutput,
        &crate::operation::describe_control_panel::DescribeControlPanelError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_control_panel::DescribeControlPanelOutput,
    ) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.control_panel.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"InternalServerException"}
pub(crate) fn match_describe_control_panel_4b686b1fc25ad25ab(
    _result: ::std::result::Result<
        &crate::operation::describe_control_panel::DescribeControlPanelOutput,
        &crate::operation::describe_control_panel::DescribeControlPanelError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "InternalServerException";
        }
    }
    false
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_control_panel_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_control_panel::DescribeControlPanelOutput,
        &crate::operation::describe_control_panel::DescribeControlPanelError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"ControlPanel.Status","expected":"PENDING_DELETION","comparator":"stringEquals"}}
pub(crate) fn match_describe_control_panel_b4dfea3605725f489(
    _result: ::std::result::Result<
        &crate::operation::describe_control_panel::DescribeControlPanelOutput,
        &crate::operation::describe_control_panel::DescribeControlPanelError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_control_panel::DescribeControlPanelOutput,
    ) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.control_panel.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING_DELETION";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"RoutingControl.Status","expected":"DEPLOYED","comparator":"stringEquals"}}
pub(crate) fn match_describe_routing_control_179d936c0f9151301(
    _result: ::std::result::Result<
        &crate::operation::describe_routing_control::DescribeRoutingControlOutput,
        &crate::operation::describe_routing_control::DescribeRoutingControlError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_routing_control::DescribeRoutingControlOutput,
    ) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.routing_control.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DEPLOYED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"RoutingControl.Status","expected":"PENDING","comparator":"stringEquals"}}
pub(crate) fn match_describe_routing_control_7e0d5f344c913762c(
    _result: ::std::result::Result<
        &crate::operation::describe_routing_control::DescribeRoutingControlOutput,
        &crate::operation::describe_routing_control::DescribeRoutingControlError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_routing_control::DescribeRoutingControlOutput,
    ) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.routing_control.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"InternalServerException"}
pub(crate) fn match_describe_routing_control_4b686b1fc25ad25ab(
    _result: ::std::result::Result<
        &crate::operation::describe_routing_control::DescribeRoutingControlOutput,
        &crate::operation::describe_routing_control::DescribeRoutingControlError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "InternalServerException";
        }
    }
    false
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_routing_control_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_routing_control::DescribeRoutingControlOutput,
        &crate::operation::describe_routing_control::DescribeRoutingControlError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"RoutingControl.Status","expected":"PENDING_DELETION","comparator":"stringEquals"}}
pub(crate) fn match_describe_routing_control_9d30e90d7fc39df0d(
    _result: ::std::result::Result<
        &crate::operation::describe_routing_control::DescribeRoutingControlOutput,
        &crate::operation::describe_routing_control::DescribeRoutingControlError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_routing_control::DescribeRoutingControlOutput,
    ) -> ::std::option::Option<&'a crate::types::Status> {
        let _fld_1 = _output.routing_control.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING_DELETION";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
