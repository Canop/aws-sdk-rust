// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The analysis template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AnalysisTemplate {
    /// <p>The identifier for the analysis template.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the analysis template.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID for the associated collaboration of the analysis template.</p>
    pub collaboration_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ARN for the analysis template’s associated collaboration.</p>
    pub collaboration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of a member who created the analysis template.</p>
    pub membership_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the member who created the analysis template.</p>
    pub membership_arn: ::std::option::Option<::std::string::String>,
    /// <p>The description of the analysis template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the analysis template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The time that the analysis template was created.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the analysis template was last updated.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The entire schema object.</p>
    pub schema: ::std::option::Option<crate::types::AnalysisSchema>,
    /// <p>The format of the analysis template.</p>
    pub format: ::std::option::Option<crate::types::AnalysisFormat>,
    /// <p>The source of the analysis template.</p>
    pub source: ::std::option::Option<crate::types::AnalysisSource>,
    /// <p>The parameters of the analysis template.</p>
    pub analysis_parameters: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>>,
}
impl AnalysisTemplate {
    /// <p>The identifier for the analysis template.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis template.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique ID for the associated collaboration of the analysis template.</p>
    pub fn collaboration_id(&self) -> ::std::option::Option<&str> {
        self.collaboration_id.as_deref()
    }
    /// <p>The unique ARN for the analysis template’s associated collaboration.</p>
    pub fn collaboration_arn(&self) -> ::std::option::Option<&str> {
        self.collaboration_arn.as_deref()
    }
    /// <p>The identifier of a member who created the analysis template.</p>
    pub fn membership_id(&self) -> ::std::option::Option<&str> {
        self.membership_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the analysis template.</p>
    pub fn membership_arn(&self) -> ::std::option::Option<&str> {
        self.membership_arn.as_deref()
    }
    /// <p>The description of the analysis template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the analysis template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time that the analysis template was created.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time that the analysis template was last updated.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The entire schema object.</p>
    pub fn schema(&self) -> ::std::option::Option<&crate::types::AnalysisSchema> {
        self.schema.as_ref()
    }
    /// <p>The format of the analysis template.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::AnalysisFormat> {
        self.format.as_ref()
    }
    /// <p>The source of the analysis template.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::AnalysisSource> {
        self.source.as_ref()
    }
    /// <p>The parameters of the analysis template.</p>
    pub fn analysis_parameters(&self) -> ::std::option::Option<&[crate::types::AnalysisParameter]> {
        self.analysis_parameters.as_deref()
    }
}
impl ::std::fmt::Debug for AnalysisTemplate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AnalysisTemplate");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("collaboration_id", &self.collaboration_id);
        formatter.field("collaboration_arn", &self.collaboration_arn);
        formatter.field("membership_id", &self.membership_id);
        formatter.field("membership_arn", &self.membership_arn);
        formatter.field("description", &self.description);
        formatter.field("name", &self.name);
        formatter.field("create_time", &self.create_time);
        formatter.field("update_time", &self.update_time);
        formatter.field("schema", &self.schema);
        formatter.field("format", &self.format);
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("analysis_parameters", &self.analysis_parameters);
        formatter.finish()
    }
}
impl AnalysisTemplate {
    /// Creates a new builder-style object to manufacture [`AnalysisTemplate`](crate::types::AnalysisTemplate).
    pub fn builder() -> crate::types::builders::AnalysisTemplateBuilder {
        crate::types::builders::AnalysisTemplateBuilder::default()
    }
}

/// A builder for [`AnalysisTemplate`](crate::types::AnalysisTemplate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AnalysisTemplateBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_id: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) membership_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) schema: ::std::option::Option<crate::types::AnalysisSchema>,
    pub(crate) format: ::std::option::Option<crate::types::AnalysisFormat>,
    pub(crate) source: ::std::option::Option<crate::types::AnalysisSource>,
    pub(crate) analysis_parameters: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>>,
}
impl AnalysisTemplateBuilder {
    /// <p>The identifier for the analysis template.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the analysis template.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for the analysis template.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis template.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the analysis template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique ID for the associated collaboration of the analysis template.</p>
    pub fn collaboration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the associated collaboration of the analysis template.</p>
    pub fn set_collaboration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_id = input;
        self
    }
    /// <p>The unique ID for the associated collaboration of the analysis template.</p>
    pub fn get_collaboration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_id
    }
    /// <p>The unique ARN for the analysis template’s associated collaboration.</p>
    pub fn collaboration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ARN for the analysis template’s associated collaboration.</p>
    pub fn set_collaboration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_arn = input;
        self
    }
    /// <p>The unique ARN for the analysis template’s associated collaboration.</p>
    pub fn get_collaboration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_arn
    }
    /// <p>The identifier of a member who created the analysis template.</p>
    pub fn membership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a member who created the analysis template.</p>
    pub fn set_membership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The identifier of a member who created the analysis template.</p>
    pub fn get_membership_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_id
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the analysis template.</p>
    pub fn membership_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the analysis template.</p>
    pub fn set_membership_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the member who created the analysis template.</p>
    pub fn get_membership_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_arn
    }
    /// <p>The description of the analysis template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the analysis template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the analysis template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the analysis template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the analysis template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the analysis template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time that the analysis template was created.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the analysis template was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time that the analysis template was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time that the analysis template was last updated.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the analysis template was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time that the analysis template was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The entire schema object.</p>
    pub fn schema(mut self, input: crate::types::AnalysisSchema) -> Self {
        self.schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entire schema object.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<crate::types::AnalysisSchema>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The entire schema object.</p>
    pub fn get_schema(&self) -> &::std::option::Option<crate::types::AnalysisSchema> {
        &self.schema
    }
    /// <p>The format of the analysis template.</p>
    pub fn format(mut self, input: crate::types::AnalysisFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the analysis template.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::AnalysisFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the analysis template.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::AnalysisFormat> {
        &self.format
    }
    /// <p>The source of the analysis template.</p>
    pub fn source(mut self, input: crate::types::AnalysisSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the analysis template.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::AnalysisSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the analysis template.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::AnalysisSource> {
        &self.source
    }
    /// Appends an item to `analysis_parameters`.
    ///
    /// To override the contents of this collection use [`set_analysis_parameters`](Self::set_analysis_parameters).
    ///
    /// <p>The parameters of the analysis template.</p>
    pub fn analysis_parameters(mut self, input: crate::types::AnalysisParameter) -> Self {
        let mut v = self.analysis_parameters.unwrap_or_default();
        v.push(input);
        self.analysis_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters of the analysis template.</p>
    pub fn set_analysis_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>>) -> Self {
        self.analysis_parameters = input;
        self
    }
    /// <p>The parameters of the analysis template.</p>
    pub fn get_analysis_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalysisParameter>> {
        &self.analysis_parameters
    }
    /// Consumes the builder and constructs a [`AnalysisTemplate`](crate::types::AnalysisTemplate).
    pub fn build(self) -> crate::types::AnalysisTemplate {
        crate::types::AnalysisTemplate {
            id: self.id,
            arn: self.arn,
            collaboration_id: self.collaboration_id,
            collaboration_arn: self.collaboration_arn,
            membership_id: self.membership_id,
            membership_arn: self.membership_arn,
            description: self.description,
            name: self.name,
            create_time: self.create_time,
            update_time: self.update_time,
            schema: self.schema,
            format: self.format,
            source: self.source,
            analysis_parameters: self.analysis_parameters,
        }
    }
}
impl ::std::fmt::Debug for AnalysisTemplateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AnalysisTemplateBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("collaboration_id", &self.collaboration_id);
        formatter.field("collaboration_arn", &self.collaboration_arn);
        formatter.field("membership_id", &self.membership_id);
        formatter.field("membership_arn", &self.membership_arn);
        formatter.field("description", &self.description);
        formatter.field("name", &self.name);
        formatter.field("create_time", &self.create_time);
        formatter.field("update_time", &self.update_time);
        formatter.field("schema", &self.schema);
        formatter.field("format", &self.format);
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("analysis_parameters", &self.analysis_parameters);
        formatter.finish()
    }
}
