// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_analysis_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_analysis_template::CreateAnalysisTemplateInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.analysis_parameters {
        let mut array_2 = object.key("analysisParameters").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_analysis_parameter::ser_analysis_parameter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    {
        object.key("format").string(input.format.as_str());
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_6) = &input.source {
        #[allow(unused_mut)]
        let mut object_7 = object.key("source").start_object();
        crate::protocol_serde::shape_analysis_source::ser_analysis_source(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}
