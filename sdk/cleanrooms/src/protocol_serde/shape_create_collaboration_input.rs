// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_collaboration_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_collaboration::CreateCollaborationInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("creatorDisplayName").string(input.creator_display_name.as_str());
    }
    {
        let mut array_1 = object.key("creatorMemberAbilities").start_array();
        for item_2 in &input.creator_member_abilities {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.data_encryption_metadata {
        #[allow(unused_mut)]
        let mut object_4 = object.key("dataEncryptionMetadata").start_object();
        crate::protocol_serde::shape_data_encryption_metadata::ser_data_encryption_metadata(&mut object_4, var_3)?;
        object_4.finish();
    }
    {
        object.key("description").string(input.description.as_str());
    }
    {
        let mut array_5 = object.key("members").start_array();
        for item_6 in &input.members {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_member_specification::ser_member_specification(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    {
        object.key("name").string(input.name.as_str());
    }
    {
        object.key("queryLogStatus").string(input.query_log_status.as_str());
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}
