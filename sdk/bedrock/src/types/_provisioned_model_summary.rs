// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Set of fields associated with a provisioned throughput.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProvisionedModelSummary {
    /// <p>The name of the provisioned throughput.</p>
    pub provisioned_model_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the provisioned throughput.</p>
    pub provisioned_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the model associated with this provisioned throughput.</p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>Desired model ARN.</p>
    pub desired_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>Foundation model ARN.</p>
    pub foundation_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The number of model units allocated.</p>
    pub model_units: ::std::option::Option<i32>,
    /// <p>Desired model units.</p>
    pub desired_model_units: ::std::option::Option<i32>,
    /// <p>Status of the provisioned throughput.</p>
    pub status: ::std::option::Option<crate::types::ProvisionedModelStatus>,
    /// <p>Commitment duration for the provisioned throughput.</p>
    pub commitment_duration: ::std::option::Option<crate::types::CommitmentDuration>,
    /// <p>Commitment expiration time for the provisioned throughput.</p>
    pub commitment_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that this provisioned throughput was created. </p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that this provisioned throughput was last modified. </p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProvisionedModelSummary {
    /// <p>The name of the provisioned throughput.</p>
    pub fn provisioned_model_name(&self) -> ::std::option::Option<&str> {
        self.provisioned_model_name.as_deref()
    }
    /// <p>The ARN of the provisioned throughput.</p>
    pub fn provisioned_model_arn(&self) -> ::std::option::Option<&str> {
        self.provisioned_model_arn.as_deref()
    }
    /// <p>The ARN of the model associated with this provisioned throughput.</p>
    pub fn model_arn(&self) -> ::std::option::Option<&str> {
        self.model_arn.as_deref()
    }
    /// <p>Desired model ARN.</p>
    pub fn desired_model_arn(&self) -> ::std::option::Option<&str> {
        self.desired_model_arn.as_deref()
    }
    /// <p>Foundation model ARN.</p>
    pub fn foundation_model_arn(&self) -> ::std::option::Option<&str> {
        self.foundation_model_arn.as_deref()
    }
    /// <p>The number of model units allocated.</p>
    pub fn model_units(&self) -> ::std::option::Option<i32> {
        self.model_units
    }
    /// <p>Desired model units.</p>
    pub fn desired_model_units(&self) -> ::std::option::Option<i32> {
        self.desired_model_units
    }
    /// <p>Status of the provisioned throughput.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ProvisionedModelStatus> {
        self.status.as_ref()
    }
    /// <p>Commitment duration for the provisioned throughput.</p>
    pub fn commitment_duration(&self) -> ::std::option::Option<&crate::types::CommitmentDuration> {
        self.commitment_duration.as_ref()
    }
    /// <p>Commitment expiration time for the provisioned throughput.</p>
    pub fn commitment_expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.commitment_expiration_time.as_ref()
    }
    /// <p>The time that this provisioned throughput was created. </p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time that this provisioned throughput was last modified. </p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl ProvisionedModelSummary {
    /// Creates a new builder-style object to manufacture [`ProvisionedModelSummary`](crate::types::ProvisionedModelSummary).
    pub fn builder() -> crate::types::builders::ProvisionedModelSummaryBuilder {
        crate::types::builders::ProvisionedModelSummaryBuilder::default()
    }
}

/// A builder for [`ProvisionedModelSummary`](crate::types::ProvisionedModelSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProvisionedModelSummaryBuilder {
    pub(crate) provisioned_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) provisioned_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) desired_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_units: ::std::option::Option<i32>,
    pub(crate) desired_model_units: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::ProvisionedModelStatus>,
    pub(crate) commitment_duration: ::std::option::Option<crate::types::CommitmentDuration>,
    pub(crate) commitment_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProvisionedModelSummaryBuilder {
    /// <p>The name of the provisioned throughput.</p>
    pub fn provisioned_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioned_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the provisioned throughput.</p>
    pub fn set_provisioned_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioned_model_name = input;
        self
    }
    /// <p>The name of the provisioned throughput.</p>
    pub fn get_provisioned_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioned_model_name
    }
    /// <p>The ARN of the provisioned throughput.</p>
    pub fn provisioned_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioned_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the provisioned throughput.</p>
    pub fn set_provisioned_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioned_model_arn = input;
        self
    }
    /// <p>The ARN of the provisioned throughput.</p>
    pub fn get_provisioned_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioned_model_arn
    }
    /// <p>The ARN of the model associated with this provisioned throughput.</p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the model associated with this provisioned throughput.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The ARN of the model associated with this provisioned throughput.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>Desired model ARN.</p>
    pub fn desired_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desired_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Desired model ARN.</p>
    pub fn set_desired_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desired_model_arn = input;
        self
    }
    /// <p>Desired model ARN.</p>
    pub fn get_desired_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.desired_model_arn
    }
    /// <p>Foundation model ARN.</p>
    pub fn foundation_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Foundation model ARN.</p>
    pub fn set_foundation_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model_arn = input;
        self
    }
    /// <p>Foundation model ARN.</p>
    pub fn get_foundation_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model_arn
    }
    /// <p>The number of model units allocated.</p>
    pub fn model_units(mut self, input: i32) -> Self {
        self.model_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of model units allocated.</p>
    pub fn set_model_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_units = input;
        self
    }
    /// <p>The number of model units allocated.</p>
    pub fn get_model_units(&self) -> &::std::option::Option<i32> {
        &self.model_units
    }
    /// <p>Desired model units.</p>
    pub fn desired_model_units(mut self, input: i32) -> Self {
        self.desired_model_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Desired model units.</p>
    pub fn set_desired_model_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.desired_model_units = input;
        self
    }
    /// <p>Desired model units.</p>
    pub fn get_desired_model_units(&self) -> &::std::option::Option<i32> {
        &self.desired_model_units
    }
    /// <p>Status of the provisioned throughput.</p>
    pub fn status(mut self, input: crate::types::ProvisionedModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the provisioned throughput.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProvisionedModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the provisioned throughput.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProvisionedModelStatus> {
        &self.status
    }
    /// <p>Commitment duration for the provisioned throughput.</p>
    pub fn commitment_duration(mut self, input: crate::types::CommitmentDuration) -> Self {
        self.commitment_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Commitment duration for the provisioned throughput.</p>
    pub fn set_commitment_duration(mut self, input: ::std::option::Option<crate::types::CommitmentDuration>) -> Self {
        self.commitment_duration = input;
        self
    }
    /// <p>Commitment duration for the provisioned throughput.</p>
    pub fn get_commitment_duration(&self) -> &::std::option::Option<crate::types::CommitmentDuration> {
        &self.commitment_duration
    }
    /// <p>Commitment expiration time for the provisioned throughput.</p>
    pub fn commitment_expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.commitment_expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Commitment expiration time for the provisioned throughput.</p>
    pub fn set_commitment_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.commitment_expiration_time = input;
        self
    }
    /// <p>Commitment expiration time for the provisioned throughput.</p>
    pub fn get_commitment_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.commitment_expiration_time
    }
    /// <p>The time that this provisioned throughput was created. </p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that this provisioned throughput was created. </p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that this provisioned throughput was created. </p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time that this provisioned throughput was last modified. </p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that this provisioned throughput was last modified. </p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time that this provisioned throughput was last modified. </p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Consumes the builder and constructs a [`ProvisionedModelSummary`](crate::types::ProvisionedModelSummary).
    pub fn build(self) -> crate::types::ProvisionedModelSummary {
        crate::types::ProvisionedModelSummary {
            provisioned_model_name: self.provisioned_model_name,
            provisioned_model_arn: self.provisioned_model_arn,
            model_arn: self.model_arn,
            desired_model_arn: self.desired_model_arn,
            foundation_model_arn: self.foundation_model_arn,
            model_units: self.model_units,
            desired_model_units: self.desired_model_units,
            status: self.status,
            commitment_duration: self.commitment_duration,
            commitment_expiration_time: self.commitment_expiration_time,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
        }
    }
}
