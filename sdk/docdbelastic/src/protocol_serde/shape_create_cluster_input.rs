// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("adminUserName").string(input.admin_user_name.as_str());
    }
    {
        object.key("adminUserPassword").string(input.admin_user_password.as_str());
    }
    {
        object.key("authType").string(input.auth_type.as_str());
    }
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    {
        object.key("clusterName").string(input.cluster_name.as_str());
    }
    if let Some(var_2) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.preferred_maintenance_window {
        object.key("preferredMaintenanceWindow").string(var_3.as_str());
    }
    {
        object.key("shardCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.shard_capacity).into()),
        );
    }
    {
        object.key("shardCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.shard_count).into()),
        );
    }
    if let Some(var_4) = &input.subnet_ids {
        let mut array_5 = object.key("subnetIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.vpc_security_group_ids {
        let mut array_12 = object.key("vpcSecurityGroupIds").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    Ok(())
}
