// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_campaign_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_campaign::CreateCampaignInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    {
        object.key("signalCatalogArn").string(input.signal_catalog_arn.as_str());
    }
    {
        object.key("targetArn").string(input.target_arn.as_str());
    }
    if let Some(var_2) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_2, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_3) = &input.expiry_time {
        object
            .key("expiryTime")
            .date_time(var_3, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_4) = &input.post_trigger_collection_duration {
        object.key("postTriggerCollectionDuration").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.diagnostics_mode {
        object.key("diagnosticsMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.spooling_mode {
        object.key("spoolingMode").string(var_6.as_str());
    }
    if let Some(var_7) = &input.compression {
        object.key("compression").string(var_7.as_str());
    }
    if let Some(var_8) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.signals_to_collect {
        let mut array_10 = object.key("signalsToCollect").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_signal_information::ser_signal_information(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.collection_scheme {
        #[allow(unused_mut)]
        let mut object_14 = object.key("collectionScheme").start_object();
        crate::protocol_serde::shape_collection_scheme::ser_collection_scheme(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.data_extra_dimensions {
        let mut array_16 = object.key("dataExtraDimensions").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("tags").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.data_destination_configs {
        let mut array_23 = object.key("dataDestinationConfigs").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_data_destination_config::ser_data_destination_config(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    Ok(())
}
