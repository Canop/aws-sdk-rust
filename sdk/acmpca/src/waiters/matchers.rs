// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"AuditReportStatus","expected":"SUCCESS","comparator":"stringEquals"}}
pub(crate) fn match_describe_certificate_authority_audit_report_ea3aa8639e4a371af(
    _result: ::std::result::Result<
        &crate::operation::describe_certificate_authority_audit_report::DescribeCertificateAuthorityAuditReportOutput,
        &crate::operation::describe_certificate_authority_audit_report::DescribeCertificateAuthorityAuditReportError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_certificate_authority_audit_report::DescribeCertificateAuthorityAuditReportOutput,
    ) -> ::std::option::Option<&'a crate::types::AuditReportStatus> {
        let _fld_1 = _output.audit_report_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUCCESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"AuditReportStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_certificate_authority_audit_report_d47b9d2161156a467(
    _result: ::std::result::Result<
        &crate::operation::describe_certificate_authority_audit_report::DescribeCertificateAuthorityAuditReportOutput,
        &crate::operation::describe_certificate_authority_audit_report::DescribeCertificateAuthorityAuditReportError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_certificate_authority_audit_report::DescribeCertificateAuthorityAuditReportOutput,
    ) -> ::std::option::Option<&'a crate::types::AuditReportStatus> {
        let _fld_1 = _output.audit_report_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"success":true}
pub(crate) fn match_get_certificate_authority_csr_c955e57777ec0d736(
    _result: ::std::result::Result<
        &crate::operation::get_certificate_authority_csr::GetCertificateAuthorityCsrOutput,
        &crate::operation::get_certificate_authority_csr::GetCertificateAuthorityCsrError,
    >,
) -> bool {
    _result.is_ok()
}

/// Matcher union: {"errorType":"RequestInProgressException"}
pub(crate) fn match_get_certificate_authority_csr_26f47168a2045510f(
    _result: ::std::result::Result<
        &crate::operation::get_certificate_authority_csr::GetCertificateAuthorityCsrOutput,
        &crate::operation::get_certificate_authority_csr::GetCertificateAuthorityCsrError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "RequestInProgressException";
        }
    }
    false
}

/// Matcher union: {"success":true}
pub(crate) fn match_get_certificate_c955e57777ec0d736(
    _result: ::std::result::Result<&crate::operation::get_certificate::GetCertificateOutput, &crate::operation::get_certificate::GetCertificateError>,
) -> bool {
    _result.is_ok()
}

/// Matcher union: {"errorType":"RequestInProgressException"}
pub(crate) fn match_get_certificate_26f47168a2045510f(
    _result: ::std::result::Result<&crate::operation::get_certificate::GetCertificateOutput, &crate::operation::get_certificate::GetCertificateError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "RequestInProgressException";
        }
    }
    false
}
