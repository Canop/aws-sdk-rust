// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntermediateSourceConfiguration {
    /// <p>The Amazon S3 location (bucket and prefix). For example: <code>s3://provider_bucket/DOC-EXAMPLE-BUCKET</code> </p>
    pub intermediate_s3_path: ::std::option::Option<::std::string::String>,
}
impl IntermediateSourceConfiguration {
    /// <p>The Amazon S3 location (bucket and prefix). For example: <code>s3://provider_bucket/DOC-EXAMPLE-BUCKET</code> </p>
    pub fn intermediate_s3_path(&self) -> ::std::option::Option<&str> {
        self.intermediate_s3_path.as_deref()
    }
}
impl IntermediateSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`IntermediateSourceConfiguration`](crate::types::IntermediateSourceConfiguration).
    pub fn builder() -> crate::types::builders::IntermediateSourceConfigurationBuilder {
        crate::types::builders::IntermediateSourceConfigurationBuilder::default()
    }
}

/// A builder for [`IntermediateSourceConfiguration`](crate::types::IntermediateSourceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IntermediateSourceConfigurationBuilder {
    pub(crate) intermediate_s3_path: ::std::option::Option<::std::string::String>,
}
impl IntermediateSourceConfigurationBuilder {
    /// <p>The Amazon S3 location (bucket and prefix). For example: <code>s3://provider_bucket/DOC-EXAMPLE-BUCKET</code> </p>
    pub fn intermediate_s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.intermediate_s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location (bucket and prefix). For example: <code>s3://provider_bucket/DOC-EXAMPLE-BUCKET</code> </p>
    pub fn set_intermediate_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.intermediate_s3_path = input;
        self
    }
    /// <p>The Amazon S3 location (bucket and prefix). For example: <code>s3://provider_bucket/DOC-EXAMPLE-BUCKET</code> </p>
    pub fn get_intermediate_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.intermediate_s3_path
    }
    /// Consumes the builder and constructs a [`IntermediateSourceConfiguration`](crate::types::IntermediateSourceConfiguration).
    pub fn build(self) -> crate::types::IntermediateSourceConfiguration {
        crate::types::IntermediateSourceConfiguration {
            intermediate_s3_path: self.intermediate_s3_path,
        }
    }
}
