// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object which defines the ID mapping techniques and provider configurations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdMappingTechniques {
    /// <p>The type of ID mapping.</p>
    pub id_mapping_type: ::std::option::Option<crate::types::IdMappingType>,
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub provider_properties: ::std::option::Option<crate::types::ProviderProperties>,
}
impl IdMappingTechniques {
    /// <p>The type of ID mapping.</p>
    pub fn id_mapping_type(&self) -> ::std::option::Option<&crate::types::IdMappingType> {
        self.id_mapping_type.as_ref()
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn provider_properties(&self) -> ::std::option::Option<&crate::types::ProviderProperties> {
        self.provider_properties.as_ref()
    }
}
impl IdMappingTechniques {
    /// Creates a new builder-style object to manufacture [`IdMappingTechniques`](crate::types::IdMappingTechniques).
    pub fn builder() -> crate::types::builders::IdMappingTechniquesBuilder {
        crate::types::builders::IdMappingTechniquesBuilder::default()
    }
}

/// A builder for [`IdMappingTechniques`](crate::types::IdMappingTechniques).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IdMappingTechniquesBuilder {
    pub(crate) id_mapping_type: ::std::option::Option<crate::types::IdMappingType>,
    pub(crate) provider_properties: ::std::option::Option<crate::types::ProviderProperties>,
}
impl IdMappingTechniquesBuilder {
    /// <p>The type of ID mapping.</p>
    pub fn id_mapping_type(mut self, input: crate::types::IdMappingType) -> Self {
        self.id_mapping_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of ID mapping.</p>
    pub fn set_id_mapping_type(mut self, input: ::std::option::Option<crate::types::IdMappingType>) -> Self {
        self.id_mapping_type = input;
        self
    }
    /// <p>The type of ID mapping.</p>
    pub fn get_id_mapping_type(&self) -> &::std::option::Option<crate::types::IdMappingType> {
        &self.id_mapping_type
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn provider_properties(mut self, input: crate::types::ProviderProperties) -> Self {
        self.provider_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn set_provider_properties(mut self, input: ::std::option::Option<crate::types::ProviderProperties>) -> Self {
        self.provider_properties = input;
        self
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn get_provider_properties(&self) -> &::std::option::Option<crate::types::ProviderProperties> {
        &self.provider_properties
    }
    /// Consumes the builder and constructs a [`IdMappingTechniques`](crate::types::IdMappingTechniques).
    pub fn build(self) -> crate::types::IdMappingTechniques {
        crate::types::IdMappingTechniques {
            id_mapping_type: self.id_mapping_type,
            provider_properties: self.provider_properties,
        }
    }
}
