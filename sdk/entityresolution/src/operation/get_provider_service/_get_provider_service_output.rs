// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetProviderServiceOutput {
    /// <p>The name of the provider. This name is typically the company name.</p>
    pub provider_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the product that the provider service provides. </p>
    pub provider_service_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the provider service.</p>
    pub provider_service_display_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of provider service.</p>
    pub provider_service_type: ::std::option::Option<crate::types::ServiceType>,
    /// <p>The ARN (Amazon Resource Name) that Entity Resolution generated for the provider service.</p>
    pub provider_service_arn: ::std::option::Option<::std::string::String>,
    /// <p>The definition of the provider configuration.</p>
    pub provider_configuration_definition: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>The required configuration fields to use with the provider service.</p>
    pub provider_endpoint_configuration: ::std::option::Option<crate::types::ProviderEndpointConfiguration>,
    /// <p>Specifies whether output data from the provider is anonymized. A value of <code>TRUE</code> means the output will be anonymized and you can't relate the data that comes back from the provider to the identifying input. A value of <code>FALSE</code> means the output won't be anonymized and you can relate the data that comes back from the provider to your source data. </p>
    pub anonymized_output: ::std::option::Option<bool>,
    /// <p>The definition of the provider entity output.</p>
    pub provider_entity_output_definition: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>The Amazon Web Services accounts and the S3 permissions that are required by some providers to create an S3 bucket for intermediate data storage.</p>
    pub provider_intermediate_data_access_configuration: ::std::option::Option<crate::types::ProviderIntermediateDataAccessConfiguration>,
    _request_id: Option<String>,
}
impl GetProviderServiceOutput {
    /// <p>The name of the provider. This name is typically the company name.</p>
    pub fn provider_name(&self) -> ::std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The name of the product that the provider service provides. </p>
    pub fn provider_service_name(&self) -> ::std::option::Option<&str> {
        self.provider_service_name.as_deref()
    }
    /// <p>The display name of the provider service.</p>
    pub fn provider_service_display_name(&self) -> ::std::option::Option<&str> {
        self.provider_service_display_name.as_deref()
    }
    /// <p>The type of provider service.</p>
    pub fn provider_service_type(&self) -> ::std::option::Option<&crate::types::ServiceType> {
        self.provider_service_type.as_ref()
    }
    /// <p>The ARN (Amazon Resource Name) that Entity Resolution generated for the provider service.</p>
    pub fn provider_service_arn(&self) -> ::std::option::Option<&str> {
        self.provider_service_arn.as_deref()
    }
    /// <p>The definition of the provider configuration.</p>
    pub fn provider_configuration_definition(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.provider_configuration_definition.as_ref()
    }
    /// <p>The required configuration fields to use with the provider service.</p>
    pub fn provider_endpoint_configuration(&self) -> ::std::option::Option<&crate::types::ProviderEndpointConfiguration> {
        self.provider_endpoint_configuration.as_ref()
    }
    /// <p>Specifies whether output data from the provider is anonymized. A value of <code>TRUE</code> means the output will be anonymized and you can't relate the data that comes back from the provider to the identifying input. A value of <code>FALSE</code> means the output won't be anonymized and you can relate the data that comes back from the provider to your source data. </p>
    pub fn anonymized_output(&self) -> ::std::option::Option<bool> {
        self.anonymized_output
    }
    /// <p>The definition of the provider entity output.</p>
    pub fn provider_entity_output_definition(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.provider_entity_output_definition.as_ref()
    }
    /// <p>The Amazon Web Services accounts and the S3 permissions that are required by some providers to create an S3 bucket for intermediate data storage.</p>
    pub fn provider_intermediate_data_access_configuration(
        &self,
    ) -> ::std::option::Option<&crate::types::ProviderIntermediateDataAccessConfiguration> {
        self.provider_intermediate_data_access_configuration.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetProviderServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProviderServiceOutput {
    /// Creates a new builder-style object to manufacture [`GetProviderServiceOutput`](crate::operation::get_provider_service::GetProviderServiceOutput).
    pub fn builder() -> crate::operation::get_provider_service::builders::GetProviderServiceOutputBuilder {
        crate::operation::get_provider_service::builders::GetProviderServiceOutputBuilder::default()
    }
}

/// A builder for [`GetProviderServiceOutput`](crate::operation::get_provider_service::GetProviderServiceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetProviderServiceOutputBuilder {
    pub(crate) provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) provider_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) provider_service_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) provider_service_type: ::std::option::Option<crate::types::ServiceType>,
    pub(crate) provider_service_arn: ::std::option::Option<::std::string::String>,
    pub(crate) provider_configuration_definition: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) provider_endpoint_configuration: ::std::option::Option<crate::types::ProviderEndpointConfiguration>,
    pub(crate) anonymized_output: ::std::option::Option<bool>,
    pub(crate) provider_entity_output_definition: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) provider_intermediate_data_access_configuration: ::std::option::Option<crate::types::ProviderIntermediateDataAccessConfiguration>,
    _request_id: Option<String>,
}
impl GetProviderServiceOutputBuilder {
    /// <p>The name of the provider. This name is typically the company name.</p>
    pub fn provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the provider. This name is typically the company name.</p>
    pub fn set_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The name of the provider. This name is typically the company name.</p>
    pub fn get_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_name
    }
    /// <p>The name of the product that the provider service provides. </p>
    pub fn provider_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the product that the provider service provides. </p>
    pub fn set_provider_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_service_name = input;
        self
    }
    /// <p>The name of the product that the provider service provides. </p>
    pub fn get_provider_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_service_name
    }
    /// <p>The display name of the provider service.</p>
    pub fn provider_service_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_service_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the provider service.</p>
    pub fn set_provider_service_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_service_display_name = input;
        self
    }
    /// <p>The display name of the provider service.</p>
    pub fn get_provider_service_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_service_display_name
    }
    /// <p>The type of provider service.</p>
    pub fn provider_service_type(mut self, input: crate::types::ServiceType) -> Self {
        self.provider_service_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of provider service.</p>
    pub fn set_provider_service_type(mut self, input: ::std::option::Option<crate::types::ServiceType>) -> Self {
        self.provider_service_type = input;
        self
    }
    /// <p>The type of provider service.</p>
    pub fn get_provider_service_type(&self) -> &::std::option::Option<crate::types::ServiceType> {
        &self.provider_service_type
    }
    /// <p>The ARN (Amazon Resource Name) that Entity Resolution generated for the provider service.</p>
    pub fn provider_service_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_service_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) that Entity Resolution generated for the provider service.</p>
    pub fn set_provider_service_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_service_arn = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) that Entity Resolution generated for the provider service.</p>
    pub fn get_provider_service_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_service_arn
    }
    /// <p>The definition of the provider configuration.</p>
    pub fn provider_configuration_definition(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.provider_configuration_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the provider configuration.</p>
    pub fn set_provider_configuration_definition(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.provider_configuration_definition = input;
        self
    }
    /// <p>The definition of the provider configuration.</p>
    pub fn get_provider_configuration_definition(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.provider_configuration_definition
    }
    /// <p>The required configuration fields to use with the provider service.</p>
    pub fn provider_endpoint_configuration(mut self, input: crate::types::ProviderEndpointConfiguration) -> Self {
        self.provider_endpoint_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The required configuration fields to use with the provider service.</p>
    pub fn set_provider_endpoint_configuration(mut self, input: ::std::option::Option<crate::types::ProviderEndpointConfiguration>) -> Self {
        self.provider_endpoint_configuration = input;
        self
    }
    /// <p>The required configuration fields to use with the provider service.</p>
    pub fn get_provider_endpoint_configuration(&self) -> &::std::option::Option<crate::types::ProviderEndpointConfiguration> {
        &self.provider_endpoint_configuration
    }
    /// <p>Specifies whether output data from the provider is anonymized. A value of <code>TRUE</code> means the output will be anonymized and you can't relate the data that comes back from the provider to the identifying input. A value of <code>FALSE</code> means the output won't be anonymized and you can relate the data that comes back from the provider to your source data. </p>
    pub fn anonymized_output(mut self, input: bool) -> Self {
        self.anonymized_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether output data from the provider is anonymized. A value of <code>TRUE</code> means the output will be anonymized and you can't relate the data that comes back from the provider to the identifying input. A value of <code>FALSE</code> means the output won't be anonymized and you can relate the data that comes back from the provider to your source data. </p>
    pub fn set_anonymized_output(mut self, input: ::std::option::Option<bool>) -> Self {
        self.anonymized_output = input;
        self
    }
    /// <p>Specifies whether output data from the provider is anonymized. A value of <code>TRUE</code> means the output will be anonymized and you can't relate the data that comes back from the provider to the identifying input. A value of <code>FALSE</code> means the output won't be anonymized and you can relate the data that comes back from the provider to your source data. </p>
    pub fn get_anonymized_output(&self) -> &::std::option::Option<bool> {
        &self.anonymized_output
    }
    /// <p>The definition of the provider entity output.</p>
    pub fn provider_entity_output_definition(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.provider_entity_output_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the provider entity output.</p>
    pub fn set_provider_entity_output_definition(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.provider_entity_output_definition = input;
        self
    }
    /// <p>The definition of the provider entity output.</p>
    pub fn get_provider_entity_output_definition(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.provider_entity_output_definition
    }
    /// <p>The Amazon Web Services accounts and the S3 permissions that are required by some providers to create an S3 bucket for intermediate data storage.</p>
    pub fn provider_intermediate_data_access_configuration(mut self, input: crate::types::ProviderIntermediateDataAccessConfiguration) -> Self {
        self.provider_intermediate_data_access_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Web Services accounts and the S3 permissions that are required by some providers to create an S3 bucket for intermediate data storage.</p>
    pub fn set_provider_intermediate_data_access_configuration(
        mut self,
        input: ::std::option::Option<crate::types::ProviderIntermediateDataAccessConfiguration>,
    ) -> Self {
        self.provider_intermediate_data_access_configuration = input;
        self
    }
    /// <p>The Amazon Web Services accounts and the S3 permissions that are required by some providers to create an S3 bucket for intermediate data storage.</p>
    pub fn get_provider_intermediate_data_access_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::ProviderIntermediateDataAccessConfiguration> {
        &self.provider_intermediate_data_access_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetProviderServiceOutput`](crate::operation::get_provider_service::GetProviderServiceOutput).
    pub fn build(self) -> crate::operation::get_provider_service::GetProviderServiceOutput {
        crate::operation::get_provider_service::GetProviderServiceOutput {
            provider_name: self.provider_name,
            provider_service_name: self.provider_service_name,
            provider_service_display_name: self.provider_service_display_name,
            provider_service_type: self.provider_service_type,
            provider_service_arn: self.provider_service_arn,
            provider_configuration_definition: self.provider_configuration_definition,
            provider_endpoint_configuration: self.provider_endpoint_configuration,
            anonymized_output: self.anonymized_output,
            provider_entity_output_definition: self.provider_entity_output_definition,
            provider_intermediate_data_access_configuration: self.provider_intermediate_data_access_configuration,
            _request_id: self._request_id,
        }
    }
}
