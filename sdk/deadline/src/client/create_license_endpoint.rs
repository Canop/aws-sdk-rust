// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLicenseEndpoint`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::set_client_token):<br>required: **false**<br><p>The unique token which the server uses to recognize retries of the same request.</p><br>
    ///   - [`vpc_id(impl Into<String>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::vpc_id) / [`set_vpc_id(Option<String>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::set_vpc_id):<br>required: **true**<br><p>The VPC (virtual private cloud) ID to use with the license endpoint.</p><br>
    ///   - [`subnet_ids(impl Into<String>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::subnet_ids) / [`set_subnet_ids(Option<Vec::<String>>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::set_subnet_ids):<br>required: **true**<br><p>The subnet IDs.</p><br>
    ///   - [`security_group_ids(impl Into<String>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec::<String>>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::set_security_group_ids):<br>required: **true**<br><p>The security group IDs.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::set_tags):<br>required: **false**<br><p>Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.</p><br>
    /// - On success, responds with [`CreateLicenseEndpointOutput`](crate::operation::create_license_endpoint::CreateLicenseEndpointOutput) with field(s):
    ///   - [`license_endpoint_id(String)`](crate::operation::create_license_endpoint::CreateLicenseEndpointOutput::license_endpoint_id): <p>The license endpoint ID.</p>
    /// - On failure, responds with [`SdkError<CreateLicenseEndpointError>`](crate::operation::create_license_endpoint::CreateLicenseEndpointError)
    pub fn create_license_endpoint(&self) -> crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder {
        crate::operation::create_license_endpoint::builders::CreateLicenseEndpointFluentBuilder::new(self.handle.clone())
    }
}
