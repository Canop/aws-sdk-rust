// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SearchJobs`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`farm_id(impl Into<String>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::farm_id) / [`set_farm_id(Option<String>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::set_farm_id):<br>required: **true**<br><p>The farm ID of the job.</p><br>
    ///   - [`queue_ids(impl Into<String>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::queue_ids) / [`set_queue_ids(Option<Vec::<String>>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::set_queue_ids):<br>required: **true**<br><p>The queue ID to use in the job search.</p><br>
    ///   - [`filter_expressions(SearchGroupedFilterExpressions)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::filter_expressions) / [`set_filter_expressions(Option<SearchGroupedFilterExpressions>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::set_filter_expressions):<br>required: **false**<br><p>The filter expression, <code>AND</code> or <code>OR</code>, to use when searching among a group of search strings in a resource. You can use two groupings per search each within parenthesis <code>()</code>.</p><br>
    ///   - [`sort_expressions(SearchSortExpression)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::sort_expressions) / [`set_sort_expressions(Option<Vec::<SearchSortExpression>>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::set_sort_expressions):<br>required: **false**<br><p>The search terms for a resource.</p><br>
    ///   - [`item_offset(i32)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::item_offset) / [`set_item_offset(Option<i32>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::set_item_offset):<br>required: **true**<br><p>Defines how far into the scrollable list to start the return of results.</p><br>
    ///   - [`page_size(i32)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::page_size) / [`set_page_size(Option<i32>)`](crate::operation::search_jobs::builders::SearchJobsFluentBuilder::set_page_size):<br>required: **false**<br><p>Specifies the number of items per page for the resource.</p><br>
    /// - On success, responds with [`SearchJobsOutput`](crate::operation::search_jobs::SearchJobsOutput) with field(s):
    ///   - [`jobs(Vec::<JobSearchSummary>)`](crate::operation::search_jobs::SearchJobsOutput::jobs): <p>The jobs in the search.</p>
    ///   - [`next_item_offset(Option<i32>)`](crate::operation::search_jobs::SearchJobsOutput::next_item_offset): <p>The next incremental starting point after the defined <code>itemOffset</code>.</p>
    ///   - [`total_results(i32)`](crate::operation::search_jobs::SearchJobsOutput::total_results): <p>The total number of results in the search.</p>
    /// - On failure, responds with [`SdkError<SearchJobsError>`](crate::operation::search_jobs::SearchJobsError)
    pub fn search_jobs(&self) -> crate::operation::search_jobs::builders::SearchJobsFluentBuilder {
        crate::operation::search_jobs::builders::SearchJobsFluentBuilder::new(self.handle.clone())
    }
}
