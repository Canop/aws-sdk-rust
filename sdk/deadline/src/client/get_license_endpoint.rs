// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLicenseEndpoint`](crate::operation::get_license_endpoint::builders::GetLicenseEndpointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_endpoint_id(impl Into<String>)`](crate::operation::get_license_endpoint::builders::GetLicenseEndpointFluentBuilder::license_endpoint_id) / [`set_license_endpoint_id(Option<String>)`](crate::operation::get_license_endpoint::builders::GetLicenseEndpointFluentBuilder::set_license_endpoint_id):<br>required: **true**<br><p>The license endpoint ID.</p><br>
    /// - On success, responds with [`GetLicenseEndpointOutput`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput) with field(s):
    ///   - [`license_endpoint_id(String)`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput::license_endpoint_id): <p>The license endpoint ID.</p>
    ///   - [`status(LicenseEndpointStatus)`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput::status): <p>The status of the license endpoint.</p>
    ///   - [`status_message(String)`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput::status_message): <p>The status message of the license endpoint.</p>
    ///   - [`vpc_id(Option<String>)`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput::vpc_id): <p>The VCP(virtual private cloud) ID associated with the license endpoint.</p>
    ///   - [`dns_name(Option<String>)`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput::dns_name): <p>The DNS name.</p>
    ///   - [`subnet_ids(Option<Vec::<String>>)`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput::subnet_ids): <p>The subnet IDs.</p>
    ///   - [`security_group_ids(Option<Vec::<String>>)`](crate::operation::get_license_endpoint::GetLicenseEndpointOutput::security_group_ids): <p>The security group IDs for the license endpoint.</p>
    /// - On failure, responds with [`SdkError<GetLicenseEndpointError>`](crate::operation::get_license_endpoint::GetLicenseEndpointError)
    pub fn get_license_endpoint(&self) -> crate::operation::get_license_endpoint::builders::GetLicenseEndpointFluentBuilder {
        crate::operation::get_license_endpoint::builders::GetLicenseEndpointFluentBuilder::new(self.handle.clone())
    }
}
