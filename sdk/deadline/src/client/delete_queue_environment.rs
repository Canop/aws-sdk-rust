// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteQueueEnvironment`](crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`farm_id(impl Into<String>)`](crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder::farm_id) / [`set_farm_id(Option<String>)`](crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder::set_farm_id):<br>required: **true**<br><p>The farm ID of the farm from which to remove the queue environment.</p><br>
    ///   - [`queue_id(impl Into<String>)`](crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder::queue_id) / [`set_queue_id(Option<String>)`](crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder::set_queue_id):<br>required: **true**<br><p>The queue ID of the queue environment to delete.</p><br>
    ///   - [`queue_environment_id(impl Into<String>)`](crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder::queue_environment_id) / [`set_queue_environment_id(Option<String>)`](crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder::set_queue_environment_id):<br>required: **true**<br><p>The queue environment ID of the queue environment to delete.</p><br>
    /// - On success, responds with [`DeleteQueueEnvironmentOutput`](crate::operation::delete_queue_environment::DeleteQueueEnvironmentOutput)
    /// - On failure, responds with [`SdkError<DeleteQueueEnvironmentError>`](crate::operation::delete_queue_environment::DeleteQueueEnvironmentError)
    pub fn delete_queue_environment(&self) -> crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder {
        crate::operation::delete_queue_environment::builders::DeleteQueueEnvironmentFluentBuilder::new(self.handle.clone())
    }
}
