// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_connector_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_connector::CreateConnectorInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.capacity {
        #[allow(unused_mut)]
        let mut object_2 = object.key("capacity").start_object();
        crate::protocol_serde::shape_capacity::ser_capacity(&mut object_2, var_1)?;
        object_2.finish();
    }
    {
        #[allow(unused_mut)]
        let mut object_3 = object.key("connectorConfiguration").start_object();
        for (key_4, value_5) in &input.connector_configuration {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.connector_description {
        object.key("connectorDescription").string(var_6.as_str());
    }
    {
        object.key("connectorName").string(input.connector_name.as_str());
    }
    if let Some(var_7) = &input.kafka_cluster {
        #[allow(unused_mut)]
        let mut object_8 = object.key("kafkaCluster").start_object();
        crate::protocol_serde::shape_kafka_cluster::ser_kafka_cluster(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.kafka_cluster_client_authentication {
        #[allow(unused_mut)]
        let mut object_10 = object.key("kafkaClusterClientAuthentication").start_object();
        crate::protocol_serde::shape_kafka_cluster_client_authentication::ser_kafka_cluster_client_authentication(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.kafka_cluster_encryption_in_transit {
        #[allow(unused_mut)]
        let mut object_12 = object.key("kafkaClusterEncryptionInTransit").start_object();
        crate::protocol_serde::shape_kafka_cluster_encryption_in_transit::ser_kafka_cluster_encryption_in_transit(&mut object_12, var_11)?;
        object_12.finish();
    }
    {
        object.key("kafkaConnectVersion").string(input.kafka_connect_version.as_str());
    }
    if let Some(var_13) = &input.log_delivery {
        #[allow(unused_mut)]
        let mut object_14 = object.key("logDelivery").start_object();
        crate::protocol_serde::shape_log_delivery::ser_log_delivery(&mut object_14, var_13)?;
        object_14.finish();
    }
    {
        let mut array_15 = object.key("plugins").start_array();
        for item_16 in &input.plugins {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_plugin::ser_plugin(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    {
        object.key("serviceExecutionRoleArn").string(input.service_execution_role_arn.as_str());
    }
    if let Some(var_18) = &input.worker_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("workerConfiguration").start_object();
        crate::protocol_serde::shape_worker_configuration::ser_worker_configuration(&mut object_19, var_18)?;
        object_19.finish();
    }
    Ok(())
}
