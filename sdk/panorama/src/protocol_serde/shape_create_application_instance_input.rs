// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_application_instance_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_application_instance::CreateApplicationInstanceInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.application_instance_id_to_replace {
        object.key("ApplicationInstanceIdToReplace").string(var_1.as_str());
    }
    {
        object
            .key("DefaultRuntimeContextDevice")
            .string(input.default_runtime_context_device.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.manifest_overrides_payload {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ManifestOverridesPayload").start_object();
        crate::protocol_serde::shape_manifest_overrides_payload::ser_manifest_overrides_payload(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.manifest_payload {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ManifestPayload").start_object();
        crate::protocol_serde::shape_manifest_payload::ser_manifest_payload(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.name {
        object.key("Name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.runtime_role_arn {
        object.key("RuntimeRoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
