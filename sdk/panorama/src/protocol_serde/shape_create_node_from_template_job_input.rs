// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_node_from_template_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_node_from_template_job::CreateNodeFromTemplateJobInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.job_tags {
        let mut array_2 = object.key("JobTags").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_job_resource_tags::ser_job_resource_tags(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.node_description {
        object.key("NodeDescription").string(var_5.as_str());
    }
    {
        object.key("NodeName").string(input.node_name.as_str());
    }
    {
        object.key("OutputPackageName").string(input.output_package_name.as_str());
    }
    {
        object.key("OutputPackageVersion").string(input.output_package_version.as_str());
    }
    {
        #[allow(unused_mut)]
        let mut object_6 = object.key("TemplateParameters").start_object();
        for (key_7, value_8) in &input.template_parameters {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    {
        object.key("TemplateType").string(input.template_type.as_str());
    }
    Ok(())
}
