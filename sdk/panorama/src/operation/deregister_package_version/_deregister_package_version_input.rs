// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeregisterPackageVersionInput {
    /// <p>An owner account.</p>
    pub owner_account: ::std::option::Option<::std::string::String>,
    /// <p>A package ID.</p>
    pub package_id: ::std::string::String,
    /// <p>A package version.</p>
    pub package_version: ::std::string::String,
    /// <p>A patch version.</p>
    pub patch_version: ::std::string::String,
    /// <p>If the version was marked latest, the new version to maker as latest.</p>
    pub updated_latest_patch_version: ::std::option::Option<::std::string::String>,
}
impl DeregisterPackageVersionInput {
    /// <p>An owner account.</p>
    pub fn owner_account(&self) -> ::std::option::Option<&str> {
        self.owner_account.as_deref()
    }
    /// <p>A package ID.</p>
    pub fn package_id(&self) -> &str {
        use std::ops::Deref;
        self.package_id.deref()
    }
    /// <p>A package version.</p>
    pub fn package_version(&self) -> &str {
        use std::ops::Deref;
        self.package_version.deref()
    }
    /// <p>A patch version.</p>
    pub fn patch_version(&self) -> &str {
        use std::ops::Deref;
        self.patch_version.deref()
    }
    /// <p>If the version was marked latest, the new version to maker as latest.</p>
    pub fn updated_latest_patch_version(&self) -> ::std::option::Option<&str> {
        self.updated_latest_patch_version.as_deref()
    }
}
impl DeregisterPackageVersionInput {
    /// Creates a new builder-style object to manufacture [`DeregisterPackageVersionInput`](crate::operation::deregister_package_version::DeregisterPackageVersionInput).
    pub fn builder() -> crate::operation::deregister_package_version::builders::DeregisterPackageVersionInputBuilder {
        crate::operation::deregister_package_version::builders::DeregisterPackageVersionInputBuilder::default()
    }
}

/// A builder for [`DeregisterPackageVersionInput`](crate::operation::deregister_package_version::DeregisterPackageVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeregisterPackageVersionInputBuilder {
    pub(crate) owner_account: ::std::option::Option<::std::string::String>,
    pub(crate) package_id: ::std::option::Option<::std::string::String>,
    pub(crate) package_version: ::std::option::Option<::std::string::String>,
    pub(crate) patch_version: ::std::option::Option<::std::string::String>,
    pub(crate) updated_latest_patch_version: ::std::option::Option<::std::string::String>,
}
impl DeregisterPackageVersionInputBuilder {
    /// <p>An owner account.</p>
    pub fn owner_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An owner account.</p>
    pub fn set_owner_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account = input;
        self
    }
    /// <p>An owner account.</p>
    pub fn get_owner_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account
    }
    /// <p>A package ID.</p>
    /// This field is required.
    pub fn package_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A package ID.</p>
    pub fn set_package_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_id = input;
        self
    }
    /// <p>A package ID.</p>
    pub fn get_package_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_id
    }
    /// <p>A package version.</p>
    /// This field is required.
    pub fn package_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A package version.</p>
    pub fn set_package_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    /// <p>A package version.</p>
    pub fn get_package_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_version
    }
    /// <p>A patch version.</p>
    /// This field is required.
    pub fn patch_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.patch_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A patch version.</p>
    pub fn set_patch_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.patch_version = input;
        self
    }
    /// <p>A patch version.</p>
    pub fn get_patch_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.patch_version
    }
    /// <p>If the version was marked latest, the new version to maker as latest.</p>
    pub fn updated_latest_patch_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_latest_patch_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the version was marked latest, the new version to maker as latest.</p>
    pub fn set_updated_latest_patch_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_latest_patch_version = input;
        self
    }
    /// <p>If the version was marked latest, the new version to maker as latest.</p>
    pub fn get_updated_latest_patch_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_latest_patch_version
    }
    /// Consumes the builder and constructs a [`DeregisterPackageVersionInput`](crate::operation::deregister_package_version::DeregisterPackageVersionInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`package_id`](crate::operation::deregister_package_version::builders::DeregisterPackageVersionInputBuilder::package_id)
    /// - [`package_version`](crate::operation::deregister_package_version::builders::DeregisterPackageVersionInputBuilder::package_version)
    /// - [`patch_version`](crate::operation::deregister_package_version::builders::DeregisterPackageVersionInputBuilder::patch_version)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::deregister_package_version::DeregisterPackageVersionInput,
        ::aws_smithy_http::operation::error::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::deregister_package_version::DeregisterPackageVersionInput {
            owner_account: self.owner_account,
            package_id: self.package_id.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "package_id",
                    "package_id was not specified but it is required when building DeregisterPackageVersionInput",
                )
            })?,
            package_version: self.package_version.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "package_version",
                    "package_version was not specified but it is required when building DeregisterPackageVersionInput",
                )
            })?,
            patch_version: self.patch_version.ok_or_else(|| {
                ::aws_smithy_http::operation::error::BuildError::missing_field(
                    "patch_version",
                    "patch_version was not specified but it is required when building DeregisterPackageVersionInput",
                )
            })?,
            updated_latest_patch_version: self.updated_latest_patch_version,
        })
    }
}
