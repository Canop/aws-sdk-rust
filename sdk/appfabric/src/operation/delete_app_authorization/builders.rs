// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_app_authorization::_delete_app_authorization_output::DeleteAppAuthorizationOutputBuilder;

pub use crate::operation::delete_app_authorization::_delete_app_authorization_input::DeleteAppAuthorizationInputBuilder;

impl DeleteAppAuthorizationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_app_authorization::DeleteAppAuthorizationOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_app_authorization::DeleteAppAuthorizationError,
            ::aws_smithy_http::operation::Response,
        >,
    > {
        let mut fluent_builder = client.delete_app_authorization();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteAppAuthorization`.
///
/// <p>Deletes an app authorization. You must delete the associated ingestion before you can delete an app authorization.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteAppAuthorizationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_app_authorization::builders::DeleteAppAuthorizationInputBuilder,
}
impl DeleteAppAuthorizationFluentBuilder {
    /// Creates a new `DeleteAppAuthorization`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the DeleteAppAuthorization as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_app_authorization::builders::DeleteAppAuthorizationInputBuilder {
        &self.inner
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn customize_middleware(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_app_authorization::DeleteAppAuthorization,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::delete_app_authorization::DeleteAppAuthorizationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn send_middleware(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_app_authorization::DeleteAppAuthorizationOutput,
        ::aws_smithy_http::result::SdkError<crate::operation::delete_app_authorization::DeleteAppAuthorizationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_app_authorization::DeleteAppAuthorizationOutput,
        ::aws_smithy_http::result::SdkError<crate::operation::delete_app_authorization::DeleteAppAuthorizationError>,
    > {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_app_authorization::DeleteAppAuthorization,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::delete_app_authorization::DeleteAppAuthorizationError>,
    > {
        self.customize_middleware().await
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn app_bundle_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app_bundle_identifier(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn set_app_bundle_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app_bundle_identifier(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app bundle to use for the request.</p>
    pub fn get_app_bundle_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app_bundle_identifier()
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    pub fn app_authorization_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app_authorization_identifier(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    pub fn set_app_authorization_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app_authorization_identifier(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) or Universal Unique Identifier (UUID) of the app authorization to use for the request.</p>
    pub fn get_app_authorization_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app_authorization_identifier()
    }
}
