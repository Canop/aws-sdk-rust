// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"State","expected":"Active","comparator":"stringEquals"}}
pub(crate) fn match_get_function_configuration_9fb739f92fd5b515a(
    _result: ::std::result::Result<
        &crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
        &crate::operation::get_function_configuration::GetFunctionConfigurationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
    ) -> ::std::option::Option<&'a crate::types::State> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Active";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"State","expected":"Failed","comparator":"stringEquals"}}
pub(crate) fn match_get_function_configuration_87a1a2d4cc2e2d1e1(
    _result: ::std::result::Result<
        &crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
        &crate::operation::get_function_configuration::GetFunctionConfigurationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
    ) -> ::std::option::Option<&'a crate::types::State> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Failed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"State","expected":"Pending","comparator":"stringEquals"}}
pub(crate) fn match_get_function_configuration_ff08d54fec9077aeb(
    _result: ::std::result::Result<
        &crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
        &crate::operation::get_function_configuration::GetFunctionConfigurationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
    ) -> ::std::option::Option<&'a crate::types::State> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Pending";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Configuration.State","expected":"Active","comparator":"stringEquals"}}
pub(crate) fn match_get_function_d9eb800ea4f674f85(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_function::GetFunctionOutput) -> ::std::option::Option<&'a crate::types::State> {
        let _fld_1 = _output.configuration.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Active";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Configuration.State","expected":"Failed","comparator":"stringEquals"}}
pub(crate) fn match_get_function_ee0f14a7f1ed34282(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_function::GetFunctionOutput) -> ::std::option::Option<&'a crate::types::State> {
        let _fld_1 = _output.configuration.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Failed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Configuration.State","expected":"Pending","comparator":"stringEquals"}}
pub(crate) fn match_get_function_1248046627b71c232(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_function::GetFunctionOutput) -> ::std::option::Option<&'a crate::types::State> {
        let _fld_1 = _output.configuration.as_ref()?;
        let _fld_2 = _fld_1.state.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Pending";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"success":true}
pub(crate) fn match_get_function_c955e57777ec0d736(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    _result.is_ok()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_function_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"LastUpdateStatus","expected":"Successful","comparator":"stringEquals"}}
pub(crate) fn match_get_function_configuration_72b8f2e5744091428(
    _result: ::std::result::Result<
        &crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
        &crate::operation::get_function_configuration::GetFunctionConfigurationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
    ) -> ::std::option::Option<&'a crate::types::LastUpdateStatus> {
        let _fld_1 = _output.last_update_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Successful";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"LastUpdateStatus","expected":"Failed","comparator":"stringEquals"}}
pub(crate) fn match_get_function_configuration_4a2442d74e6aa2cc0(
    _result: ::std::result::Result<
        &crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
        &crate::operation::get_function_configuration::GetFunctionConfigurationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
    ) -> ::std::option::Option<&'a crate::types::LastUpdateStatus> {
        let _fld_1 = _output.last_update_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Failed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"LastUpdateStatus","expected":"InProgress","comparator":"stringEquals"}}
pub(crate) fn match_get_function_configuration_ee72e8a7f6fced7db(
    _result: ::std::result::Result<
        &crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
        &crate::operation::get_function_configuration::GetFunctionConfigurationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function_configuration::GetFunctionConfigurationOutput,
    ) -> ::std::option::Option<&'a crate::types::LastUpdateStatus> {
        let _fld_1 = _output.last_update_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "InProgress";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Configuration.LastUpdateStatus","expected":"Successful","comparator":"stringEquals"}}
pub(crate) fn match_get_function_bb186291d75dc0a7c(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function::GetFunctionOutput,
    ) -> ::std::option::Option<&'a crate::types::LastUpdateStatus> {
        let _fld_1 = _output.configuration.as_ref()?;
        let _fld_2 = _fld_1.last_update_status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Successful";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Configuration.LastUpdateStatus","expected":"Failed","comparator":"stringEquals"}}
pub(crate) fn match_get_function_32170188e7ebc617b(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function::GetFunctionOutput,
    ) -> ::std::option::Option<&'a crate::types::LastUpdateStatus> {
        let _fld_1 = _output.configuration.as_ref()?;
        let _fld_2 = _fld_1.last_update_status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Failed";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Configuration.LastUpdateStatus","expected":"InProgress","comparator":"stringEquals"}}
pub(crate) fn match_get_function_189e2de3db97bdc77(
    _result: ::std::result::Result<&crate::operation::get_function::GetFunctionOutput, &crate::operation::get_function::GetFunctionError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_function::GetFunctionOutput,
    ) -> ::std::option::Option<&'a crate::types::LastUpdateStatus> {
        let _fld_1 = _output.configuration.as_ref()?;
        let _fld_2 = _fld_1.last_update_status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "InProgress";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
