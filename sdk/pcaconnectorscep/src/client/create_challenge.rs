// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateChallenge`](crate::operation::create_challenge::builders::CreateChallengeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_arn(impl Into<String>)`](crate::operation::create_challenge::builders::CreateChallengeFluentBuilder::connector_arn) / [`set_connector_arn(Option<String>)`](crate::operation::create_challenge::builders::CreateChallengeFluentBuilder::set_connector_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the connector that you want to create a challenge for.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_challenge::builders::CreateChallengeFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_challenge::builders::CreateChallengeFluentBuilder::set_client_token):<br>required: **false**<br><p>Custom string that can be used to distinguish between calls to the <a href="https://docs.aws.amazon.com/C4SCEP_API/pca-connector-scep/latest/APIReference/API_CreateChallenge.html">CreateChallenge</a> action. Client tokens for <code>CreateChallenge</code> time out after five minutes. Therefore, if you call <code>CreateChallenge</code> multiple times with the same client token within five minutes, Connector for SCEP recognizes that you are requesting only one challenge and will only respond with one. If you change the client token for each call, Connector for SCEP recognizes that you are requesting multiple challenge passwords.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_challenge::builders::CreateChallengeFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_challenge::builders::CreateChallengeFluentBuilder::set_tags):<br>required: **false**<br><p>The key-value pairs to associate with the resource.</p><br>
    /// - On success, responds with [`CreateChallengeOutput`](crate::operation::create_challenge::CreateChallengeOutput) with field(s):
    ///   - [`challenge(Option<Challenge>)`](crate::operation::create_challenge::CreateChallengeOutput::challenge): <p>Returns the challenge details for the specified connector.</p>
    /// - On failure, responds with [`SdkError<CreateChallengeError>`](crate::operation::create_challenge::CreateChallengeError)
    pub fn create_challenge(&self) -> crate::operation::create_challenge::builders::CreateChallengeFluentBuilder {
        crate::operation::create_challenge::builders::CreateChallengeFluentBuilder::new(self.handle.clone())
    }
}
